<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Übung macht den Meister</title>
  
  
  <link href="https://frederick-s.github.io/atom.xml" rel="self"/>
  
  <link href="https://frederick-s.github.io/"/>
  <updated>2021-12-22T16:00:00.000Z</updated>
  <id>https://frederick-s.github.io/</id>
  
  <author>
    <name>Xiaodan Mao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Commodity Hardware</title>
    <link href="https://frederick-s.github.io/2021/12/23/commodity-hardware/"/>
    <id>https://frederick-s.github.io/2021/12/23/commodity-hardware/</id>
    <published>2021-12-22T16:00:00.000Z</published>
    <updated>2021-12-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Commodity Hardware</code> 指较为廉价的硬件设备，它具有如下特点：</p><ol><li>价格相对低廉</li><li>易采购</li><li>和同类型的硬件可相互替换</li></ol><p>由此相关的一个概念叫 <code>commodity computing</code>，即使用大量的廉价硬件来实现低成本、高性能的并行计算，与之相对的则是高成本的超级计算机。</p><p>参考：</p><ul><li><a href="https://www.suse.com/suse-defines/definition/commodity-hardware/">Commodity Hardware</a></li><li><a href="https://en.wikipedia.org/wiki/Commodity_computing">Commodity computing</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Commodity Hardware&lt;/code&gt; 指较为廉价的硬件设备，它具有如下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;价格相对低廉&lt;/li&gt;
&lt;li&gt;易采购&lt;/li&gt;
&lt;li&gt;和同类型的硬件可相互替换&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由此相关的一个概念叫 &lt;code</summary>
      
    
    
    
    
    <category term="English" scheme="https://frederick-s.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>迁移业余项目数据到 Azure MySQL</title>
    <link href="https://frederick-s.github.io/2021/12/19/how-to-import-data-to-azure-mysql/"/>
    <id>https://frederick-s.github.io/2021/12/19/how-to-import-data-to-azure-mysql/</id>
    <published>2021-12-18T16:00:00.000Z</published>
    <updated>2021-12-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建了 <code>Azure MySQL</code> 实例后（这里使用的是 <code>Flexible Server</code>），首先导出原始数据库的数据，因为用的是 <code>Docker</code> 所以通过以下方式导出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec $&#123;container_id&#125; &#x2F;usr&#x2F;bin&#x2F;mysqldump -u $&#123;user_name&#125; --password&#x3D;$&#123;password&#125; $&#123;database_name&#125; &gt; backup.sql</span><br></pre></td></tr></table></figure><p>然后通过 <code>Azure CLI</code> 创建一个新的数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az mysql flexible-server db create --resource-group $&#123;resource_group&#125; --server-name $&#123;server_name&#125; --database-name $&#123;database_name&#125;</span><br></pre></td></tr></table></figure><p>最后通过 <code>Azure CLI</code> 导入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az mysql flexible-server execute -n $&#123;server_name&#125; -u $&#123;user_name&#125; -p $&#123;password&#125; -d $&#123;database_name&#125; -f $&#123;path_to_backup_sql_file&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://github.com/Azure-samples/mysql-database-samples">Sample Databases for Azure Database for MySQL flexible server</a></li><li><a href="https://docs.microsoft.com/en-us/cli/azure/mysql/flexible-server?view=azure-cli-latest">az mysql flexible-server</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建了 &lt;code&gt;Azure MySQL&lt;/code&gt; 实例后（这里使用的是 &lt;code&gt;Flexible Server&lt;/code&gt;），首先导出原始数据库的数据，因为用的是 &lt;code&gt;Docker&lt;/code&gt; 所以通过以下方式导出：&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    
    <category term="Azure" scheme="https://frederick-s.github.io/tags/Azure/"/>
    
    <category term="MySQL" scheme="https://frederick-s.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>为什么 Java 方法重载不允许仅返回值类型不同</title>
    <link href="https://frederick-s.github.io/2021/11/28/java-function-overload-return-different-type-only/"/>
    <id>https://frederick-s.github.io/2021/11/28/java-function-overload-return-different-type-only/</id>
    <published>2021-11-27T16:00:00.000Z</published>
    <updated>2021-11-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>Java</code> 中，如果两个同名方法仅返回值类型不同，这是不允许的，即编译器不会认为这是方法重载，如下述类中的方法 <code>f</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会提示 <code>&#39;f()&#39; is already defined in &#39;Demo&#39;</code>。假设编译器支持这种方式的方法重载，会有什么问题？在某些情况下，编译器无法区分调用的是哪个方法，例如当调用 <code>f()</code> 却忽略返回值时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f();</span><br></pre></td></tr></table></figure><p>所以仅返回值类型不同不能作为方法重载的形式。</p><p>参考：</p><ul><li>Thinking in Java</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;code&gt;Java&lt;/code&gt; 中，如果两个同名方法仅返回值类型不同，这是不允许的，即编译器不会认为这是方法重载，如下述类中的方法 &lt;code&gt;f&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    
    <category term="Java" scheme="https://frederick-s.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Python for/while else</title>
    <link href="https://frederick-s.github.io/2021/08/08/python-for-while-else/"/>
    <id>https://frederick-s.github.io/2021/08/08/python-for-while-else/</id>
    <published>2021-08-07T16:00:00.000Z</published>
    <updated>2021-08-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>和常见的语言不同，<code>Python</code> 的 <code>for/while</code> 可以配合 <code>else</code> 使用。简单来说，当 <code>for/while</code> 循环体中没有执行 <code>break</code> 时，就会执行 <code>else</code> 中的代码。假设需要判断数组中是否存在某个数，如果不存在的话则抛出异常，一种可能的写法是：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">target = <span class="number">10</span></span><br><span class="line">found = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> i == target:</span><br><span class="line">        found = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;not found&#x27;</span>)</span><br></pre></td></tr></table></figure><p>借助 <code>for/while else</code> 可改写成：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> i == target:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;not found&#x27;</span>)</span><br></pre></td></tr></table></figure><p>虽然代码少了几行，但是对于不熟悉该语法特性的人来说可能无法一眼看穿代码的意图。</p><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops">Why does python use ‘else’ after for and while loops?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;和常见的语言不同，&lt;code&gt;Python&lt;/code&gt; 的 &lt;code&gt;for/while&lt;/code&gt; 可以配合 &lt;code&gt;else&lt;/code&gt; 使用。简单来说，当 &lt;code&gt;for/while&lt;/code&gt; 循环体中没有执行 &lt;code&gt;break&lt;/code&gt;</summary>
      
    
    
    
    
    <category term="Python" scheme="https://frederick-s.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python heapq 自定义比较器</title>
    <link href="https://frederick-s.github.io/2021/07/31/python-heapq-custom-comparator/"/>
    <id>https://frederick-s.github.io/2021/07/31/python-heapq-custom-comparator/</id>
    <published>2021-07-30T16:00:00.000Z</published>
    <updated>2021-07-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>Python</code> 的 <code>heapq</code> 模块时，如果处理的是较为复杂的数据结构，则需要实现自定义比较器来比较两个元素的大小。</p><h2 id="使用元组"><a href="#使用元组" class="headerlink" title="使用元组"></a>使用元组</h2><p>如果 <code>heapq</code> 中放入的是元组，那么元组的第一个元素会用于大小比较。假设有这样一个问题，给定一个数组，返回前 <code>k</code> 小的数字所在数组中的位置。<code>Top k</code> 的问题的一个解法是使用堆，但是这里要求的是数字在数组中的位置而不是数字本身，所以不能直接将数组堆化，可以先将数组中的每个数字转换成一个包含2个元素的元组，元组的第一个元素是数字本身，第二个元素则是数字在数组中的位置。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">top_k</span>(<span class="params">numbers, k</span>):</span></span><br><span class="line">  heap = [(n, i) <span class="keyword">for</span> i, n <span class="keyword">in</span> <span class="built_in">enumerate</span>(numbers)]</span><br><span class="line">  heapq.heapify(heap)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: heapq.heappop(heap)[<span class="number">1</span>], <span class="built_in">range</span>(k)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  print(top_k([<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], <span class="number">3</span>)) <span class="comment"># [4, 3, 2]</span></span><br></pre></td></tr></table></figure><h2 id="实现自定义比较器"><a href="#实现自定义比较器" class="headerlink" title="实现自定义比较器"></a>实现自定义比较器</h2><p>当放入堆中的是自定义类时，可以通过实现 <code>__lt__</code> 方法来比较元素大小。假设有一个自定义类为 <code>Node</code>，它包含一个 <code>value</code> 属性，现在问题改为给定一个 <code>Node</code> 的数组，返回前 <code>k</code> 小的 <code>Node</code> 的值，可通过实现 <code>__lt__</code> 方法求解。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    self.value = value</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.value &lt; other.value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">top_k</span>(<span class="params">nodes, k</span>):</span></span><br><span class="line">  heap = [node <span class="keyword">for</span> node <span class="keyword">in</span> nodes]</span><br><span class="line">  heapq.heapify(heap)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: heapq.heappop(heap).value, <span class="built_in">range</span>(k)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  print(top_k([Node(<span class="number">5</span>), Node(<span class="number">4</span>), Node(<span class="number">3</span>), Node(<span class="number">2</span>), Node(<span class="number">1</span>)], <span class="number">3</span>)) <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/8875706/heapq-with-custom-compare-predicate/8875823">heapq with custom compare predicate</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 &lt;code&gt;Python&lt;/code&gt; 的 &lt;code&gt;heapq&lt;/code&gt; 模块时，如果处理的是较为复杂的数据结构，则需要实现自定义比较器来比较两个元素的大小。&lt;/p&gt;
&lt;h2 id=&quot;使用元组&quot;&gt;&lt;a href=&quot;#使用元组&quot; class=&quot;headerlin</summary>
      
    
    
    
    
    <category term="Python" scheme="https://frederick-s.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Docker 磁盘占用清理</title>
    <link href="https://frederick-s.github.io/2021/07/11/clean-up-docker/"/>
    <id>https://frederick-s.github.io/2021/07/11/clean-up-docker/</id>
    <published>2021-07-10T16:00:00.000Z</published>
    <updated>2021-07-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>日常随着 <code>Docker</code> 的使用，<code>Docker</code> 会逐渐占用磁盘空间，通过 <code>docker system df</code> 可查看 <code>Docker</code> 所占用的空间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          20        14        22.21GB   17.07GB (76%)</span><br><span class="line">Containers      29        0         6.743GB   6.743GB (100%)</span><br><span class="line">Local Volumes   2         0         417MB     417MB (100%)</span><br><span class="line">Build Cache     0         0         0B        0B</span><br></pre></td></tr></table></figure><p>其中 <code>Images</code> 表示镜像，<code>Containers</code> 表示容器，<code>Local Volumes</code> 表示本地卷，<code>Build Cache</code> 表示构建缓存。</p><h2 id="整体清理"><a href="#整体清理" class="headerlink" title="整体清理"></a>整体清理</h2><p>可以通过 <code>docker system prune</code> 进行一次空间清理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove:</span><br><span class="line">  - all stopped containers</span><br><span class="line">  - all networks not used by at least one container</span><br><span class="line">  - all dangling images</span><br><span class="line">  - all dangling build cache</span><br><span class="line"></span><br><span class="line">Are you sure you want to continue? [y&#x2F;N]</span><br></pre></td></tr></table></figure><p>该操作会删除所有停止的容器，所有未被至少一个容器使用的网络，所有的 <code>dangling</code> 镜像（在构建镜像时产生的 <code>tag</code> 为 <code>none</code> 的镜像，没有和任何其他有 <code>tag</code> 的镜像有关联），所有的 <code>dangling</code> 构建缓存（和 <code>dangling</code> 镜像同理）。</p><p>更激进一点，还可以执行 <code>docker system prune -a</code>，该操作还会删除没有和运行中的容器有关联的镜像。</p><h2 id="镜像清理"><a href="#镜像清理" class="headerlink" title="镜像清理"></a>镜像清理</h2><p><code>Docker</code> 镜像是某个应用（如数据库、某个程序语言的运行时）的磁盘快照，可以通过 <code>docker image ls -a</code> 查看所有的镜像（活跃的以及 <code>dangling</code> 的镜像）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   4 months ago   13.3kB</span><br></pre></td></tr></table></figure><p>可以通过 <code>docker image rm &lt;name_or_id&gt;</code> 来删除某个镜像，支持批量删除多个镜像，多个镜像 <code>id</code> 之间使用空格分隔即可。不过，删除镜像要求该镜像没有被某个容器所使用，否则会提示下述类似错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: conflict: unable to delete 4cdc5dd7eaad (must be forced) - image is being used by stopped container 3d9f62acc483</span><br><span class="line">Error response from daemon: conflict: unable to delete d1165f221234 (must be forced) - image is being used by stopped container 57027ba35bdd</span><br></pre></td></tr></table></figure><p>可以通过在执行时增加 <code>-f</code> 来强制删除镜像。</p><h2 id="容器清理"><a href="#容器清理" class="headerlink" title="容器清理"></a>容器清理</h2><p>容器是某个镜像的一个运行实例，可以通过 <code>docker container ls -a</code> 查看所有的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">3d9f62acc483   4cdc5dd7eaad   &quot;&#x2F;docker-entrypoint.…&quot;   11 minutes ago   Exited (0) 11 minutes ago             sleepy_babbage</span><br></pre></td></tr></table></figure><p>要删除一个容器必须要先停止该容器（<code>docker container stop &lt;name_or_id&gt;</code>），然后通过 <code>docker container rm &lt;name_or_id&gt;</code> 删除，同样的，和删除镜像类似，该命令支持批量删除多个容器，多个容器 <code>id</code> 之间使用空格分隔。</p><h2 id="网络清理"><a href="#网络清理" class="headerlink" title="网络清理"></a>网络清理</h2><p><code>Docker</code> 网络用于容器间的通信，它们都是一些配置文件，并不会占用多大空间，可以通过 <code>docker network ls</code> 查看所有的网络：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">b96312481a51   bridge    bridge    local</span><br><span class="line">85a64f881d4d   host      host      local</span><br><span class="line">e6808b80f888   none      null      local</span><br></pre></td></tr></table></figure><p>可以通过 <code>docker network rm &lt;name_or_id&gt;</code> 来删除一个网络。</p><h2 id="数据卷清理"><a href="#数据卷清理" class="headerlink" title="数据卷清理"></a>数据卷清理</h2><p><code>Docker</code> 数据卷用于持久化容器运行时保存的数据，例如通过 <code>Docker</code> 运行 <code>MySQL</code> 时指定数据卷，从而对 <code>MySQL</code> 的数据进行备份，可以通过 <code>docker volume ls</code> 查看所有的数据卷：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     test-volume</span><br></pre></td></tr></table></figure><p>同样的，可以通过 <code>docker volume rm &lt;name&gt;</code> 来删除指定的数据卷，或者使用 <code>docker volume prune</code> 来删除所有未和运行中的容器关联的数据卷，以及通过 <code>docker volume prune -a</code> 删除所有的数据卷。</p><p>最后，<code>docker system prune -a --volumes</code> 是在 <code>docker system prune -a</code> 的基础上删除所有未使用的卷。</p><p>参考：</p><ul><li><a href="https://dockerwebdev.com/tutorials/clean-up-docker/">How to clean your Docker data</a></li><li><a href="https://jinnabalu.medium.com/docker-frequently-used-commands-on-images-b812d76a4b8e">Dangling or Unused Images in Docker</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;日常随着 &lt;code&gt;Docker&lt;/code&gt; 的使用，&lt;code&gt;Docker&lt;/code&gt; 会逐渐占用磁盘空间，通过 &lt;code&gt;docker system df&lt;/code&gt; 可查看 &lt;code&gt;Docker&lt;/code&gt; 所占用的空间：&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://frederick-s.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Permissions 0644 for &#39;xxx.pem&#39; are too open</title>
    <link href="https://frederick-s.github.io/2021/07/10/permissions-0644-for-xx-are-too-open/"/>
    <id>https://frederick-s.github.io/2021/07/10/permissions-0644-for-xx-are-too-open/</id>
    <published>2021-07-09T16:00:00.000Z</published>
    <updated>2021-07-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>SSH</code> 连接到 <code>Azure</code> 的虚拟机时遇到错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ssh -i &#x2F;path&#x2F;to&#x2F;some.pem xxx@x.x.x.x</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">Permissions 0644 for &#39;&#x2F;path&#x2F;to&#x2F;some.pem&#39; are too open.</span><br><span class="line">It is required that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br><span class="line">Load key &quot;&#x2F;path&#x2F;to&#x2F;some.pem&quot;: bad permissions</span><br><span class="line">xxx@x.x.x.x: Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>这是因为创建虚拟机时从 <code>Azure</code> 下载的私钥默认权限太大，需要将其权限改为只读且仅当前用户可见：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 some.pem</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/8193768/trying-to-ssh-into-an-amazon-ec2-instance-permission-error">Trying to SSH into an Amazon Ec2 instance - permission error</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 &lt;code&gt;SSH&lt;/code&gt; 连接到 &lt;code&gt;Azure&lt;/code&gt; 的虚拟机时遇到错误：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="SSH" scheme="https://frederick-s.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>为什么1不是质数</title>
    <link href="https://frederick-s.github.io/2021/07/04/why-is-1-not-a-prime/"/>
    <id>https://frederick-s.github.io/2021/07/04/why-is-1-not-a-prime/</id>
    <published>2021-07-03T16:00:00.000Z</published>
    <updated>2021-07-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果一个数除了1和它本身外，没有其他约数，我们称这个数为质数，但在这个定义下，1却不是质数。要回答这个问题需要先了解质数的作用，质数的主要作用在于构建欧几里得的算数基本定理：</p><blockquote><p>任何一个大于1的自然数都可以唯一分解成有限个质数的乘积。</p></blockquote><p>如果把1列为质数，就会破坏这种唯一性，因为在这种情况下每个自然数都有无限种分解方式，即在原有分解的基础上再乘以任意个数的1，所以1不作为质数。</p><p>参考：</p><ul><li><a href="https://math.stackexchange.com/questions/120/why-is-1-not-a-prime-number">Why is 1 not a prime number?</a></li><li><a href="https://primes.utm.edu/notes/faq/one.html">FAQ: Why is the number one not prime?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果一个数除了1和它本身外，没有其他约数，我们称这个数为质数，但在这个定义下，1却不是质数。要回答这个问题需要先了解质数的作用，质数的主要作用在于构建欧几里得的算数基本定理：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任何一个大于1的自然数都可以唯一分解成有限个质数的乘积。&lt;</summary>
      
    
    
    
    
    <category term="Math" scheme="https://frederick-s.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>如何在 JDK 11 中建立 jstatd 连接</title>
    <link href="https://frederick-s.github.io/2020/11/21/how-to-use-jstatd-with-jdk11/"/>
    <id>https://frederick-s.github.io/2020/11/21/how-to-use-jstatd-with-jdk11/</id>
    <published>2020-11-20T16:00:00.000Z</published>
    <updated>2020-11-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>VisualVM</code> 的 <code>Virsual GC</code> 插件需要先和服务器建立 <code>jstatd</code> 连接，在 <code>JDK 9</code> 之前需要首先创建一个 <code>policy</code> 文件并声明权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant codebase &quot;file:$&#123;java.home&#125;&#x2F;lib&#x2F;tools.jar&quot; &#123;</span><br><span class="line">   permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然而，从 <code>JDK 9</code> 开始，<code>tools.jar</code> 已被移除，需要将 <code>policy</code> 文件的内容修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grant codebase &quot;jrt:&#x2F;jdk.jstatd&quot; &#123;    </span><br><span class="line">   permission java.security.AllPermission;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">grant codebase &quot;jrt:&#x2F;jdk.internal.jvmstat&quot; &#123;    </span><br><span class="line">   permission java.security.AllPermission;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/51032095/starting-jstatd-in-java-9">Starting jstatd in Java 9+</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 &lt;code&gt;VisualVM&lt;/code&gt; 的 &lt;code&gt;Virsual GC&lt;/code&gt; 插件需要先和服务器建立 &lt;code&gt;jstatd&lt;/code&gt; 连接，在 &lt;code&gt;JDK 9&lt;/code&gt; 之前需要首先创建一个 &lt;code&gt;policy&lt;/code&gt;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://frederick-s.github.io/tags/Java/"/>
    
    <category term="VisualVM" scheme="https://frederick-s.github.io/tags/VisualVM/"/>
    
  </entry>
  
  <entry>
    <title>如何修改 AppVeyor 的 JDK 版本</title>
    <link href="https://frederick-s.github.io/2020/10/24/how-to-change-jdk-version-in-appveyor/"/>
    <id>https://frederick-s.github.io/2020/10/24/how-to-change-jdk-version-in-appveyor/</id>
    <published>2020-10-23T16:00:00.000Z</published>
    <updated>2020-10-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>AppVeyor</code> 的<code>Visual Studio 2019</code> 镜像构建 <code>Java</code> 项目时默认使用的是 <code>JDK 1.8</code>（<a href="https://www.appveyor.com/docs/windows-images-software/#java">这里</a>说明了 <code>AppVeyor</code> 各个镜像下默认使用的 <code>JDK</code> 版本，虽然表格里写着 <code>Visual Studio 2019</code> 镜像下的默认 <code>JDK</code> 是1.7，不过实际是1.8），如果想更换 <code>JDK</code> 版本，比如更换为 <code>JDK 11</code>，可以重新设置 <code>JAVA_HOME</code> 和 <code>PATH</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before_test:</span><br><span class="line">  - SET JAVA_HOME&#x3D;C:\Program Files\Java\jdk11</span><br><span class="line">  - SET PATH&#x3D;%JAVA_HOME%\bin;%PATH%</span><br></pre></td></tr></table></figure><p>完整的代码可参考 <a href="https://github.com/Frederick-S/appveyor-jdk11-demo">GitHub</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 &lt;code&gt;AppVeyor&lt;/code&gt; 的&lt;code&gt;Visual Studio 2019&lt;/code&gt; 镜像构建 &lt;code&gt;Java&lt;/code&gt; 项目时默认使用的是 &lt;code&gt;JDK 1.8&lt;/code&gt;（&lt;a href=&quot;https://www.appv</summary>
      
    
    
    
    
    <category term="Java" scheme="https://frederick-s.github.io/tags/Java/"/>
    
    <category term="AppVeyor" scheme="https://frederick-s.github.io/tags/AppVeyor/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 JUnit 测试异常信息</title>
    <link href="https://frederick-s.github.io/2020/09/26/how-to-test-exception-message-with-junit/"/>
    <id>https://frederick-s.github.io/2020/09/26/how-to-test-exception-message-with-junit/</id>
    <published>2020-09-25T16:00:00.000Z</published>
    <updated>2020-09-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>假设有如下的 <code>SumService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;a must be positive&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (b &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;b must be positive&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>a</code> 或者 <code>b</code> 非正数时会抛出 <code>IllegalArgumentException</code> 异常，由于两者抛出的是同一个异常，所以无法直接使用 <code>expected = IllegalArgumentException.class</code> 进行区分测试，故需要测试具体的异常信息。</p><h2 id="使用-try-catch"><a href="#使用-try-catch" class="headerlink" title="使用 try/catch"></a>使用 try/catch</h2><p>用一个 <code>try/catch</code> 包裹测试的方法，判断抛出的异常信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldAssertExceptionMessageByAssertThrows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IllegalArgumentException illegalArgumentException = </span><br><span class="line">            Assert.assertThrows(IllegalArgumentException.class, () -&gt; SumService.sum(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;a must be positive&quot;</span>, illegalArgumentException.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-assertThrows"><a href="#使用-assertThrows" class="headerlink" title="使用 assertThrows"></a>使用 assertThrows</h2><p>借助 <code>Assert.assertThrows</code> 执行测试方法返回一个异常，然后判断返回的异常信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldAssertExceptionMessageByAssertThrows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IllegalArgumentException illegalArgumentException = Assert.assertThrows(IllegalArgumentException.class, () -&gt; SumService.sum(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;a must be positive&quot;</span>, illegalArgumentException.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-ExpectedException"><a href="#使用-ExpectedException" class="headerlink" title="使用 ExpectedException"></a>使用 ExpectedException</h2><p>借助 <code>ExpectedException</code> 预先设定预期抛出的异常和异常信息，然后执行测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> ExpectedException expectedException = ExpectedException.none();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldAssertExceptionMessageByRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    expectedException.expect(IllegalArgumentException.class);</span><br><span class="line">    expectedException.expectMessage(<span class="string">&quot;a must be positive&quot;</span>);</span><br><span class="line"></span><br><span class="line">    SumService.sum(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码可参考 <a href="https://github.com/Frederick-S/test-exception-message-with-junit-demo">GitHub</a>。</p><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/2469911/how-do-i-assert-my-exception-message-with-junit-test-annotation">How do I assert my exception message with JUnit Test annotation?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;假设有如下的 &lt;code&gt;SumService&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa</summary>
      
    
    
    
    
    <category term="Java" scheme="https://frederick-s.github.io/tags/Java/"/>
    
    <category term="JUnit" scheme="https://frederick-s.github.io/tags/JUnit/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 JUnit 测试异步代码</title>
    <link href="https://frederick-s.github.io/2020/09/13/how-to-test-async-code-with-junit/"/>
    <id>https://frederick-s.github.io/2020/09/13/how-to-test-async-code-with-junit/</id>
    <published>2020-09-12T16:00:00.000Z</published>
    <updated>2020-09-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>对于以下的异步代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们为其编写一个测试用例，并在 <code>CompletableFuture#whenComplete</code> 中判断返回值是否与预期相符，然而即使返回值与预期不符，该测试也不会抛出异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionWontBeCaptured</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DemoService demoService = <span class="keyword">new</span> DemoService();</span><br><span class="line"></span><br><span class="line">    demoService.hello()</span><br><span class="line">            .whenComplete((result, e) -&gt; &#123;</span><br><span class="line">                Assert.assertEquals(<span class="string">&quot;wrongValue&quot;</span>, result);</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="CompletableFuture-get"><a href="#CompletableFuture-get" class="headerlink" title="CompletableFuture#get()"></a>CompletableFuture#get()</h3><p>我们可以借助 <code>CompletableFuture#get()</code> 阻塞主线程等待结果的特点，将异步代码转成同步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blockMainThreadByGet</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    DemoService demoService = <span class="keyword">new</span> DemoService();</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;hello&quot;</span>, demoService.hello().get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>上述方案依赖了一个具体的异步类方法，如果实际的异步类不提供相应的同步方法，上述方案则不适合。针对这种情况，可以借助 <code>CountDownLatch</code>，初始化一个计数为1的 <code>CountDownLatch</code> 的实例，在测试方法中调用 <code>CountDownLatch#await()</code> 方法进行等待，当异步方法执行成功后在其回调中调用 <code>CountDownLatch#countDown()</code> 使计数器减1变为0，从而继续执行后续的测试判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitOnCountDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    DemoService demoService = <span class="keyword">new</span> DemoService();</span><br><span class="line">    AtomicReference&lt;String&gt; actualValue = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    demoService.hello()</span><br><span class="line">            .whenComplete((result, e) -&gt; &#123;</span><br><span class="line">                actualValue.set(result);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    countDownLatch.await();</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;hello&quot;</span>, actualValue.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Awaitility"><a href="#Awaitility" class="headerlink" title="Awaitility"></a>Awaitility</h3><p><a href="https://github.com/awaitility/awaitility">Awaitility</a> 让测试异步代码变得简单明了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">poweredByAwaitility</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DemoService demoService = <span class="keyword">new</span> DemoService();</span><br><span class="line">    AtomicReference&lt;String&gt; actualValue = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    demoService.hello()</span><br><span class="line">            .whenComplete((result, e) -&gt; &#123;</span><br><span class="line">                actualValue.set(result);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    await().atMost(<span class="number">5</span>, SECONDS).untilAsserted(() -&gt; &#123;</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;hello&quot;</span>, actualValue.get());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码可参考 <a href="https://github.com/Frederick-S/test-async-code-with-junit-demo">GitHub</a>。</p><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/631598/how-to-use-junit-to-test-asynchronous-processes">How to use JUnit to test asynchronous processes</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;对于以下的异步代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    
    <category term="Java" scheme="https://frederick-s.github.io/tags/Java/"/>
    
    <category term="JUnit" scheme="https://frederick-s.github.io/tags/JUnit/"/>
    
  </entry>
  
  <entry>
    <title>如何减小 Docker 镜像的大小</title>
    <link href="https://frederick-s.github.io/2020/08/04/how-to-reduce-docker-image-size/"/>
    <id>https://frederick-s.github.io/2020/08/04/how-to-reduce-docker-image-size/</id>
    <published>2020-08-03T16:00:00.000Z</published>
    <updated>2020-08-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>首先来看一个例子，构建一个 <code>C</code> 语言版的 <code>hello world</code> 镜像：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* hello.c */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 <code>Dockerfile</code> 为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM gcc</span><br><span class="line">COPY hello.c .</span><br><span class="line">RUN gcc -o hello hello.c</span><br><span class="line">CMD [&quot;.&#x2F;hello&quot;]</span><br></pre></td></tr></table></figure><p>然后执行 <code>docker build -t hello-world .</code> 构建一个名为 <code>hello-world</code> 的镜像，然而以这种方式构建的镜像的大小竟然有1.19 GB：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              b11e170bd1d2        6 minutes ago       1.19GB</span><br></pre></td></tr></table></figure><p>因为这种构建方式生成的镜像会同时包含 <code>gcc</code> 镜像的内容，查看 <code>gcc</code> 镜像大小发现达到了1.19 GB：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">gcc                 latest              21f378ba43ec        11 days ago         1.19GB</span><br></pre></td></tr></table></figure><p>如果我们把基础镜像换成 <code>Ubuntu</code> 并安装 <code>gcc</code> 编译 <code>hello.c</code> 重新构建镜像，最后的镜像大小为213 MB：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">COPY hello.c .</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install gcc -y</span><br><span class="line">RUN gcc -o hello hello.c</span><br><span class="line">CMD [&quot;.&#x2F;hello&quot;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">hello-world         latest              42f17d1d12a5        About a minute ago   213MB</span><br></pre></td></tr></table></figure><p>虽然新镜像相比1.19 GB有大幅减少，但相比于 <code>hello-world</code> 程序本身的大小（17k）来说，213 MB依然是个庞大的数字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls hello -hl</span><br><span class="line">-rwxr-xr-x 1 root root 17K Aug  4 13:54 hello</span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="Multi-stage"><a href="#Multi-stage" class="headerlink" title="Multi-stage"></a>Multi-stage</h3><p>对于 <code>hello-world</code> 这个镜像来说，我们真正需要的只是最终的可执行程序，而并不关心中间的编译过程，如果能将编译阶段作为一个临时阶段而并不包含在最终的镜像中，则可有效减少最终的镜像大小。针对此，<code>Docker</code> 在 17.05 版本开始提供了名为 <code>multi-stage</code> 构建的功能。我们将原来的 <code>Dockerfile</code> 稍作修改，将原来的编译阶段抽取为一个 <code>stage</code>，然后将编译好的可执行文件复制到最终的 <code>stage</code> 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM gcc AS mybuildstage</span><br><span class="line">COPY hello.c .</span><br><span class="line">RUN gcc -o hello hello.c</span><br><span class="line">FROM ubuntu</span><br><span class="line">COPY --from&#x3D;mybuildstage hello .</span><br><span class="line">CMD [&quot;.&#x2F;hello&quot;]</span><br></pre></td></tr></table></figure><p>最终的镜像大小只有73.9 MB：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              7dd2b51c53b2        7 minutes ago       73.9MB</span><br></pre></td></tr></table></figure><h3 id="FROM-scratch"><a href="#FROM-scratch" class="headerlink" title="FROM scratch"></a><code>FROM scratch</code></h3><p>在上一步中，我们使用 <code>Ubuntu</code> 作为基础镜像来运行 <code>hello-world</code>，相比于一个可执行程序，<code>Ubuntu</code> 依然过于庞大，有没有比 <code>Ubuntu</code> 更轻量的镜像呢？有，那就是 <code>scratch</code>，这表示一个空的镜像，继续将 <code>Dockerfile</code> 稍作修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM gcc AS mybuildstage</span><br><span class="line">COPY hello.c .</span><br><span class="line">RUN gcc -o hello hello.c</span><br><span class="line">FROM scratch</span><br><span class="line">COPY --from&#x3D;mybuildstage hello .</span><br><span class="line">CMD [&quot;.&#x2F;hello&quot;]</span><br></pre></td></tr></table></figure><p>最终的镜像大小只有16.4 KB：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              676253b0e9c4        31 minutes ago      16.4kB</span><br></pre></td></tr></table></figure><p>不过在运行该镜像时却提示错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">standard_init_linux.go:211: exec user process caused &quot;no such file or directory&quot;</span><br></pre></td></tr></table></figure><p>这是因为这种方式构建出的镜像缺少 <code>hello-world</code> 运行时依赖的库。我们可以在编译 <code>hello-world</code> 时通过指定 <code>-static</code> 参数将依赖的库包含到最后的可执行文件中来解决这个问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM gcc AS mybuildstage</span><br><span class="line">COPY hello.c .</span><br><span class="line">RUN gcc -o hello hello.c -static</span><br><span class="line">FROM scratch</span><br><span class="line">COPY --from&#x3D;mybuildstage hello .</span><br><span class="line">CMD [&quot;.&#x2F;hello&quot;]</span><br></pre></td></tr></table></figure><p>不过包含了依赖的库后最终镜像的大小也上涨为945 KB：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              e6a1fccc2de7        9 seconds ago       945kB</span><br></pre></td></tr></table></figure><p>另外，如果不想将依赖的库包含到最终的镜像中，可以使用 <code>busybox:glibc</code> 这个基础镜像，该镜像包含了 <code>C</code> 语言的标准库，有了这个镜像在编译 <code>hello-world</code> 时则无需指定 <code>-static</code> 参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM gcc AS mybuildstage</span><br><span class="line">COPY hello.c .</span><br><span class="line">RUN gcc -o hello hello.c</span><br><span class="line">FROM busybox:glibc</span><br><span class="line">COPY --from&#x3D;mybuildstage hello .</span><br><span class="line">CMD [&quot;.&#x2F;hello&quot;]</span><br></pre></td></tr></table></figure><p>不过由于该镜像本身有一定大小，最终镜像的大小达到了5.22 MB：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              e2f2c0544800        7 seconds ago       5.22MB</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 <code>multi-stage</code> 构建可以有效的减少 <code>Docker</code> 镜像的大小，而基础镜像的选择则要具体情况分析，在满足需求的情况下选择合理的基础镜像。</p><p>参考：</p><ul><li><a href="https://www.ardanlabs.com/blog/2020/02/docker-images-part1-reducing-image-size.html">Docker Images : Part I - Reducing Image Size</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;首先来看一个例子，构建一个 &lt;code&gt;C&lt;/code&gt; 语言版的 &lt;code&gt;hello world&lt;/code&gt; 镜像：&lt;/p&gt;
&lt;fi</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://frederick-s.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>如何解决 ModuleNotFoundError: No module named &#39;distutils.util&#39; 错误</title>
    <link href="https://frederick-s.github.io/2020/08/02/how-to-fix-no-module-named-distutils.util/"/>
    <id>https://frederick-s.github.io/2020/08/02/how-to-fix-no-module-named-distutils.util/</id>
    <published>2020-08-01T16:00:00.000Z</published>
    <updated>2020-08-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Ubuntu</code> 下安装 <code>pip</code> 时遇到 <code>ModuleNotFoundError: No module named &#39;distutils.util&#39;</code> 错误，执行以下命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-distutils</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://github.com/pypa/get-pip/issues/43">Issue with “python3 get-pip.py –user” with python 3.6.7</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Ubuntu&lt;/code&gt; 下安装 &lt;code&gt;pip&lt;/code&gt; 时遇到 &lt;code&gt;ModuleNotFoundError: No module named &amp;#39;distutils.util&amp;#39;&lt;/code&gt; 错误，执行以下命令即可：&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Python" scheme="https://frederick-s.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>如何解决 add-apt-repository: not found 错误</title>
    <link href="https://frederick-s.github.io/2020/08/01/how-to-fix-add-apt-repository-not-found-error/"/>
    <id>https://frederick-s.github.io/2020/08/01/how-to-fix-add-apt-repository-not-found-error/</id>
    <published>2020-07-31T16:00:00.000Z</published>
    <updated>2020-07-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Ubuntu</code> 下执行 <code>add-apt-repository</code> 添加第三方仓库时遇到 <code>add-apt-repository: not found</code> 错误，执行以下命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install software-properties-common</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://phoenixnap.com/kb/add-apt-repository-command-not-found-ubuntu">How To Fix ‘Add-Apt-Repository Command Not Found’ On Ubuntu &amp; Debian</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Ubuntu&lt;/code&gt; 下执行 &lt;code&gt;add-apt-repository&lt;/code&gt; 添加第三方仓库时遇到 &lt;code&gt;add-apt-repository: not found&lt;/code&gt; 错误，执行以下命令即可：&lt;/p&gt;
&lt;figure cl</summary>
      
    
    
    
    
    <category term="Ubuntu" scheme="https://frederick-s.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Finder 中显示隐藏文件</title>
    <link href="https://frederick-s.github.io/2020/07/26/how-to-show-hidden-files-in-mac-finder/"/>
    <id>https://frederick-s.github.io/2020/07/26/how-to-show-hidden-files-in-mac-finder/</id>
    <published>2020-07-25T16:00:00.000Z</published>
    <updated>2020-07-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Finder</code> 默认并不显示隐藏文件，可以通过如下两种方式开启：</p><ol><li>在终端中输入 <code>defaults write com.apple.finder AppleShowAllFiles YES</code>，然后重启 <code>Finder</code></li><li>在 <code>Finder</code> 中使用快捷键 <code>Shift + Command + &quot;.&quot;</code></li></ol><p>参考：</p><ul><li><a href="https://apple.stackexchange.com/questions/250638/how-to-reveal-dot-files-in-finder">How to reveal dot files in finder?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Finder&lt;/code&gt; 默认并不显示隐藏文件，可以通过如下两种方式开启：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在终端中输入 &lt;code&gt;defaults write com.apple.finder AppleShowAllFiles YES&lt;/code&gt;，然后重启 </summary>
      
    
    
    
    
    <category term="Mac" scheme="https://frederick-s.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>An enum switch case label must be the unqualified name of an enumeration constant</title>
    <link href="https://frederick-s.github.io/2020/07/18/an-enum-switch-case-label-must-be-the-unqualified-name-of-an-enumeration-constant/"/>
    <id>https://frederick-s.github.io/2020/07/18/an-enum-switch-case-label-must-be-the-unqualified-name-of-an-enumeration-constant/</id>
    <published>2020-07-17T16:00:00.000Z</published>
    <updated>2020-07-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>An enum switch case label must be the unqualified name of an enumeration constant</code> 是 <code>Java</code> 中常见的编译错误，基本上 <code>Google</code> 搜索出来的错误场景都是因为在 <code>switch</code> 中使用枚举时搭配了类名造成，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Season season = Season.SPRING;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (season) &#123;</span><br><span class="line">    <span class="comment">// 编译错误，直接使用 SPRING 即可</span></span><br><span class="line">    <span class="keyword">case</span> Season.SPRING:</span><br><span class="line">        System.out.println(<span class="string">&quot;spring&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Season.SUMMER:</span><br><span class="line">        System.out.println(<span class="string">&quot;summer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，如果某个枚举值不存在，也会提示一样的错误，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Season season = Season.SPRING;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (season) &#123;</span><br><span class="line">    <span class="keyword">case</span> SOME_VALUE_DOES_NOT_EXIST:</span><br><span class="line">        System.out.println(<span class="string">&quot;spring&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下的错误提示容易让人摸不着头脑，<code>IntelliJ IDEA</code> 的错误提示则较为友好：<code>Cannot resolve symbol &#39;SOME_VALUE_DOES_NOT_EXIST&#39;</code>。对于这种错误场景，实际工作中遇到一个例子：</p><ol><li>在开发阶段，<code>A</code> 拉了个 <code>some.package</code> 的分支，更新版本号为 <code>a.b-SNAPSHOT</code> 并发布，将其引入 <code>some.app</code>，推送代码后触发了 <code>some.app</code> 的 <code>Jenkins</code> 构建任务</li><li><code>B</code> 也拉了个 <code>some.package</code> 的分支，同样更新版本号为 <code>a.b-SNAPSHOT</code> 并发布，并增加了一个新的枚举值到 <code>SomeEnum</code>，同样将其引入 <code>some.app</code>，推送代码后触发了 <code>some.app</code> 的 <code>Jenkins</code> 构建任务，此时任务构建失败，提示编译错误：<code>An enum switch case label must be the unqualified name of an enumeration constant</code></li></ol><p>出现这样的原因是 <code>Jenkins</code> 执行构建任务时执行的编译命令是 <code>mvn compile</code>，在 <code>A</code> 提交任务时，构建服务器下载了 <code>some.package</code> 的 <code>a.b-SNAPSHOT</code> 版本，由于是 <code>SNAPSHOT</code> 版本，在 <code>B</code> 提交任务时，构建服务器没有重新下载 <code>some.package</code>，导致服务器中的 <code>some.package</code> 没有 <code>B</code> 新增的修改，从而出现编译错误，解决方法是在编译时增加 <code>-U</code> 参数来强制更新 <code>SNAPSHOT</code>。</p><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/54708788/error-an-enum-switch-case-label-must-be-the-unqualified-name-of-an-enumeration/54708876">error: an enum switch case label must be the unqualified name of an enumeration constant</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;An enum switch case label must be the unqualified name of an enumeration constant&lt;/code&gt; 是 &lt;code&gt;Java&lt;/code&gt; 中常见的编译错误，基本上 &lt;code&gt;Goo</summary>
      
    
    
    
    
    <category term="Java" scheme="https://frederick-s.github.io/tags/Java/"/>
    
    <category term="Maven" scheme="https://frederick-s.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 rsync 同步数据到其他服务器</title>
    <link href="https://frederick-s.github.io/2020/06/26/how-to-sync-data-to-remote-vps-with-rsync/"/>
    <id>https://frederick-s.github.io/2020/06/26/how-to-sync-data-to-remote-vps-with-rsync/</id>
    <published>2020-06-25T16:00:00.000Z</published>
    <updated>2020-06-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>假设我们希望将 <code>server1</code> 下的 <code>/data1</code> 目录中的数据同步到 <code>server2</code> 下的 <code>/data2</code> 目录，首先需要建立 <code>server1</code> 和 <code>server2</code> 的免密登陆，在 <code>server1</code> 上执行 <code>ssh-keygen</code>，默认情况会在 <code>~/.ssh</code> 目录下生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，然后将 <code>~/.ssh/id_rsa.pub</code> 文件的内容复制到 <code>server2</code> 的 <code>~/.ssh/authorized_keys</code> 文件中即可。</p><p>接着，就可以使用 <code>rsync</code> 进行数据同步，具体命令为 <code>rsync -az --delete /data1/ server2-user@server2-ip:/data2</code>，其中 <code>-a</code> 表示递归同步 <code>/data1</code> 下的子文件夹及保留文件的权限、组、软连接等信息，如果不需要这些额外的文件信息而只想要递归同步可以使用 <code>-r</code> 来代替 <code>-a</code>；<code>-z</code> 表示开启文件压缩来减少网络传输；<code>--delete</code> 表示在 <code>/data1</code> 中删除的文件在 <code>/data2</code> 中也会同步删除。最后需要注意命令中 <code>/data1/</code> 末尾的 <code>/</code>，加了 <code>/</code> 表示将 <code>/data1</code> 下的所有文件同步到 <code>/data2</code>，没有 <code>/</code> 则表示将 <code>/data1</code> 这个文件夹同步到 <code>/data2</code> 下，假设 <code>/data1</code> 下有 <code>a</code>、<code>b</code>、<code>c</code> 三个文件，两种写法最后的同步区别为：</p><ul><li><code>/data1/</code>：<code>/data2/a,b,c</code></li><li><code>/data1</code>：<code>/data2/data1/a,b,c</code></li></ul><p>最后，我们需要将 <code>rsync</code> 加入到定时任务中进行自动备份。执行 <code>crontab -e</code>，将定时任务添加到文件中，如每小时执行一次：<code>0 * * * * rsync -az --delete /data1/ server2-user@server2-ip:/data2</code>。</p><p>参考：</p><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories-on-a-vps">How To Use Rsync to Sync Local and Remote Directories on a VPS</a></li><li><a href="https://www.howtogeek.com/135533/how-to-use-rsync-to-backup-your-data-on-linux/">How to Use rsync to Backup Your Data on Linux</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;假设我们希望将 &lt;code&gt;server1&lt;/code&gt; 下的 &lt;code&gt;/data1&lt;/code&gt; 目录中的数据同步到 &lt;code&gt;server2&lt;/code&gt; 下的 &lt;code&gt;/data2&lt;/code&gt; 目录，首先需要建立 &lt;code&gt;server1&lt;/code&gt; </summary>
      
    
    
    
    
    <category term="rsync" scheme="https://frederick-s.github.io/tags/rsync/"/>
    
  </entry>
  
  <entry>
    <title>野生 NHK NEWS EASY 客户端</title>
    <link href="https://frederick-s.github.io/2020/05/06/unofficial-client-for-nhk-news-web-easy/"/>
    <id>https://frederick-s.github.io/2020/05/06/unofficial-client-for-nhk-news-web-easy/</id>
    <published>2020-05-05T16:00:00.000Z</published>
    <updated>2020-05-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>野生 NHK NEWS EASY 客户端，无广告，功能还比较单一，只上了 <code>Google Play</code>，<code>iOS</code> 没有通过：</p><ul><li><a href="https://play.google.com/store/apps/details?id=nhk.nhk_easy">Google Play</a></li><li><a href="https://github.com/Frederick-S/nhk-easy-mobile">GitHub</a></li></ul><p><img src="/images/nhk-1.png" alt="alt"></p><p><img src="/images/nhk-2.png" alt="alt"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;野生 NHK NEWS EASY 客户端，无广告，功能还比较单一，只上了 &lt;code&gt;Google Play&lt;/code&gt;，&lt;code&gt;iOS&lt;/code&gt; 没有通过：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://play.google.com/store/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Flutter error - Building for iOS Simulator, but the linked and embedded framework &#39;App.framework&#39; was built for iOS</title>
    <link href="https://frederick-s.github.io/2020/05/04/flutter-error-linked-and-embedded-framework-app.framework-was-built-for-ios/"/>
    <id>https://frederick-s.github.io/2020/05/04/flutter-error-linked-and-embedded-framework-app.framework-was-built-for-ios/</id>
    <published>2020-05-03T16:00:00.000Z</published>
    <updated>2020-05-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Flutter</code> 项目打包 <code>iOS</code> 应用的时候遇到个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Building for iOS Simulator, but the linked and embedded framework &#39;App.framework&#39; was built for iOS. (in target &#39;Runner&#39; from project &#39;Runner&#39;)</span><br></pre></td></tr></table></figure><p>这个问题在 <code>Flutter</code> 的 <code>GitHub</code> 仓库中也有人提到，解决方法也比较简单，删除 <code>App.framework</code> 文件夹即可，即 <code>rm -rf ios/Flutter/App.framework</code>。</p><p>参考：</p><ul><li><a href="https://github.com/flutter/flutter/issues/50568">[App.framework] Linked and embedded framework ‘App.framework’ was built for iOS/iOS Simulator</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Flutter&lt;/code&gt; 项目打包 &lt;code&gt;iOS&lt;/code&gt; 应用的时候遇到个错误：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://frederick-s.github.io/tags/Flutter/"/>
    
  </entry>
  
</feed>
