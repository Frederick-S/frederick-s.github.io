<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Übung macht den Meister</title>
  
  
  <link href="https://frederick-s.github.io/atom.xml" rel="self"/>
  
  <link href="https://frederick-s.github.io/"/>
  <updated>2024-12-28T16:00:00.000Z</updated>
  <id>https://frederick-s.github.io/</id>
  
  <author>
    <name>Xiaodan Mao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么 Python 的负整数除法结果和 C 不同</title>
    <link href="https://frederick-s.github.io/2024/12/29/why-python&#39;s-integer-division-floors/"/>
    <id>https://frederick-s.github.io/2024/12/29/why-python&#39;s-integer-division-floors/</id>
    <published>2024-12-28T16:00:00.000Z</published>
    <updated>2024-12-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于整数-5除以2，在 <code>Python</code> 中的结果是-3，但是在 <code>C</code> 中是-2。如果扩展到其他几种常见的语言，可以看到和 <code>C</code> 一致的比较多：</p><table><thead><tr><th>语言</th><th>结果</th></tr></thead><tbody><tr><td>C</td><td>-2</td></tr><tr><td>C++</td><td>-2</td></tr><tr><td>Java</td><td>-2</td></tr><tr><td>C#</td><td>-2</td></tr><tr><td>Rust</td><td>-2</td></tr><tr><td>Go</td><td>-2</td></tr><tr><td>Python</td><td>-3</td></tr><tr><td>Ruby</td><td>-3</td></tr></tbody></table><p>区别在于对于结果-2.5是选择向0取整还是向负无穷取整，<code>Python</code> 和 <code>Ruby</code> 选择了后者。</p><p>对于整数 <code>a</code> 和 <code>n</code>，记 <code>a</code> 除以 <code>n</code> 的结果是 <code>q</code>，余数是 <code>r</code>，则有：<code>a = n * q + r</code>，其中 <code>|r| &lt; |n|</code>。在数论中，<code>r</code> 始终是正数，但是不同的编程语言各自有不同的实现。</p><blockquote><p>In number theory, the positive remainder is always chosen, but in computing, programming languages choose depending on the language and the signs of a or n.</p></blockquote><h2 id="编程语言实现"><a class="markdownIt-Anchor" href="#编程语言实现"></a> 编程语言实现</h2><h3 id="truncated-division"><a class="markdownIt-Anchor" href="#truncated-division"></a> Truncated division</h3><p>很多语言采用这种实现，约定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>n</mi><mi>c</mi><mo stretchy="false">(</mo><mfrac><mi>a</mi><mi>n</mi></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q = trunc(\frac{a}{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>，其中 <code>trunc</code> 表示向0取整，代表语言如 <code>Java</code>。</p><h3 id="floored-division"><a class="markdownIt-Anchor" href="#floored-division"></a> Floored division</h3><p><code>Donald Knuth</code> 提倡这种实现，约定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>=</mo><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>n</mi></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">q = \lfloor \frac{a}{n} \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span>，即向下取整，代表语言如 <code>Python</code>。</p><h3 id="euclidean-division"><a class="markdownIt-Anchor" href="#euclidean-division"></a> Euclidean division</h3><p><code>Raymond T. Boute</code> 则提倡这种实现，约定：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>q</mi><mo>=</mo><mi>s</mi><mi>g</mi><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mrow><mi mathvariant="normal">∣</mi><mi>n</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><mo stretchy="false">⌋</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>n</mi></mfrac><mo stretchy="false">⌋</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>if n &gt; 0</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">⌈</mo><mfrac><mi>a</mi><mi>n</mi></mfrac><mo stretchy="false">⌉</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>if n &lt; 0</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">q = sgn(n)\lfloor \frac{a}{|n|} \rfloor =         \begin{cases}      \lfloor \frac{a}{n} \rfloor &amp; \text{if n &gt; 0}\\      \lceil \frac{a}{n} \rceil &amp; \text{if n &lt; 0}    \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0435600000000003em;vertical-align:-0.936em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathnormal">n</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if n &gt; 0</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if n &lt; 0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>即根据 <code>n</code> 的正负号来判断是向下取整还是向上取整，代表语言如 <code>ABAP</code>。</p><h3 id="rounded-division"><a class="markdownIt-Anchor" href="#rounded-division"></a> Rounded division</h3><p>这是 <code>Common Lisp</code> 和 <code>IEEE 754</code> 采用的实现，约定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>=</mo><mi>r</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mo stretchy="false">(</mo><mfrac><mi>a</mi><mi>n</mi></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q = round(\frac{a}{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>，其中 <code>round</code> 使用 <code>rounding half to even</code>，即在常规的取整之外，对于1.5，2.5，x.5这样的数字取整到最近的偶数，例如6.5取整到6，7.5取整到8。</p><h3 id="ceiling-division"><a class="markdownIt-Anchor" href="#ceiling-division"></a> Ceiling division</h3><p>这是 <code>Common Lisp</code> 提供的另一种实现，约定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>=</mo><mo stretchy="false">⌈</mo><mfrac><mi>a</mi><mi>n</mi></mfrac><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">q = \lceil \frac{a}{n} \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span></span></span></span>，即向上取整。</p><h2 id="python-实现"><a class="markdownIt-Anchor" href="#python-实现"></a> Python 实现</h2><p>回到 <code>Python</code>，很难说上述哪种实现一定最优，<code>Python</code> 的作者提到采用 <code>floored division</code> 是因为对于某些应用来说，如果取模运算返回负数没有意义。例如，给定一个 <code>POSIX timestamp</code>，如何返回该天的时间部分，即时分秒？因为一天有86400秒，假设时间戳是 <code>t</code>，那么 <code>t % 86400</code> 就表示该天过了多少秒，就可以进一步转化为时分秒。而对于在 <code>1970-01-01T00:00:00Z</code> 之前的日期，<code>t</code> 则是负数，采用 <code>floored division</code> 的情况下 <code>t % 86400</code> 依然返回正数，并且结果也是正确的，而 <code>truncated division</code> 则返回负数，需要应用程序进一步处理。</p><p>不过，一种编程语言中不一定只提供一种实现，其他实现可以借助函数库。例如，<code>Python</code> 中 <code>-5 % 2</code> 结果是1，实现方式为 <code>floored division</code>，但是 <code>math.fmod(-5, 2)</code> 结果是-1，实现方式为 <code>truncated division</code>。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html">Why Python’s Integer Division Floors</a></li><li><a href="https://en.wikipedia.org/wiki/Modulo">Modulo</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于整数-5除以2，在 &lt;code&gt;Python&lt;/code&gt; 中的结果是-3，但是在 &lt;code&gt;C&lt;/code&gt; 中是-2。如果扩展到其他几种常见的语言，可以看到和 &lt;code&gt;C&lt;/code&gt; 一致的比较多：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;</summary>
      
    
    
    
    
    <category term="Python" scheme="https://frederick-s.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Snowflake 配置 S3 Storage Integration</title>
    <link href="https://frederick-s.github.io/2024/03/31/snowflake-storage-integration-with-s3/"/>
    <id>https://frederick-s.github.io/2024/03/31/snowflake-storage-integration-with-s3/</id>
    <published>2024-03-30T16:00:00.000Z</published>
    <updated>2024-03-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p><code>Snowflake</code> 的 <code>Data Loading</code> 和 <code>Data Unloading</code> 可以通过 <code>S3</code> 导入和导出数据。用户可以使用 <code>AWS_KEY_ID</code> 和 <code>AWS_SECRET_KEY</code> 来授权 <code>Snowflake</code> 访问 <code>S3</code>，不过出于安全和权限控制的考虑，一般不会这么做。</p><p><code>Snowflake</code> 建议通过 <code>Storage Integration</code> 来管理权限。</p><h2 id="获取-vpc-id"><a class="markdownIt-Anchor" href="#获取-vpc-id"></a> 获取 VPC ID</h2><p>在配置 <code>Storage Integration</code> 前，需要设置 <code>S3</code> 策略。首先获取 <code>Snowflake</code> 的 <code>VPC ID</code>，后续的 <code>S3</code> 策略配置中将只允许该 <code>VPC</code> 访问。</p><blockquote><p>允许特定 VPC 访问的功能要求 Snowflake 实例和对应的 S3 Bucket 运行在相同的 AWS 区域内。</p></blockquote><p>切换到 <code>ACCOUNTADMIN</code> 角色在 <code>Snowflake</code> 中执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE ROLE ACCOUNTADMIN;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSTEM</span>$GET_SNOWFLAKE_PLATFORM_INFO();</span><br></pre></td></tr></table></figure><p>记录下返回的 <code>VPC ID</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;snowflake-vpc-id&quot;:[&quot;vpc-abc&quot;]&#125;</span><br></pre></td></tr></table></figure><h2 id="创建-iam-策略"><a class="markdownIt-Anchor" href="#创建-iam-策略"></a> 创建 IAM 策略</h2><p>然后，需要创建一个 <code>S3</code> 策略来定义 <code>Snowflake</code> 访问 <code>S3 Bucket</code> 的权限。</p><p>从 <code>AWS</code> 控制台进入 <code>IAM</code>，在左侧导航栏 <code>Access management</code> 下选择 <code>Account settings</code>：</p><p><img src="/images/snowflake-1.png" alt="alt" /></p><p>在 <code>Security Token Service (STS)</code> 下查看所在区域的 <code>STS</code> 状态是否是 <code>Active</code>：</p><p><img src="/images/snowflake-2.png" alt="alt" /></p><p>接着，在左侧导航栏 <code>Access management</code> 下选择 <code>Policies</code>，之后点击 <code>Create policy</code>：</p><p><img src="/images/snowflake-3.png" alt="alt" /></p><p>切换到 <code>JSON</code> 后输入 <code>S3</code> 策略：</p><p><img src="/images/snowflake-4.png" alt="alt" /></p><p>下面的策略中 <code>vpc-abc</code> 是 <code>Snowflake</code> 实例的 <code>VPC</code>，<code>snowflake-storage-integration-example</code> 是示例 <code>Bucket</code> 的名字，<code>unloading</code> 和 <code>loading</code> 是该 <code>Bucket</code> 下的两个文件夹，分别用于 <code>Data Unloading</code> 和 <code>Data Loading</code> 使用：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Statement1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;s3:PutObject&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;s3:GetObject&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;s3:GetObjectVersion&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;s3:DeleteObject&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;s3:DeleteObjectVersion&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;arn:aws:s3:::snowflake-storage-integration-example/unloading/*&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;arn:aws:s3:::snowflake-storage-integration-example/loading/*&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Condition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;StringEquals&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;aws:SourceVpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vpc-abc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Statement2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;s3:ListBucket&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;s3:GetBucketLocation&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;arn:aws:s3:::snowflake-storage-integration-example&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Condition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;StringLike&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;s3:prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;unloading/*&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;loading/*&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;StringEquals&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;aws:SourceVpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vpc-abc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="创建-iam-角色"><a class="markdownIt-Anchor" href="#创建-iam-角色"></a> 创建 IAM 角色</h2><p>接着，创建一个 <code>IAM</code> 角色并绑定前一步创建的 <code>S3</code> 策略。在 <code>IAM</code> 左侧导航栏 <code>Access management</code> 下选择 <code>Roles</code>，之后点击 <code>Create role</code>：</p><p><img src="/images/snowflake-5.png" alt="alt" /></p><p><code>Trusted entity type</code> 选择 <code>AWS account</code>，然后在 <code>An AWS account</code> 下选择 <code>Another AWS account</code>，<code>Account ID</code> 暂时先填当前账号的 <code>ID</code>，之后会修改：</p><p><img src="/images/snowflake-6.png" alt="alt" /></p><p>同时，选择 <code>Require external ID (Best practice when a third party will assume this role)</code>，<code>External ID</code> 暂时用一个假的例如 <code>0000</code> 替代，之后同样会修改：</p><p><img src="/images/snowflake-7.png" alt="alt" /></p><p>最后绑定先前创建的 <code>S3</code> 策略：</p><p><img src="/images/snowflake-8.png" alt="alt" /></p><p>创建角色之后，记录下角色的 <code>ARN</code>，接下来会用到：</p><p><img src="/images/snowflake-9.png" alt="alt" /></p><h2 id="创建-storage-integration"><a class="markdownIt-Anchor" href="#创建-storage-integration"></a> 创建 Storage Integration</h2><p>这时就可以在 <code>Snowflake</code> 中创建 <code>Storage Integration</code> 了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> STORAGE INTEGRATION snowflake_storage_integration_example</span><br><span class="line">  TYPE <span class="operator">=</span> EXTERNAL_STAGE</span><br><span class="line">  STORAGE_PROVIDER <span class="operator">=</span> <span class="string">&#x27;S3&#x27;</span></span><br><span class="line">  ENABLED <span class="operator">=</span> <span class="literal">TRUE</span></span><br><span class="line">  STORAGE_AWS_ROLE_ARN <span class="operator">=</span> <span class="string">&#x27;arn:aws:iam::123:role/snowflake-integration-role&#x27;</span></span><br><span class="line">  STORAGE_ALLOWED_LOCATIONS <span class="operator">=</span> (<span class="string">&#x27;s3://snowflake-storage-integration-example/loading/&#x27;</span>, <span class="string">&#x27;s3://snowflake-storage-integration-example/unloading/&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其中 <code>STORAGE_AWS_ROLE_ARN</code> 是之前所创建的 <code>IAM</code> 角色的 <code>ARN</code>，<code>STORAGE_ALLOWED_LOCATIONS</code> 是示例 <code>Bucket</code> 下的两个文件夹的地址。</p><blockquote><p>只有授权了 <code>CREATE INTEGRATION</code> 权限的角色才能创建 <code>STORAGE INTEGRATION</code>，默认只有 <code>ACCOUNTADMIN</code> 才有这个权限。</p></blockquote><h2 id="获取-snowflake-的用户-arn-和-external-id"><a class="markdownIt-Anchor" href="#获取-snowflake-的用户-arn-和-external-id"></a> 获取 Snowflake 的用户 ARN 和 External ID</h2><p>接着需要获取所创建的 <code>Storage Integration</code> 对应的 <code>Snowflake</code> <code>IAM</code> 用户的 <code>ARN</code> 和 <code>External ID</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> integration snowflake_storage_integration_example;</span><br></pre></td></tr></table></figure><p><img src="/images/snowflake-10.png" alt="alt" /></p><p>记录下 <code>STORAGE_AWS_IAM_USER_ARN</code> 和 <code>STORAGE_AWS_EXTERNAL_ID</code>。</p><h2 id="授权-snowflake-用户"><a class="markdownIt-Anchor" href="#授权-snowflake-用户"></a> 授权 Snowflake 用户</h2><p>回到之前创建的 <code>IAM</code> 角色，在 <code>Trust relationships</code> 下替换掉之前填写的临时 <code>Account ID</code> 和 <code>External ID</code>：</p><p><img src="/images/snowflake-11.png" alt="alt" /></p><p><img src="/images/snowflake-12.png" alt="alt" /></p><p>完成后，我们就可以执行一条 <code>Data Unloading</code> 命令来验证配置是否成功：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">copy</span> <span class="keyword">into</span> <span class="string">&#x27;s3://snowflake-storage-integration-example/unloading/&#x27;</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> OBJECT_CONSTRUCT_KEEP_NULL(<span class="operator">*</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> MY_DATABASE.MY_SCHEMA.MY_TABLE limit <span class="number">10</span>))</span><br><span class="line">FILE_FORMAT <span class="operator">=</span> (type <span class="operator">=</span> json, COMPRESSION <span class="operator">=</span> <span class="keyword">NONE</span>)</span><br><span class="line">STORAGE_INTEGRATION <span class="operator">=</span> snowflake_storage_integration_example</span><br></pre></td></tr></table></figure><p>如果配置成功，那么 <code>Snowflake</code> 会将表 <code>MY_DATABASE.MY_SCHEMA.MY_TABLE</code> 的数据导出到 <code>s3://snowflake-storage-integration-example/unloading/</code> 文件夹下。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://docs.snowflake.com/en/user-guide/data-load-s3-allow">Allowing the Virtual Private Cloud IDs</a></li><li><a href="https://docs.snowflake.com/en/user-guide/data-load-s3-config-storage-integration">Option 1: Configuring a Snowflake storage integration to access Amazon S3</a></li><li><a href="https://docs.snowflake.com/en/sql-reference/sql/create-storage-integration">CREATE STORAGE INTEGRATION</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Snowflake&lt;/code&gt; 的 &lt;code&gt;Data Loading&lt;/code&gt; 和 &lt;code&gt;Data Unloadin</summary>
      
    
    
    
    
    <category term="Snowflake" scheme="https://frederick-s.github.io/tags/Snowflake/"/>
    
  </entry>
  
  <entry>
    <title>【读】Newton 科学世界 - 就诊指南</title>
    <link href="https://frederick-s.github.io/2024/03/03/hospital/"/>
    <id>https://frederick-s.github.io/2024/03/03/hospital/</id>
    <published>2024-03-02T16:00:00.000Z</published>
    <updated>2024-03-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>翻到了一本压箱底的 <code>Newton 科学世界</code>，本期主题为 <code>就诊指南</code>，大概整理了一下，<a href="https://1drv.ms/u/s!AgP1jNp0kP4-1kMaeBvVo1xntEtm?e=yYWOFm">源文件</a>。</p><p><img src="/images/%E5%B0%B1%E8%AF%8A%E6%8C%87%E5%8D%97.png" alt="alt" /></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li>Newton 科学世界（2022.5）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;翻到了一本压箱底的 &lt;code&gt;Newton 科学世界&lt;/code&gt;，本期主题为 &lt;code&gt;就诊指南&lt;/code&gt;，大概整理了一下，&lt;a href=&quot;https://1drv.ms/u/s!AgP1jNp0kP4-1kMaeBvVo1xntEtm?e=yYWOFm&quot;&gt;源文</summary>
      
    
    
    
    
    <category term="Reading" scheme="https://frederick-s.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>【读】17 REASONS NOT TO BE A MANAGER</title>
    <link href="https://frederick-s.github.io/2023/08/12/17-reasons-not-to-be-a-manager/"/>
    <id>https://frederick-s.github.io/2023/08/12/17-reasons-not-to-be-a-manager/</id>
    <published>2023-08-11T16:00:00.000Z</published>
    <updated>2023-08-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>这是一篇出现在 <code>Hacker News</code> 上的文章，作者阐述了关于不当管理者的17个理由。</p><h2 id="17个理由"><a class="markdownIt-Anchor" href="#17个理由"></a> 17个理由</h2><h3 id="1-你热爱你所做的事"><a class="markdownIt-Anchor" href="#1-你热爱你所做的事"></a> 1. 你热爱你所做的事</h3><ul><li>你会为能亲自实现某个功能而兴奋不已吗？</li><li>你会时而在敲完一天代码后开心的哼着小曲下班吗？</li><li>你会为过去所实现的功能、达成的成就感到自豪吗？</li></ul><p>如果是的话，那么你是一个幸运的打工人。永远不要低估一颗热爱工作的心，同时也不要想当然的认为无论何时都能重拾这份热爱。</p><h3 id="2-找到一份工程师的工作很简单"><a class="markdownIt-Anchor" href="#2-找到一份工程师的工作很简单"></a> 2. 找到一份工程师的工作很简单</h3><p>在裁员时代，这点已经不再简单。不过在同等条件下，工程师岗位相对于管理者岗位来说：</p><ul><li>技能更能够量化，仅从通过面试来说，一部分技能甚至可以在面试过程中不断学习强化</li><li>除了特定行业外，工程师的技能一般不和公司深度绑定。在上一家公司培养的技能并不会因为换了家公司就基本没用；而管理者在上一家公司与各团队构建的信任关系则一般无法带到下一家公司，或者换了一家公司后，需要应对未曾遇到的人员关系</li></ul><h3 id="3-管理者岗位僧多粥少"><a class="markdownIt-Anchor" href="#3-管理者岗位僧多粥少"></a> 3. 管理者岗位僧多粥少</h3><p>管理者岗位一个萝卜一个坑，其招聘数量远少于工程师岗位。</p><h3 id="4-管理者最先被炒鱿鱼"><a class="markdownIt-Anchor" href="#4-管理者最先被炒鱿鱼"></a> 4. 管理者最先被炒鱿鱼</h3><p>如果真要裁员，光裁管理者是不够的，工程师反而有天然的【人数优势】。</p><p>除非是一锅端，否则各部门按比例的裁员场景下，应该不会有管理者自告奋勇的说自己产生不了直接价值，底下的人离开我也能转，裁我吧。</p><h3 id="5-管理者不易跳槽"><a class="markdownIt-Anchor" href="#5-管理者不易跳槽"></a> 5. 管理者不易跳槽</h3><p>除开管理者岗位本身的原因，年龄也有一定的影响，但这不仅仅针对管理者。管理者的年龄一般比下属的工程师大，即使一个工程师在年轻的时候可以一年两跳，到了管理者同样的年纪也可能会变得不容易跳槽。</p><h3 id="6-工程师会看轻管理者"><a class="markdownIt-Anchor" href="#6-工程师会看轻管理者"></a> 6. 工程师会看轻管理者</h3><p>大家都是打工的，没有必要谁看不起谁。当然也会有唯技术论的工程师，无视技术之外的一切；但同样的，也有始终认为自己是主子的管理者，这种，自然是没有必要迎合的。</p><p>那么，管理者需不需要懂技术？如果是放权型管理者，能安心将技术决策委托给核心工程师，是可以不用懂技术的，从而专注发挥好自己的管理长处。不过，这属于可遇不可求的情况，现实中没有那么多的刘备和孔明。虽然作者和他的同事们讨论后都认为所遇到的优秀的管理者都不懂技术，但是优秀的管理者本身是比优秀的工程师更为稀缺的存在。所以，对于一般的管理者，至少在技术上要能认识到十个女人一个月真的生不出孩子。</p><h3 id="7-管理者有时候要当坏人"><a class="markdownIt-Anchor" href="#7-管理者有时候要当坏人"></a> 7. 管理者有时候要当坏人</h3><p>身为管理者，难免会遇到以下的情况：</p><ul><li>绩效有人要背 C</li><li>裁员指标</li><li>传达上头不合理的要求</li></ul><p>而并不是所有人都愿意和能合理的处理好这些场景。</p><h3 id="8-管理者的技能树比你想象中的要少"><a class="markdownIt-Anchor" href="#8-管理者的技能树比你想象中的要少"></a> 8. 管理者的技能树比你想象中的要少</h3><p>如果从工程师切到了管理者，可能会觉得自己一直在飘着，不再是实际的执行者，这对于某些工程师来说可能会比较难受。而另一方面，立志往管理线发展的人可能会更乐于去做引导一个产品或项目落地的过程，对实际执行并不太关心，并在这期间逐步提高自己的影响力。</p><p>我认为这里能体现管理者水平的地方包含但不限于如何处理：</p><ul><li>你的目标对你很重要，但对其他人不重要</li><li>你有雄心壮志，但其他人只想安分守己</li></ul><h3 id="9-做得好是你的本分做不好是你的锅"><a class="markdownIt-Anchor" href="#9-做得好是你的本分做不好是你的锅"></a> 9. 做得好是你的本分，做不好是你的锅</h3><p>大和田老师在半泽直树1里说过：</p><blockquote><p>下属的功劳是上司的功绩，上司的过错是下属的责任</p></blockquote><p>做不好又能把锅甩出去也是管理的一种能力。</p><h3 id="10-你需要以-ic-的身份和管理者分庭抗礼"><a class="markdownIt-Anchor" href="#10-你需要以-ic-的身份和管理者分庭抗礼"></a> 10. 你需要以 IC 的身份和管理者分庭抗礼</h3><p><code>IC</code> 全称 <code>Individual Contributor</code>，常见翻译为独立贡献者或个人贡献者。<code>IC</code> 最明显的特点是没有管理职责，注意不等同于没有管理工作，他们利用自己的专业水平协同或者独立完成任务，最终可能成为某一方面的专家。</p><p><code>IC</code> 也分等级，例如 <code>Dropbox</code> 的软件工程师职位就划分为了 <code>IC1</code> 到 <code>IC7</code>，而管理者岗位则是 <code>M</code> 线。高级的 <code>IC</code> 也会有管理工作，例如项目管理（高级 <code>IC</code> 负责的项目很可能已经不是自己能独立完成的了）或者人员管理（什么地方用什么样的人）。</p><p>这里作者认为需要有能够发声的高级 <code>IC</code>，因为他们毕竟还是 <code>IC</code> 线，他们所代表的利益有时也符合普通工程师的利益。如果高级 <code>IC</code> 最终都转到了管理岗，那么本来就人微言轻的普通工程师的利益也更难传达到上层。不过，这也要求公司有能够让高级 <code>IC</code> 开花结果的土壤。</p><h3 id="11-管理只是一系列技能你同样能以-ic-的身份去尝试所有有趣的管理工作"><a class="markdownIt-Anchor" href="#11-管理只是一系列技能你同样能以-ic-的身份去尝试所有有趣的管理工作"></a> 11. 管理只是一系列技能，你同样能以 <code>IC</code> 的身份去尝试所有有趣的管理工作</h3><p>随着在 <code>IC</code> 路线上的成长，你会逐渐涉及一些技术之外的管理工作。有人可能就会乐于去尝试这些管理工作，例如担任导师，面试，参与决策，制定职业规划等。作者认为一个健康的公司应当鼓励并允许高级 <code>IC</code> 去参与这些工作。这样就避免了参与管理者职责中的一些不讨喜的活，例如绩效考核，裁人等。</p><h3 id="12-更难从工作中感到愉悦"><a class="markdownIt-Anchor" href="#12-更难从工作中感到愉悦"></a> 12. 更难从工作中感到愉悦</h3><p>修复一个问题或者学习新知识所带来的愉悦可能就此一去不复返，同时，工作中的正反馈周期也可能变长。</p><p>不过，这也因人而异，那些享受改完一个高深 <code>Bug</code> 的工程师可能根本不会想着做管理，而有些做管理的人也可能根本不认为改完一个高深的 <code>Bug</code> 是种享受，他们的愉悦点可能在于来自底下的服从。</p><h3 id="13-情绪影响会衍生甚至占据你的个人生活"><a class="markdownIt-Anchor" href="#13-情绪影响会衍生甚至占据你的个人生活"></a> 13. 情绪影响会衍生甚至占据你的个人生活</h3><p>身为管理者后，会与更多的人打交道，而人不是一个确定的个体，每个人有各自的行为处世，你可能会觉得更心累。</p><h3 id="14-你的时间不再属于你"><a class="markdownIt-Anchor" href="#14-你的时间不再属于你"></a> 14. 你的时间不再属于你</h3><p>普通工程师的时间都不能够一定保证，管理者可能更甚。</p><h3 id="15-会议"><a class="markdownIt-Anchor" href="#15-会议"></a> 15. 会议</h3><p>更恐怖的是无尽的低效会议。</p><h3 id="16-如果你的心之所向是技术引领"><a class="markdownIt-Anchor" href="#16-如果你的心之所向是技术引领"></a> 16. 如果你的心之所向是技术引领</h3><p>成为管理者后，你的做事方式就转变为了影响团队，提高团队。你的技术水平也会因此停滞不前，然后逐渐衰退。如果你认为这是一种折磨，那么你就不适合成为管理者。</p><h3 id="17-管理者岗位始终会等着你"><a class="markdownIt-Anchor" href="#17-管理者岗位始终会等着你"></a> 17. 管理者岗位始终会等着你</h3><p>即使是技术路线越往上走也越会要涉及管理工作，如果你不在乎一个头衔，又何必急于一时。</p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>理想的情况下自然是合适的人在合适的位置上，不过现实中也会有赶鸭子上架而做了管理者的人，或者为了延长自己的职业寿命而无奈转了管理者。但无论如何，管理并不是一个想当然的工作，并不是因为工程师干不下去了所以到时候就转管理，这既不尊重管理岗位本身，也不尊重团队中的其他人，只会多一个不靠谱的管理者，而不靠谱的管理者比不靠谱的工程师更糟糕。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://charity.wtf/2019/09/08/reasons-not-to-be-a-manager/">17 REASONS NOT TO BE A MANAGER</a></li><li><a href="https://dropbox.github.io/dbx-career-framework/overview.html">Dropbox Engineering Career Framework</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;这是一篇出现在 &lt;code&gt;Hacker News&lt;/code&gt; 上的文章，作者阐述了关于不当管理者的17个理由。&lt;/p&gt;
&lt;h2 id=&quot;17</summary>
      
    
    
    
    
    <category term="Opinions" scheme="https://frederick-s.github.io/tags/Opinions/"/>
    
  </entry>
  
  <entry>
    <title>通过 Grafana Agent 上传 Prometheus 指标数据到 Grafana Cloud</title>
    <link href="https://frederick-s.github.io/2023/03/12/grafana-agent-remote-write-/"/>
    <id>https://frederick-s.github.io/2023/03/12/grafana-agent-remote-write-/</id>
    <published>2023-03-11T16:00:00.000Z</published>
    <updated>2023-03-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p><code>Grafana Cloud</code> 为免费账户提供了一万条指标的存储额度，对于业余项目来说可以考虑将指标上传到由 <code>Grafana Cloud</code> 托管的 <code>Prometheus</code> 中。</p><h2 id="安装-grafana-agent"><a class="markdownIt-Anchor" href="#安装-grafana-agent"></a> 安装 Grafana Agent</h2><p><code>Prometheus</code> 指标数据的上传需要通过 <code>Grafana Agent</code> 来完成，以下安装步骤以 <code>Ubuntu</code> 为例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/apt/keyrings/</span><br><span class="line">wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo <span class="built_in">tee</span> /etc/apt/keyrings/grafana.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/grafana.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install grafana-agent</span><br></pre></td></tr></table></figure><p>安装完成之后通过 <code>sudo systemctl start grafana-agent</code> 将其启动，并可通过 <code>sudo systemctl status grafana-agent</code> 显示 <code>grafana-agent</code> 的当前状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">● grafana-agent.service - Monitoring system and forwarder</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/grafana-agent.service; disabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Sun 2023-03-12 05:08:43 UTC; 13s ago</span><br><span class="line">       Docs: https://grafana.com/docs/agent/latest/</span><br><span class="line">   Main PID: 1049084 (grafana-agent)</span><br><span class="line">      Tasks: 7 (limit: 1041)</span><br><span class="line">     Memory: 125.6M</span><br><span class="line">     CGroup: /system.slice/grafana-agent.service</span><br><span class="line">             └─1049084 /usr/bin/grafana-agent --config.file /etc/grafana-agent.yaml -server.http.address=127.0.0.1:9090 -server.grpc.address=127.0.0.1:9091</span><br><span class="line"></span><br><span class="line">Mar 12 05:08:43 example-name systemd[1]: Started Monitoring system and forwarder.</span><br></pre></td></tr></table></figure><p>同时，如果希望系统重启后自动启动 <code>grafana-agent</code> 服务，可以执行如下的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> grafana-agent.service</span><br></pre></td></tr></table></figure><p>另外，可以通过 <code>sudo journalctl -u grafana-agent</code> 查看 <code>grafana-agent</code> 的运行日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- Logs begin at Sun 2021-12-26 04:48:21 UTC, end at Sun 2023-03-12 06:34:53 UTC. --</span><br><span class="line">Mar 12 05:08:43 example-name systemd[1]: Started Monitoring system and forwarder.</span><br><span class="line">Mar 12 05:38:45 example-name grafana-agent[1049084]: ts=2023-03-12T05:38:45.6366501Z caller=cleaner.go:203 level=warn agent=prometheus component=cleaner msg=&quot;unable to fi&gt;</span><br><span class="line">Mar 12 06:08:45 example-name grafana-agent[1049084]: ts=2023-03-12T06:08:45.63549564Z caller=cleaner.go:203 level=warn agent=prometheus component=cleaner msg=&quot;unable to f&gt;</span><br><span class="line">Mar 12 06:20:16 example-name systemd[1]: Stopping Monitoring system and forwarder...</span><br><span class="line">Mar 12 06:20:16 example-name systemd[1]: grafana-agent.service: Succeeded.</span><br><span class="line">Mar 12 06:20:16 example-name systemd[1]: Stopped Monitoring system and forwarder.</span><br><span class="line">Mar 12 06:20:16 example-name systemd[1]: Started Monitoring system and forwarder.</span><br></pre></td></tr></table></figure><h2 id="上报监控数据"><a class="markdownIt-Anchor" href="#上报监控数据"></a> 上报监控数据</h2><p><code>grafana-agent</code> 上报的监控数据分两种，一种是 <code>grafana-agent</code> 自身及其所在主机的监控数据，另一种是自定义服务的监控数据，我们需要修改 <code>grafana-agent</code> 的配置文件来指定如何收集监控数据。</p><p><code>grafana-agent</code> 的默认配置文件为 <code>/etc/grafana-agent.yaml</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># Sample config for Grafana Agent</span><br><span class="line"># For a full configuration reference, see: https://grafana.com/docs/agent/latest/configuration/.</span><br><span class="line">server:</span><br><span class="line">  log_level: warn</span><br><span class="line"></span><br><span class="line">metrics:</span><br><span class="line">  global:</span><br><span class="line">    scrape_interval: 1m</span><br><span class="line">  wal_directory: &#x27;/var/lib/grafana-agent&#x27;</span><br><span class="line">  configs:</span><br><span class="line">    # Example Prometheus scrape configuration to scrape the agent itself for metrics.</span><br><span class="line">    # This is not needed if the agent integration is enabled.</span><br><span class="line">    # - name: agent</span><br><span class="line">    #   host_filter: false</span><br><span class="line">    #   scrape_configs:</span><br><span class="line">    #     - job_name: agent</span><br><span class="line">    #       static_configs:</span><br><span class="line">    #         - targets: [&#x27;127.0.0.1:9090&#x27;]</span><br><span class="line"></span><br><span class="line">integrations:</span><br><span class="line">  agent:</span><br><span class="line">    enabled: true</span><br><span class="line">  node_exporter:</span><br><span class="line">    enabled: true</span><br><span class="line">    include_exporter_metrics: true</span><br><span class="line">    disable_collectors:</span><br><span class="line">      - &quot;mdadm&quot;</span><br></pre></td></tr></table></figure><p>自定义服务的监控数据收集需要定义在 <code>metrics.configs</code> 下，<code>grafana-agent</code> 自身及其所在主机的监控数据收集默认已经是开启的。</p><p>假设需要收集由 <code>Spring Boot</code> 的 <code>actuator</code> 模块所暴露的 <code>Prometheus</code> 监控数据，则需要在 <code>metrics.configs</code> 下新增如下类似配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- name: &#x27;My Spring Boot App&#x27;</span><br><span class="line">  scrape_configs:</span><br><span class="line">    - job_name: &#x27;My Spring Boot App&#x27;</span><br><span class="line">      metrics_path: &#x27;/actuator/prometheus&#x27;</span><br><span class="line">      scrape_interval: 1m</span><br><span class="line">      static_configs:</span><br><span class="line">        - targets: [&#x27;127.0.0.1:8080&#x27;]</span><br><span class="line">          labels:</span><br><span class="line">            application: &#x27;My Spring Boot App&#x27;</span><br></pre></td></tr></table></figure><p>最后，再通过 <code>remote_write</code> 设置将监控数据推送到 <code>Grafana Cloud</code> 下的 <code>Prometheus</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">remote_write:</span><br><span class="line">  - url: https://prometheus-xxx.grafana.net/api/prom/push</span><br><span class="line">    basic_auth:</span><br><span class="line">      username: username</span><br><span class="line">      password: password</span><br></pre></td></tr></table></figure><p>其中 <code>url</code>，<code>username</code> 和 <code>password</code> 这三个信息都可以在所创建的 <code>Grafana Cloud Stack</code> 下的 <code>Prometheus</code> 的详情页中找到。<code>password</code> 对应 <code>Grafana Cloud API Key</code>，如果之前没有创建过的话需要新生成一个，角色选择 <code>MetricsPublisher</code> 即可：</p><p><img src="/images/grafana-cloud-1.png" alt="alt" /></p><p>完整的配置文件示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  log_level: warn</span><br><span class="line"></span><br><span class="line">metrics:</span><br><span class="line">  global:</span><br><span class="line">    scrape_interval: 1m</span><br><span class="line">  wal_directory: &#x27;/var/lib/grafana-agent&#x27;</span><br><span class="line">  configs:</span><br><span class="line">    - name: &#x27;My Spring Boot App&#x27;</span><br><span class="line">      scrape_configs:</span><br><span class="line">        - job_name: &#x27;My Spring Boot App&#x27;</span><br><span class="line">          metrics_path: &#x27;/actuator/prometheus&#x27;</span><br><span class="line">          scrape_interval: 1m</span><br><span class="line">          static_configs:</span><br><span class="line">            - targets: [&#x27;127.0.0.1:8080&#x27;]</span><br><span class="line">              labels:</span><br><span class="line">                application: &#x27;My Spring Boot App&#x27;</span><br><span class="line">      remote_write:</span><br><span class="line">        - url: https://prometheus-xxx.grafana.net/api/prom/push</span><br><span class="line">          basic_auth:</span><br><span class="line">            username: username</span><br><span class="line">            password: password</span><br><span class="line"></span><br><span class="line">integrations:</span><br><span class="line">  agent:</span><br><span class="line">    enabled: true</span><br><span class="line">  node_exporter:</span><br><span class="line">    enabled: true</span><br><span class="line">    include_exporter_metrics: true</span><br><span class="line">    disable_collectors:</span><br><span class="line">      - &quot;mdadm&quot;</span><br><span class="line">  prometheus_remote_write:</span><br><span class="line">    - url: https://prometheus-xxx.grafana.net/api/prom/push</span><br><span class="line">      basic_auth:</span><br><span class="line">        username: username</span><br><span class="line">        password: password</span><br></pre></td></tr></table></figure><p>配置文件修改完成之后，通过 <code>sudo systemctl restart grafana-agent</code> 来重启 <code>grafana-agent</code> 服务。</p><h2 id="grafana-展示"><a class="markdownIt-Anchor" href="#grafana-展示"></a> Grafana 展示</h2><p>对于自定义服务的监控展示使用自己熟悉的方式即可，例如 <code>Java</code> 应用可以配合使用 <a href="https://grafana.com/grafana/dashboards/4701-jvm-micrometer/">JVM (Micrometer)</a>。</p><p>对于 <code>grafana-agent</code> 自身的监控展示可以结合 <a href="https://github.com/grafana/agent/blob/main/example/docker-compose/grafana/dashboards/agent-remote-write.json">agent-remote-write.json</a>：</p><p><img src="/images/grafana-cloud-2.png" alt="alt" /></p><p>最后，<code>grafana-agent</code> 对于所在主机的监控展示可以借助 <a href="https://grafana.com/grafana/dashboards/1860-node-exporter-full/">Node Exporter Full</a>：</p><p><img src="/images/grafana-cloud-3.png" alt="alt" /></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://grafana.com/docs/agent/latest/set-up/install-agent-linux/">Install Grafana Agent on Linux</a></li><li><a href="https://grafana.com/blog/2020/07/02/getting-started-with-the-grafana-cloud-agent-a-remote_write-focused-prometheus-agent/">Getting started with the Grafana Cloud Agent, a remote_write-focused Prometheus agent</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Grafana Cloud&lt;/code&gt; 为免费账户提供了一万条指标的存储额度，对于业余项目来说可以考虑将指标上传到由 &lt;code&gt;</summary>
      
    
    
    
    
    <category term="Grafana" scheme="https://frederick-s.github.io/tags/Grafana/"/>
    
    <category term="Prometheus" scheme="https://frederick-s.github.io/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>【读】Google API Design Guide</title>
    <link href="https://frederick-s.github.io/2022/12/26/google-api-design-guide/"/>
    <id>https://frederick-s.github.io/2022/12/26/google-api-design-guide/</id>
    <published>2022-12-25T16:00:00.000Z</published>
    <updated>2022-12-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p><a href="https://cloud.google.com/apis/design">Google API Design Guide</a> 是 <code>Google</code> 设计 <a href="https://cloud.google.com/apis/docs/overview">Cloud APIs</a> 和其他 <a href="https://github.com/googleapis/googleapis">Google APIs</a> 的设计指南。</p><p>该指南面向的不仅仅是 <code>REST APIs</code>，同时也适用于 <code>RPC APIs</code>，其中 <code>RPC APIs</code> 主要面向的是 <code>gRPC APIs</code>。</p><h2 id="面向资源的设计"><a class="markdownIt-Anchor" href="#面向资源的设计"></a> 面向资源的设计</h2><p>传统的 <code>RPC</code> 接口设计面向的是操作，各个接口之间是孤立的，没有明确的关联；不同系统的接口也有着不同的设计风格，存在着一定的学习和使用成本。</p><p>而面向资源的设计则将系统抽象为一系列资源，开发者则通过有限的几个标准方法来操作资源，从而实现对系统的修改。对于 <code>RESTful</code> 接口来说，有限的几个标准方法对应的就是 <code>HTTP</code> 请求方法中的 <code>POST</code>，<code>GET</code>，<code>PUT</code>，<code>PATCH</code> 和 <code>DELETE</code>。另一方面，由于遵循了统一的设计，当开发者调用不同系统的接口时，能够自然的假定各个系统都支持相同的标准方法，从而降低了开发者学习的成本。</p><blockquote><p>不管是面向资源的设计还是其他的设计标准，统一的标准胜过百花齐放，开发者应当将更多的精力放在自身系统的业务实现上，而不是耗费时间学习和调试其他系统的接口。</p></blockquote><p>该指南建议按照如下的步骤设计面向资源的接口：</p><ul><li>确定接口所提供的资源类型</li><li>确定资源间的关系</li><li>根据资源类型和资源间的关系确定资源命名模式</li><li>确定资源体系</li><li>为每个资源设计最小限度的操作方法</li></ul><p>在面向资源的设计体系下，各接口一般会按照资源的层级结构进行组织，层级结构中的每个节点可能是单一的资源，也可能是一个资源集合：</p><ul><li>一个资源集合包含了一系列相同类型的资源，例如，一个用户拥有一个联系人资源集合</li><li>一个资源包含了若干的状态，同时也包含了0个或者多个子资源。每个子资源可以是一个单一资源或者是资源集合</li></ul><p>以创建邮件接口为例，传统的接口设计可能是如下的方式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /createMail</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;userId&quot;: 123,</span><br><span class="line">    &quot;title:&quot; &quot;Title&quot;,</span><br><span class="line">    &quot;from&quot;: &quot;from@example.com&quot;</span><br><span class="line">    &quot;to&quot;: &quot;to@example.com&quot;,</span><br><span class="line">    &quot;body&quot;: &quot;Body&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而面向资源的接口设计则可能为：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /users/&#123;userId&#125;/mails</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;title:&quot; &quot;Title&quot;,</span><br><span class="line">    &quot;from&quot;: &quot;from@example.com&quot;</span><br><span class="line">    &quot;to&quot;: &quot;to@example.com&quot;,</span><br><span class="line">    &quot;body&quot;: &quot;Body&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，面向资源的接口设计体现了资源间的层级关系。一般而言，对于 <code>RESTful</code> 接口来说，请求 <code>URL</code> 中只会包含资源的名称（名词），而不会包含对资源的操作（动词），<code>HTTP</code> 的请求方法就对应了资源的标准操作方法。而该指南讨论的是通用的面向资源的设计，其对应的资源标准操作方法为：<code>List</code>，<code>Get</code>，<code>Create</code>，<code>Update</code> 和 <code>Delete</code>。</p><h2 id="资源名称"><a class="markdownIt-Anchor" href="#资源名称"></a> 资源名称</h2><p>在面向资源的设计下，资源是一个命名实体，每个资源都有一个唯一的名称作为其标识符。一个资源的名称由三部分组成：</p><ol><li>资源的 <code>ID</code></li><li>所有父资源的 <code>ID</code></li><li><code>API</code> 服务名，如 <code>gmail.googleapis.com</code></li></ol><p>资源集合被视为一种特殊的资源，它包含了一组相同类型的子资源，例如一个目录可以被视为一个资源集合，它包含了一组文件资源。同时，资源集合也有相应的 <code>ID</code>。</p><p>资源名称由资源 <code>ID</code> 和资源集合 <code>ID</code> 组成，其定义也体现了资源的层级结构关系，各层级之间使用 <code>/</code> 进行分隔。例如，对于某个对象存储服务中的对象来说，其资源名称可能为 <code>//storage.googleapis.com/buckets/bucket-123/objects/object-123</code>，其中最顶层为服务名，即 <code>//storage.googleapis.com</code>，然后是一个资源集合，即 <code>buckets</code>，对象存储服务一般以 <code>bucket</code> 为维度来管理对象；接下来为了要定位到某个对象，需要先定位到具体的 <code>bucket</code>，<code>bucket-123</code> 就是某个 <code>bucket</code> 的资源 <code>ID</code>，而每个 <code>bucket</code> 下包含了多个对象，进而产生了一个资源集合 <code>objects</code>，最后的 <code>object-123</code> 就是实际对象的资源 <code>ID</code>。</p><p>一般来说，一个资源在实现上很可能对应一张数据库的表，所以可以用表的主键来作为资源的 <code>ID</code>。而由于使用了 <code>/</code> 来分隔资源的层级，因此只有最底层的资源才允许资源 <code>ID</code> 中包含 <code>/</code>，从而避免层级歧义。</p><blockquote><p>如果资源 <code>ID</code> 中包含了 <code>/</code>，则必须在 <code>API</code> 文档中明确声明。</p></blockquote><p>资源集合更多的是一种层级上的逻辑概念，所以其 <code>ID</code> 命名需要有意义，以及符合以下的规范：</p><ol><li>必须是以小驼峰形式命名的英文单词复数，如果对应单词没有复数，则应当使用单词的单数形式</li><li>必须使用简洁明了的英文单词</li><li>避免使用过于宽泛的英文单词，例如，<code>rowValues</code> 优于 <code>values</code>。同时应当避免无条件的使用如下的英文单词：<ul><li>elements</li><li>entries</li><li>instances</li><li>items</li><li>objects</li><li>resources</li><li>types</li><li>values</li></ul></li></ol><blockquote><p>对于 <code>Google</code> 的服务来说，资源集合 <code>ID</code> 还会经常出现在自动生成的客户端类库代码中，所以它们的命名也必须是合法的 <code>C/C++</code> 标识符。</p></blockquote><p>完整的资源名称是协议无关的，虽然它看起来像 <code>RESTful</code> 服务的 <code>HTTP</code> 接口请求路径，但本质上这是两个东西。实际的资源请求还需要附带版本号，协议等信息，例如对于资源名称 <code>//calendar.googleapis.com/users/john smith/events/123</code> 来说，实际的 <code>RESTful</code> 请求路径可能是 <code>https://calendar.googleapis.com/v3/users/john%20smith/events/123</code>，和原本的资源名称相比有三点不同：</p><ol><li>指明了具体的协议，<code>HTTPS</code></li><li>指明了版本号，<code>v3</code></li><li>对资源名称进行了 <code>URL</code> 转义</li></ol><p><code>Google</code> 的 <code>API</code> 服务要求资源名称必须是字符串，除非有后向兼容的问题，资源名称在跨模块间传递时必须确保没有任何数据丢失。对于资源定义来说，第一个字段应该命名为 <code>name</code>，类型为字符串，用于表示资源的名称，以下是 <code>gRPC</code> 服务的定义示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 图书馆服务</span><br><span class="line">service LibraryService &#123;</span><br><span class="line">  // 获取一本书</span><br><span class="line">  rpc GetBook(GetBookRequest) returns (Book) &#123;</span><br><span class="line">    option (google.api.http) = &#123;</span><br><span class="line">      get: &quot;/v1/&#123;name=shelves/*/books/*&#125;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  // 创建一本书</span><br><span class="line">  rpc CreateBook(CreateBookRequest) returns (Book) &#123;</span><br><span class="line">    option (google.api.http) = &#123;</span><br><span class="line">      post: &quot;/v1/&#123;parent=shelves/*&#125;/books&quot;</span><br><span class="line">      body: &quot;book&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 资源定义</span><br><span class="line">message Book &#123;</span><br><span class="line">  // 资源名称，必须以 &quot;shelves/*/books/*&quot; 的形式。</span><br><span class="line">  // 例如，&quot;shelves/shelf1/books/book2&quot;。</span><br><span class="line">  string name = 1;</span><br><span class="line"></span><br><span class="line">  // ... 其他属性</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取书籍请求</span><br><span class="line">message GetBookRequest &#123;</span><br><span class="line">  // 资源名称，例如 &quot;shelves/shelf1/books/book2&quot;。</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建书籍请求</span><br><span class="line">message CreateBookRequest &#123;</span><br><span class="line">  // 父资源的名称，例如 &quot;shelves/shelf1&quot;。</span><br><span class="line">  string parent = 1;</span><br><span class="line">  // 需要创建的资源实体，客户端不允许设置 `Book.name` 属性。</span><br><span class="line">  Book book = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么这里资源的名称字段要定义为 <code>name</code> 而不是 <code>id</code>？首先从命名上来说 <code>name</code> 本身要比 <code>id</code> 更适合作为 <code>名称</code> 一词的命名。其次，<code>name</code> 也是一个较为宽泛的词语，例如文件资源的 <code>name</code> 代表的是文件的名称还是完整的路径？通过将 <code>name</code> 作为标准字段，使得开发人员必须要选择更适合的命名，例如 <code>display_name</code>，<code>title</code> 或者 <code>full_name</code>。</p></blockquote><p>为什么不直接使用资源 <code>ID</code> 来定位资源？一个系统中往往有多个资源，单纯的资源 <code>ID</code> 不具有辨识度以及缺少上下文信息。例如，如果使用数据库表的自增主键作为资源 <code>ID</code>，则无法简单的通过数字来定位资源。如果想要通过资源 <code>ID</code> 来定位资源，则势必要扩展资源 <code>ID</code> 的定义，例如使用元组来表示资源 <code>ID</code>，如 <code>(bucket, object)</code> 用于定位某个对象存储服务的对象。不过，这也带来了几个问题：</p><ol><li>对开发人员不友好，需要额外理解和记忆（例如不同资源 <code>ID</code> 的元组元素个数不同，每个元组元素代表的含义是什么）</li><li>解析元组比解析字符串更为困难</li><li>对基础设施组件不友好，例如日志和访问控制系统无法直接理解元组</li><li>限制了 <code>API</code> 设计的灵活性，如提供可复用的 <code>API</code> 接口</li></ol><h2 id="标准方法"><a class="markdownIt-Anchor" href="#标准方法"></a> 标准方法</h2><p>标准方法的作用在于为大多数的服务场景提供统一、易用的接口，超过 70% 的 <code>Google APIs</code> 都是标准方法。<code>Google APIs</code> 设计了5种标准方法：</p><ol><li><code>List</code></li><li><code>Get</code></li><li><code>Create</code></li><li><code>Update</code></li><li><code>Delete</code></li></ol><p>下表是标准方法和 <code>HTTP</code> 请求方法的映射：</p><table><thead><tr><th>标准方法</th><th><code>HTTP</code> 请求方法映射</th><th><code>HTTP</code> 请求体</th><th><code>HTTP</code> 响应体</th></tr></thead><tbody><tr><td>List</td><td>Get &lt;资源集合 <code>URL</code>&gt;</td><td>无</td><td>资源集合</td></tr><tr><td>Get</td><td>GET &lt;资源 <code>URL</code>&gt;</td><td>无</td><td>资源</td></tr><tr><td>Create</td><td>POST &lt;资源集合 <code>URL</code>&gt;</td><td>资源</td><td>资源</td></tr><tr><td>Update</td><td>PUT 或者 PATCH &lt;资源 <code>URL</code>&gt;</td><td>资源</td><td>资源</td></tr><tr><td>Delete</td><td>DELETE &lt;资源 <code>URL</code>&gt;</td><td>无</td><td>空</td></tr></tbody></table><blockquote><p><code>HTTP</code> 响应体返回的资源可能不会包含资源的全部字段，例如客户端请求时可以指定只返回需要的字段。<br />如果 <code>Delete</code> 操作不是立即删除资源，例如只是更新资源的某个字段标记删除或者是创建一个 <a href="https://github.com/googleapis/googleapis/blob/master/google/longrunning/operations.proto">长时间运行任务</a> 来删除资源，则 <code>HTTP</code> 响应体应该包含修改后的资源或者任务信息。</p></blockquote><h3 id="list"><a class="markdownIt-Anchor" href="#list"></a> List</h3><p><code>List</code> 方法用于返回一系列同类的资源，同时该接口支持额外的参数从而允许只返回匹配的资源。它适合用于获取有限大小、未缓存的单一资源集合，对于更复杂的场景则可以考虑使用自定义方法中的 <code>Search</code> 接口。</p><p>如果想要批量获取资源，例如入参一组资源 <code>ID</code> 来返回每个资源 <code>ID</code> 所对应的资源，则应该考虑实现 <code>BatchGet</code> 的自定义方法，而不是在 <code>List</code> 方法上扩展。</p><p><code>List</code> 方法和 <code>HTTP</code> 请求的映射关系如下：</p><ul><li><code>List</code> 方法必须对应 <code>HTTP</code> 的 <code>GET</code> 请求</li><li><code>List</code> 方法的 <code>RPC</code> 请求消息体的 <code>name</code> 字段（也就是资源集合名称）应该和 <code>HTTP</code> 的请求路径匹配，如果相匹配，则 <code>HTTP</code> 请求路径的最后一个段必须是字面量（即资源集合 <code>ID</code>）</li><li><code>List</code> 方法的 <code>RPC</code> 请求消息体的其他字段应该和 <code>HTTP</code> 请求路径的查询参数相匹配</li><li>对应的 <code>HTTP</code> 请求无请求体；<code>List</code> 方法的 <code>API</code> 定义中不允许声明 <code>body</code> 语句</li><li><code>HTTP</code> 响应体应该包含一组资源及可选的元数据信息</li></ul><p>接口定义示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 获取书架上的书</span><br><span class="line">rpc ListBooks(ListBooksRequest) returns (ListBooksResponse) &#123;</span><br><span class="line">  // List 方法映射为 HTTP GET 请求</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    // parent 对应父资源的名称，如 shelves/shelf1</span><br><span class="line">    get: &quot;/v1/&#123;parent=shelves/*&#125;/books&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取书籍集合请求</span><br><span class="line">message ListBooksRequest &#123;</span><br><span class="line">  // 父资源的名称，如shelves/shelf1</span><br><span class="line">  string parent = 1;</span><br><span class="line"></span><br><span class="line">  // 返回资源的最大个数</span><br><span class="line">  int32 page_size = 2;</span><br><span class="line"></span><br><span class="line">  // 返回第几页的资源集合，其值为前一个 List 请求返回的 next_page_token 字段</span><br><span class="line">  string page_token = 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取书籍集合响应</span><br><span class="line">message ListBooksResponse &#123;</span><br><span class="line">  // 返回的书籍资源集合，该字段名应该和方法名中的 Books 相匹配。其数量上限由 ListBooksRequest 中的 page_size 决定</span><br><span class="line">  repeated Book books = 1;</span><br><span class="line"></span><br><span class="line">  // 下一页资源集合的页码信息，用于获取下一页的资源集合；没有下一页时为空</span><br><span class="line">  string next_page_token = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get"><a class="markdownIt-Anchor" href="#get"></a> Get</h3><p><code>Get</code> 方法接收一个资源名称及其他参数来返回某个指定的资源。</p><p><code>Get</code> 方法和 <code>HTTP</code> 请求的映射关系如下：</p><ul><li><code>Get</code> 方法必须对应 <code>HTTP</code> 的 <code>GET</code> 请求</li><li><code>Get</code> 方法的 <code>RPC</code> 请求消息体的 <code>name</code> 字段（也就是资源名称）应该和 <code>HTTP</code> 的请求路径匹配</li><li><code>Get</code> 方法的 <code>RPC</code> 请求消息体的其他字段应该和 <code>HTTP</code> 请求路径的查询参数相匹配</li><li>对应的 <code>HTTP</code> 请求无请求体；<code>Get</code> 方法的 <code>API</code> 定义中不允许声明 <code>body</code> 语句</li><li><code>Get</code> 方法返回的资源实体应该和 <code>HTTP</code> 的整个响应体相匹配</li></ul><p>接口定义示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 获取一本书</span><br><span class="line">rpc GetBook(GetBookRequest) returns (Book) &#123;</span><br><span class="line">  // Get 方法映射为 HTTP GET 请求，资源名称映射到请求路径，无请求体</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    // 所请求的资源名称，如 shelves/shelf1/books/book2</span><br><span class="line">    get: &quot;/v1/&#123;name=shelves/*/books/*&#125;&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取单个书籍请求</span><br><span class="line">message GetBookRequest &#123;</span><br><span class="line">  // 所请求的资源名称，如 shelves/shelf1/books/book2</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create"><a class="markdownIt-Anchor" href="#create"></a> Create</h3><p><code>Create</code> 方法接收一个父资源名称，一个资源实体，以及其他的参数来在指定的父资源下创建一个新的资源，并返回创建的资源。</p><p>如果某个 <code>API</code> 服务支持创建资源，则应当为每一类的资源创建对应的 <code>Create</code> 方法。</p><p><code>Create</code> 方法和 <code>HTTP</code> 请求的映射关系如下：</p><ul><li><code>Create</code> 方法必须对应 <code>HTTP</code> 的 <code>POST</code> 请求</li><li><code>Create</code> 方法的 <code>RPC</code> 请求消息体应当包含一个 <code>parent</code> 字段用于表示所创建的资源的父资源的名称</li><li><code>Create</code> 方法的 <code>RPC</code> 请求消息体中表示资源实体的各字段应当和 <code>HTTP</code> 请求体中的字段相对应。如果 <code>Create</code> 方法定义中标注了 <code>google.api.http</code>，则必须声明 <code>body: &quot;&lt;resource_field&gt;&quot;</code> 语句</li><li><code>Create</code> 方法的 <code>RPC</code> 请求消息体可能包含一个 <code>&lt;resource&gt;_id</code> 字段来允许调用方指定所创建的资源的 <code>id</code>。这个字段可能会包含在资源字段实体内</li><li><code>Create</code> 方法的其余参数应当和 <code>URL</code> 的查询参数相匹配</li><li><code>Create</code> 方法返回的资源实体应该和 <code>HTTP</code> 的整个响应体相匹配</li></ul><p>如果 <code>Create</code> 方法允许由调用方指定所创建的资源的名称，并且该资源已经存在，则该请求应当作失败处理并返回错误码 <code>ALREADY_EXISTS</code>；或者由服务端重新生成一个资源名称，并返回创建的资源，同时接口文档应当清晰的标注最终创建的资源的名称有可能和调用方传入的资源名称不同。</p><p><code>Create</code> 方法的 <code>RPC</code> 请求消息体中必须包含资源实体，这样当资源实体的定义发生变更时，就无需同时变更请求消息体的定义。如果资源实体中的某些字段无法由客户端设置，则必须将其标注为 <code>Output only</code> 字段。</p><p>接口定义示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 在书架上创建一本书</span><br><span class="line">rpc CreateBook(CreateBookRequest) returns (Book) &#123;</span><br><span class="line">  // Create 方法对应 HTTP 的 POST 请求，URL 请求路径为资源集合名称</span><br><span class="line">  // HTTP 请求体中包含需要创建的资源</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    // parent 对应父资源的名称，如 shelves/1</span><br><span class="line">    post: &quot;/v1/&#123;parent=shelves/*&#125;/books&quot;</span><br><span class="line">    body: &quot;book&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建书籍请求</span><br><span class="line">message CreateBookRequest &#123;</span><br><span class="line">  // 父资源名称</span><br><span class="line">  string parent = 1;</span><br><span class="line"></span><br><span class="line">  // 资源 id</span><br><span class="line">  string book_id = 3;</span><br><span class="line"></span><br><span class="line">  // 需要创建的资源</span><br><span class="line">  // 字段名称需要和 RPC 方法中的名词对应，即 book -&gt; Book</span><br><span class="line">  Book book = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建一个书架</span><br><span class="line">rpc CreateShelf(CreateShelfRequest) returns (Shelf) &#123;</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    post: &quot;/v1/shelves&quot;</span><br><span class="line">    body: &quot;shelf&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建书架请求</span><br><span class="line">message CreateShelfRequest &#123;</span><br><span class="line">  Shelf shelf = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="update"><a class="markdownIt-Anchor" href="#update"></a> Update</h3><p><code>Update</code> 方法接收一个资源实体，以及其他的参数来更新指定的资源及其属性，并返回更新后的资源。</p><p>资源的可变属性应当能够通过 <code>Update</code> 方法修改，除非该属性包含资源的名称或父资源的名称。资源重命名或者将资源移动到另一个父资源下都不允许在 <code>Update</code> 方法中实现，而应当由自定义方法来实现。</p><p><code>Update</code> 方法和 <code>HTTP</code> 请求的映射关系如下：</p><ul><li>标准的 <code>Update</code> 方法应该能够支持更新资源的部分属性，并通过 <code>update_mask</code> 字段来指明需要更新的属性，对应的 <code>HTTP</code> 请求方法为 <code>PATCH</code>。资源实体中标注为 <code>Output only</code> 的属性应该在资源更新时忽略</li><li>如果要求 <code>Update</code> 方法实现更为高级的局部更新语义则应当将其作为自定义方法来实现，例如追加新值到资源的某个列表类型的属性上</li><li>如果 <code>Update</code> 方法不支持局部属性更新，则对应的 <code>HTTP</code> 请求方法必须是 <code>PUT</code>。不过不建议 <code>Update</code> 方法仅支持全局更新，因为后续如果为资源添加新的属性则可能会有后向兼容问题</li><li><code>Update</code> 方法的 <code>RPC</code> 请求消息体中表示资源名称的字段值必须和 <code>URL</code> 中的请求路径相匹配。这个资源名称字段可能包含在资源实体内</li><li><code>Update</code> 方法的 <code>RPC</code> 请求消息体中表示资源实体的各字段必须和 <code>HTTP</code> 请求体中的字段相对应</li><li><code>Update</code> 方法的其余参数必须和 <code>URL</code> 的查询参数相匹配</li><li><code>Update</code> 方法的返回结果必须是更新后的资源实体</li></ul><blockquote><p>既然 URL 中已经有了资源名称，为什么请求体里面还要再传一遍资源名称？关于这一点不同的服务有不同的实现，例如 <code>DigitalOcean</code> 的更新接口就不要求请求体中再传一遍 <code>id</code>：<a href="https://docs.digitalocean.com/reference/api/api-reference/#operation/apps_update">Update an App</a>。</p></blockquote><blockquote><p><code>Update</code> 方法的返回结果必须是更新后的资源实体看起来是多此一举，但是某些资源的属性必须由服务端来更新，例如资源的更新时间，或者对于 <code>Git</code> 服务来说文件更新后的版本号等等，这些属性更新后也需要返回给客户端。</p></blockquote><p>如果后端服务允许客户端指定资源名称则 <code>Update</code> 方法允许客户端调用时发送一个不存在的资源名称，然后服务端会自动创建一个新的资源。否则，<code>Update</code> 方法应当作失败处理并返回 <code>NOT_FOUND</code> 的错误码（如果这是唯一的错误的话）。</p><p>即使 <code>Update</code> 方法本身支持新建资源也应当提供额外的 <code>Create</code> 方法，否则服务的使用者可能会感到迷惑。</p><p>接口定义示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 更新一本书</span><br><span class="line">rpc UpdateBook(UpdateBookRequest) returns (Book) &#123;</span><br><span class="line">  // Update 方法对应 HTTP 的 PATCH 请求，资源名称映射到请求路径</span><br><span class="line">  // 资源实体包含在 HTTP 请求体中</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    // 请求路径包含了需要更新的资源名称</span><br><span class="line">    patch: &quot;/v1/&#123;book.name=shelves/*/books/*&#125;&quot;</span><br><span class="line">    body: &quot;book&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 更新书籍请求</span><br><span class="line">message UpdateBookRequest &#123;</span><br><span class="line">  // 需要更新的书籍</span><br><span class="line">  Book book = 1;</span><br><span class="line"></span><br><span class="line">  // 指定需要更新的书籍属性，具体定义见 https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</span><br><span class="line">  FieldMask update_mask = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delete"><a class="markdownIt-Anchor" href="#delete"></a> Delete</h3><p><code>Delete</code> 方法接受一个资源名称和其他参数来删除或者计划删除某个指定的资源。<code>Delete</code> 方法返回的消息体类型应当为 <code>google.protobuf.Empty</code>。</p><p>服务调用方不应该依赖 <code>Delete</code> 方法返回的任何信息，因为 <code>Delete</code> 方法被重复调用时不一定每次都返回相同的信息。</p><p><code>Delete</code> 方法和 <code>HTTP</code> 请求的映射关系如下：</p><ul><li><code>Delete</code> 方法必须对应 <code>HTTP</code> 的 <code>DELETE</code> 请求</li><li><code>Delete</code> 方法的 <code>RPC</code> 请求消息体中表示资源名称的字段值应当和 <code>URL</code> 中的请求路径相匹配</li><li><code>Delete</code> 方法的其余参数应当和 <code>URL</code> 的查询参数相匹配</li><li>对应的 <code>HTTP</code> 请求无请求体；<code>Delete</code> 方法的 <code>API</code> 定义中不允许声明 <code>body</code> 语句</li><li>如果 <code>Delete</code> 方法在实现时是立即删除资源则该方法返回的消息体为空</li><li>如果 <code>Delete</code> 方法在实现时是创建一个 <a href="https://github.com/googleapis/googleapis/blob/master/google/longrunning/operations.proto">长时间运行任务</a> 来删除资源，则该方法返回的消息体应当为对应的任务信息</li><li>如果 <code>Delete</code> 方法在实现时仅将资源标记为删除而不是物理删除，则该方法应当返回更新后的资源</li></ul><p><code>Delete</code> 方法应当是幂等的，但并不要求每次都返回相同的信息。对同一个资源的多个 <code>Delete</code> 请求应当使得该资源（最终）被删除，不过只有第一个成功删除资源的请求应当返回相应的成功信息，其余的请求应当返回 <code>google.rpc.Code.NOT_FOUND</code> 错误码。</p><p>接口定义示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 删除一本书</span><br><span class="line">rpc DeleteBook(DeleteBookRequest) returns (google.protobuf.Empty) &#123;</span><br><span class="line">  // Delete 方法对应 HTTP 的 DELETE 请求，资源名称映射到请求路径，无 HTTP 请求体</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    // 请求路径包含了需要删除的资源名称，例如 shelves/shelf1/books/book2</span><br><span class="line">    delete: &quot;/v1/&#123;name=shelves/*/books/*&#125;&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除书籍请求</span><br><span class="line">message DeleteBookRequest &#123;</span><br><span class="line">  // 需要被删除的资源名称，如 shelves/shelf1/books/book2</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义方法"><a class="markdownIt-Anchor" href="#自定义方法"></a> 自定义方法</h2><p>标准方法提供了对资源的基础操作功能，它们的职责都较为单一，基本上对应了基础的 <code>CRUD</code> 操作。不过，并不是所有对资源的操作都能或者适合抽象为 <code>CRUD</code> 操作，这也是对于 <code>RESTful</code> 风格的服务经常争论的地方。因此，自定义方法就应运而生。</p><p>不过，对于 <code>API</code> 的设计者而言应当尽可能的首选使用标准方法，因为标准方法有着更为统一的语义，对开发者而言更为简单易懂。</p><p>自定义方法可以应用于资源，资源集合或者服务。它可能会接收任意类型的输入和返回任意类型的输出，并且支持流式的请求和响应。</p><h3 id="http-请求映射"><a class="markdownIt-Anchor" href="#http-请求映射"></a> HTTP 请求映射</h3><p>对于自定义方法来说，应当使用如下的 <code>HTTP</code> 请求映射：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://service.name/v1/some/resource/name:customVerb</span><br></pre></td></tr></table></figure><p>这里之所以选择 <code>:</code> 而不是 <code>/</code> 将 <code>name</code> 和 <code>customVerb</code> 分开是为了支持 <code>name</code> 中包含 <code>/</code> 的情况，例如将文件路径作为资源名称时则获取资源的请求可能为 <code>GET /files/a/long/file/name</code>，则撤销对该文件的删除操作所对应的自定义方法可能为 <code>POST /files/a/long/file/name:undelete</code>，如果 <code>undelete</code> 前用 <code>/</code> 分割则无法识别完整的资源名称。</p><p>自定义方法和 <code>HTTP</code> 请求的映射关系应当遵循如下规则：</p><ul><li>自定义方法应当使用 <code>HTTP</code> 请求的 <code>POST</code> 方法，除非该自定义方法是作为标准方法中的 <code>List</code> 或者 <code>Get</code> 方法的扩展，此时可以使用 <code>HTTP</code> 请求的 <code>GET</code> 方法</li><li>自定义方法不应该使用 <code>HTTP</code> 请求的 <code>PATCH</code> 方法，但是可以使用其他 <code>HTTP</code> 请求方法</li><li>对于使用 <code>HTTP</code> 请求的 <code>GET</code> 方法的自定义方法来说必须保证接口的幂等性</li><li>自定义方法的 <code>RPC</code> 请求消息体中表示资源或者资源集合名称的字段值应当和 <code>URL</code> 中的请求路径相匹配</li><li><code>HTTP</code> 请求的路径必须以 <code>:customVerb</code> 的形式结尾</li><li>如果自定义方法对应的 <code>HTTP</code> 请求方法允许 <code>HTTP</code> 请求体（如 <code>POST</code>，<code>PUT</code>，<code>PATCH</code> 或者自定义的 <code>HTTP</code> 方法），则该自定义方法的 <code>HTTP</code> 配置中必须声明 <code>body: &quot;*&quot;</code> 语句，并且 <code>RPC</code> 消息体中的剩余字段应当和 <code>HTTP</code> 请求体中的字段相匹配</li><li>如果自定义方法对应的 <code>HTTP</code> 请求方法不接受 <code>HTTP</code> 请求体（如 <code>GET</code>，<code>DELETE</code>），则该自定义方法的 <code>HTTP</code> 配置中不允许声明 <code>body</code> 语句，并且 <code>RPC</code> 消息体中的剩余字段应当和 <code>URL</code> 的查询参数相匹配</li></ul><p>接口定义示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 服务级别的自定义方法</span><br><span class="line">rpc Watch(WatchRequest) returns (WatchResponse) &#123;</span><br><span class="line">  // 对应 HTTP 的 POST 请求，所有请求参数都来自于 HTTP 的请求体</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    post: &quot;/v1:watch&quot;</span><br><span class="line">    body: &quot;*&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 资源集合级别的自定义方法</span><br><span class="line">rpc ClearEvents(ClearEventsRequest) returns (ClearEventsResponse) &#123;</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    post: &quot;/v3/events:clear&quot;</span><br><span class="line">    body: &quot;*&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 资源级别的自定义方法</span><br><span class="line">rpc CancelEvent(CancelEventRequest) returns (CancelEventResponse) &#123;</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    post: &quot;/v3/&#123;name=events/*&#125;:cancel&quot;</span><br><span class="line">    body: &quot;*&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 一个批量获取资源的自定义方法</span><br><span class="line">rpc BatchGetEvents(BatchGetEventsRequest) returns (BatchGetEventsResponse) &#123;</span><br><span class="line">  // 对应 HTTP 的 GET 请求</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    get: &quot;/v3/events:batchGet&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h3><p>以下是一些自定义方法比标准方法更适合的场景：</p><ul><li>重启一台虚拟机：其中一种反直觉的设计是在重启资源集合下创建一个重启资源，这属于生搬硬套；或者为虚拟机增加一个状态字段，重启操作就等价于资源的局部更新操作，即将虚拟机的状态由 <code>RUNNING</code> 改为 <code>RESTARTING</code>，虽然看似合理但是增加了使用人员的心智负担，例如除了这两种状态之外还有其他什么状态？另一方面也增加了接口实现的复杂度，标准方法的 <code>Update</code> 接口需要额外针对状态字段进行逻辑处理，违背了单一职责原则</li><li>批处理：对于性能敏感的场景而言，提供批处理的自定义方法比一系列独立的标准方法可能有着更好的性能</li></ul><blockquote><p>对于 <code>RESTful</code> 服务的争论中最常提到的例子就是如何使用 <code>RESTful</code> 接口表示注册/登陆？注册/登陆并不适合作为标准方法来实现，使用自定义方法会更好。一般而言，标准方法的实现应当尽量简单直白，一旦需要对标准方法扩展处理额外的逻辑，就需要考虑是否使用自定义方法更合适。</p></blockquote><h2 id="错误处理"><a class="markdownIt-Anchor" href="#错误处理"></a> 错误处理</h2><p>错误处理是 <code>RESTful</code> 又一个争论的点，即业务错误可能有很多，<code>HTTP</code> 的状态码根本不够，以及业务的状态码不应该和协议层的状态码相混淆。</p><h3 id="错误模型"><a class="markdownIt-Anchor" href="#错误模型"></a> 错误模型</h3><p><code>Google API</code> 将错误统一封装为 <a href="https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto">google.rpc.Status</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package google.rpc;</span><br><span class="line"></span><br><span class="line">// 适用于不同编程环境的统一错误模型，包括 REST 接口和 RPC 接口</span><br><span class="line">message Status &#123;</span><br><span class="line">  // 错误码，具体错误码的定义见 google.rpc.Code</span><br><span class="line">  int32 code = 1;</span><br><span class="line"></span><br><span class="line">  // 错误信息，对错误原因的描述以及可能的修复方式</span><br><span class="line">  string message = 2;</span><br><span class="line"></span><br><span class="line">  // 错误的详细信息，开发人员可以通过详细信息找到一些有用的信息</span><br><span class="line">  repeated google.protobuf.Any details = 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于大部分的 <code>Google APIs</code> 都是面向资源的设计，错误处理同样遵循了这样的设计，即使用一系列的标准错误来应对大多数的资源错误场景。例如使用标准的 <code>google.rpc.Code.NOT_FOUND</code> 错误来统一表示某个资源不存在，而不是为每一个资源定义一个 <code>SOME_RESOURCE_NOT_FOUND</code> 错误。</p><h4 id="错误码"><a class="markdownIt-Anchor" href="#错误码"></a> 错误码</h4><p><code>Google APIs</code> 必须使用 <a href="https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto">google.rpc.Code</a> 中定义的错误码，不允许独自额外定义错误码。</p><h4 id="错误信息"><a class="markdownIt-Anchor" href="#错误信息"></a> 错误信息</h4><p>错误信息应当能够帮助用户简单快速的理解和解决 <code>API</code> 错误。一般而言，描述错误信息可以遵循如下的规则：</p><ul><li>不要假设用户是你所开发的服务的专家，他们可能是客户端开发者，运维人员，<code>IT</code> 人员以及应用的终端用户</li><li>不要假设用户知晓你所开发的服务任何的实现细节，或者熟悉错误的上下文</li><li>尽可能的使得错误信息有助于技术用户（不一定是服务的开发人员）响应错误并修正</li><li>保持错误信息简洁。如果可能的话在错误信息中提供一个帮助链接，以便于用户能够提问，反馈或者查找一些有用的信息</li></ul><blockquote><p>错误信息可能会随时变动，应用开发人员不应该强依赖错误信息。</p></blockquote><h4 id="错误详情"><a class="markdownIt-Anchor" href="#错误详情"></a> 错误详情</h4><p><code>Google APIs</code> 定义了一些列标准的 <a href="https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto">错误详情</a>，这些错误详情覆盖了大部分的错误场景，例如配额分配失败以及无效的参数等等。和错误码一样，开发人员应当尽可能的优先使用标准的错误详情。</p><p>只有当错误详情有助于应用代码处理错误的情况下才应该考虑引入新的错误详情。如果当前错误只能由人工处理，则应依据错误信息由开发人员处理，而不是引入额外的错误详情。</p><p>以下是一些错误详情类型的例子：</p><ul><li><code>ErrorInfo</code>：提供稳定又可扩展的结构化错误信息</li><li><code>RetryInfo</code>：告诉客户端什么时候可以对一个失败的请求进行重试，可能随错误码 <code>Code.UNAVAILABLE</code> 或者 <code>Code.ABORTED</code> 返回</li><li><code>QuotaFailure</code>：描述为什么配额分配失败了，可能随错误码 <code>Code.RESOURCE_EXHAUSTED</code> 返回</li><li><code>BadRequest</code>：客户端请求参数非法，可能随错误码 <code>Code.INVALID_ARGUMENT</code> 返回</li></ul><h3 id="错误映射"><a class="markdownIt-Anchor" href="#错误映射"></a> 错误映射</h3><p><code>Google APIs</code> 会被不同的编程环境访问，每个环境有自己的错误处理方式，所以需要将前面描述的错误模型对各个编程环境进行适配和映射。</p><h4 id="http-映射"><a class="markdownIt-Anchor" href="#http-映射"></a> HTTP 映射</h4><p>对于 <code>HTTP</code> 接口来说，出于后向兼容性的考虑，<code>Google APIs</code> 定义了如下的错误模型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 适用于 JSON HTTP 接口的错误模型</span><br><span class="line">message Error &#123;</span><br><span class="line">  // 废弃字段，仅用于 v1 格式的错误</span><br><span class="line">  message ErrorProto &#123;&#125;</span><br><span class="line">  // 和 `google.rpc.Status 有着相同的语义，出于和 Google API Client</span><br><span class="line">  // Libraries 后向兼容的考虑多了额外的 status 和 errors 字段</span><br><span class="line">  message Status &#123;</span><br><span class="line">    // 错误码，同时也是 HTTP 状态码，对应 google.rpc.Status.code</span><br><span class="line">    int32 code = 1;</span><br><span class="line">    // 错误信息，对应 google.rpc.Status.message</span><br><span class="line">    string message = 2;</span><br><span class="line">    // 废弃字段，仅用于 v1 格式的错误</span><br><span class="line">    repeated ErrorProto errors = 3;</span><br><span class="line">    // 错误码的枚举值，对应 google.rpc.Status.code</span><br><span class="line">    google.rpc.Code status = 4;</span><br><span class="line">    // 错误详情，对应 google.rpc.Status.details</span><br><span class="line">    repeated google.protobuf.Any details = 5;</span><br><span class="line">  &#125;</span><br><span class="line">  // 实际的错误消息体，之所以要额外包一层也是出于和 Google API Client</span><br><span class="line">  // Libraries 后向兼容的考虑，同时对于开发人员来说错误信息的可读性更高</span><br><span class="line">  Status error = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;code&quot;: 400,</span><br><span class="line">    &quot;message&quot;: &quot;API key not valid. Please pass a valid API key.&quot;,</span><br><span class="line">    &quot;status&quot;: &quot;INVALID_ARGUMENT&quot;,</span><br><span class="line">    &quot;details&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;type.googleapis.com/google.rpc.ErrorInfo&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;API_KEY_INVALID&quot;,</span><br><span class="line">        &quot;domain&quot;: &quot;googleapis.com&quot;,</span><br><span class="line">        &quot;metadata&quot;: &#123;</span><br><span class="line">          &quot;service&quot;: &quot;translate.googleapis.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="grpc-映射"><a class="markdownIt-Anchor" href="#grpc-映射"></a> gRPC 映射</h4><p>不同的 <code>RPC</code> 协议有着不同的错误处理模式，对于 <code>gRPC</code> 来说，上述的错误模型在各语言自动生成的代码中已经天然支持。</p><h4 id="客户端类库映射"><a class="markdownIt-Anchor" href="#客户端类库映射"></a> 客户端类库映射</h4><p>不同的编程语言对于错误处理有着不同的准则，客户端类库会尽量去适配这些准则，例如 <code>google-cloud-go</code> 遇到错误时会返回和 <code>google.rpc.Status</code> 实现了同样接口的错误，而 <code>google-cloud-java</code> 则会直接抛出错误。</p><h3 id="错误处理-2"><a class="markdownIt-Anchor" href="#错误处理-2"></a> 错误处理</h3><p>下表列出了 <code>google.rpc.Code</code> 定义的所有错误码：</p><table><thead><tr><th>HTTP</th><th>gRPC</th></tr></thead><tbody><tr><td>200</td><td>OK</td></tr><tr><td>400</td><td>INVALID_ARGUMENT</td></tr><tr><td>400</td><td>FAILED_PRECONDITION</td></tr><tr><td>400</td><td>OUT_OF_RANGE</td></tr><tr><td>401</td><td>UNAUTHENTICATED</td></tr><tr><td>403</td><td>PERMISSION_DENIED</td></tr><tr><td>404</td><td>NOT_FOUND</td></tr><tr><td>409</td><td>ABORTED</td></tr><tr><td>409</td><td>ALREADY_EXISTS</td></tr><tr><td>429</td><td>RESOURCE_EXHAUSTED</td></tr><tr><td>499</td><td>CANCELLED</td></tr><tr><td>500</td><td>DATA_LOSS</td></tr><tr><td>500</td><td>UNKNOWN</td></tr><tr><td>500</td><td>INTERNAL</td></tr><tr><td>501</td><td>NOT_IMPLEMENTED</td></tr><tr><td>502</td><td>N/A</td></tr><tr><td>503</td><td>UNAVAILABLE</td></tr><tr><td>504</td><td>DEADLINE_EXCEEDED</td></tr></tbody></table><blockquote><p>Google APIs 可能会并发的检查 API 请求是否满足条件，返回某个错误码不代表其他条件都符合要求，应用代码不应该依赖条件检查的顺序。</p></blockquote><p>可以看到，即使是相同的 <code>HTTP</code> 状态码其代表的含义也是不同的，此时就需要 <code>status</code> 字段来进一步区分，类似于将所有错误划分几个大类，然后在每个大类中再细分小类，相比于单纯用 <code>HTTP</code> 状态码来表示不同的错误来说更加灵活，扩展性也更好。</p><p>与之相对的非 <code>RESTful</code> 做法则是 <code>HTTP</code> 状态码永远返回200，在返回的消息体中定义错误码和错误信息，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &quot;some data&quot;,</span><br><span class="line">  &quot;code&quot;: 123,</span><br><span class="line">  &quot;message&quot;: &quot;something is wrong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重试错误"><a class="markdownIt-Anchor" href="#重试错误"></a> 重试错误</h4><p>对于 <code>503 UNAVAILABLE</code> 错误客户端可以采用 <code>exponential backoff</code> 的方式进行重试，最短重试等待时间应该是1秒，以及默认重试次数应当是1次，除非文档有特别说明。</p><p>对于 <code>429 RESOURCE_EXHAUSTED</code> 错误客户端可以等待更长的时间进行重试，不过最短的等待时间应当是30秒。这种重试仅对于长时间运行任务有效。</p><p>对于其他的错误，重试可能就不太适合。</p><h4 id="错误传播"><a class="markdownIt-Anchor" href="#错误传播"></a> 错误传播</h4><p>如果当前服务依赖于其他服务，则不应该直接将其他服务的错误返回给客户端。在进行错误转换时建议：</p><ul><li>隐藏实现的细节及机密的信息</li><li>调整负责该错误的一方，例如当前服务从其他服务收到 <code>INVALID_ARGUMENT</code> 错误时则返回 <code>INTERNAL</code> 错误给客户端</li></ul><h4 id="错误重现"><a class="markdownIt-Anchor" href="#错误重现"></a> 错误重现</h4><p>如果通过日志分析和监控无法解决错误，则应该尝试通过简单、可重复的测试来重现错误。</p><h2 id="设计模式"><a class="markdownIt-Anchor" href="#设计模式"></a> 设计模式</h2><h3 id="空响应"><a class="markdownIt-Anchor" href="#空响应"></a> 空响应</h3><p>标准方法中的 <code>Delete</code> 方法应当返回 <code>google.protobuf.Empty</code>，除非 <code>Delete</code> 执行的是软删除，此时应当返回更新后的资源实体。</p><p>对于自定义方法来说，应当返回各自的 <code>XxxResponse</code> 消息体，因为即使该方法现在没有数据返回随着时间的推移有很大的可能会增加额外的字段。</p><h3 id="范围表示"><a class="markdownIt-Anchor" href="#范围表示"></a> 范围表示</h3><p>表示范围的字段应当使用左闭右开的区间，并以 <code>[start_xxx, end_xxx)</code> 的形式命名，例如 <code>[start_key, end_key)</code> 或者 <code>[start_time, end_time)</code>。<code>API</code> 应当避免其他形式的范围表示，如 <code>(index, count)</code> 或者 <code>[first, last]</code>。</p><h3 id="资源标签"><a class="markdownIt-Anchor" href="#资源标签"></a> 资源标签</h3><p>在面向资源的 <code>API</code> 设计下，资源的模式由 <code>API</code> 决定。为了让客户端能够给资源添加自定义的元数据（例如标记某台虚拟机为数据库服务器），资源定义中应当添加一个 <code>map&lt;string, string&gt; labels</code> 字段，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message Book &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">  map&lt;string, string&gt; labels = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="长时间运行操作"><a class="markdownIt-Anchor" href="#长时间运行操作"></a> 长时间运行操作</h3><p>如果某个 <code>API</code> 方法需要很长时间才能完成，则该方法应该设计成返回一个长时间运行操作资源给客户端，客户端可以通过这个资源来跟踪方法的执行进展及获取执行结果。<a href="https://github.com/googleapis/googleapis/blob/master/google/longrunning/operations.proto">Operation</a> 定义了标准的接口来处理长时间运行操作，各 <code>API</code> 不允许自行定义额外的长时间运行操作接口以避免不一致。</p><p>长时间运行操作资源必须以响应消息体的方式返回给客户端，并且该操作的任何直接结果都应该反应到其他 <code>API</code> 中。例如，如果有一个长时间运行操作用于创建资源，即使该资源未创建完成，<code>LIST</code> 和 <code>GET</code> 标准方法也应该返回该资源，只是该资源会被标记为暂未就绪。当长时间操作完成时，<code>Operation.response</code> 字段应当包含该操作的执行结果。</p><p>长时间运行操作可以通过 <code>Operation.metadata</code> 字段来反馈其运行进展。<code>API</code> 在实现时应当为 <code>Operation.metadata</code> 定义消息类型，即使在一开始的实现中不会填充 <code>metadata</code> 字段。</p><h3 id="list-方法分页"><a class="markdownIt-Anchor" href="#list-方法分页"></a> List 方法分页</h3><p>支持 <code>List</code> 方法的资源集合应当支持分页功能，即使该方法返回的结果集很小。</p><p>因为如果一开始 <code>List</code> 方法不支持分页，后续增加分页功能就会使得和原有 <code>API</code> 的行为不一致。客户端在不知道 <code>List</code> 方法使用分页的情况下依然会认为该方法返回的是完整的资源集合，而实际上有可能只是返回了第一页的资源。</p><blockquote><p>为了兼容旧的逻辑，只能将分页信息设为非必要字段。</p></blockquote><p>为了支持 <code>List</code> 方法的分页功能，<code>API</code> 应当：</p><ul><li>在 <code>List</code> 方法的请求消息中定义 <code>string</code> 类型的 <code>page_token</code> 字段。客户端通过该字段来获取指定某页的资源</li><li>在 <code>List</code> 方法的请求消息中定义 <code>int32</code> 类型的 <code>page_size</code> 字段。客户端通过该字段来指定每页返回的最大数据量。对于服务端来说，可能会为客户端传入的 <code>page_size</code> 大小设置一个上限。如果 <code>page_size</code> 的值为0，则由服务端来决定需要返回多少数据</li><li>在 <code>List</code> 方法的响应消息中定义 <code>string</code> 类型的 <code>next_page_token</code> 字段。客户端通过该字段来获取下一页的资源，如果 <code>next_page_token</code> 的值为 <code>&quot;&quot;</code>，则表示没有下一页的资源</li></ul><p>接口定义示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rpc ListBooks(ListBooksRequest) returns (ListBooksResponse);</span><br><span class="line"></span><br><span class="line">message ListBooksRequest &#123;</span><br><span class="line">  string parent = 1;</span><br><span class="line">  int32 page_size = 2;</span><br><span class="line">  string page_token = 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message ListBooksResponse &#123;</span><br><span class="line">  repeated Book books = 1;</span><br><span class="line">  string next_page_token = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有分页的实现可能会在响应消息中增加一个 <code>int32</code> 类型的 <code>total_size</code> 字段来表示资源的总个数。</p><h3 id="查询子资源集合"><a class="markdownIt-Anchor" href="#查询子资源集合"></a> 查询子资源集合</h3><p>有时候客户端可能会希望有一个 <code>API</code> 能够在多个子资源集合间查询资源。例如，某个图书馆 <code>API</code> 有一个书架的资源集合，每个书架包含一个书籍资源集合，客户端可能会希望在多个书架之间搜索某本书。这种情况建议对子资源使用标准的 <code>List</code> 方法，并使用通配符 <code>-</code> 来表示父资源集合，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://library.googleapis.com/v1/shelves/-/books?filter=xxx</span><br></pre></td></tr></table></figure><h3 id="从子资源集合获取唯一资源"><a class="markdownIt-Anchor" href="#从子资源集合获取唯一资源"></a> 从子资源集合获取唯一资源</h3><p>有时候某个子资源集合下的资源在全局父资源下有着唯一的标识符。常规的做法是需要先知道该资源的父资源的名称然后才能获取该资源，这种情况建议对该资源使用标准的 <code>Get</code> 方法，并使用通配符 <code>-</code> 来表示父资源集合。例如，如果某本书在所有的书架上有着唯一的标识符，那么可以使用如下的请求来获取该本书籍：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://library.googleapis.com/v1/shelves/-/books/&#123;id&#125;</span><br></pre></td></tr></table></figure><p>另外，该接口返回的资源名称必须是完整的，其父资源名称必须返回实际的值，而不是 <code>-</code>，例如上述的请求应该返回资源名称 <code>shelves/shelf713/books/book8141</code>，而不是 <code>shelves/-/books/book8141</code>。</p><h3 id="排序顺序"><a class="markdownIt-Anchor" href="#排序顺序"></a> 排序顺序</h3><p>如果某个 <code>API</code> 允许客户端指定资源的排序顺序，则请求消息体中应该包含一个 <code>order_by</code> 字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string order_by = ...;</span><br></pre></td></tr></table></figure><p><code>order_by</code> 应当遵循 <code>SQL</code> 语法：即使用逗号分割多个字段，例如 <code>&quot;foo,bar&quot;</code>。默认的排序规则是升序，如果需要降序排序，则应当在字段名后增加 <code>&quot; desc&quot;</code> 后缀，例如 <code>&quot;foo desc,bar&quot;</code>。</p><p>同时，字段间额外的空格是无关紧要的，例如 <code>&quot;foo,bar desc&quot;</code> 和 <code>&quot;  foo ,  bar  desc  &quot;</code> 是等价的。</p><h3 id="请求验证"><a class="markdownIt-Anchor" href="#请求验证"></a> 请求验证</h3><p>如果某个 <code>API</code> 有副作用并且需要在执行前验证请求是否有效，则请求消息体中应该包含一个 <code>validate_only</code> 字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool validate_only = ...;</span><br></pre></td></tr></table></figure><p>如果设置为 <code>true</code>，则该 <code>API</code> 收到请求时仅进行验证而不会实际执行。</p><p>如果验证通过，则必须返回 <code>google.rpc.Code.OK</code> 给客户端，并且对于任何有着相同参数的请求都不应该返回 <code>google.rpc.Code.INVALID_ARGUMENT</code> 错误。不过该 <code>API</code> 依然有可能返回其他错误例如 <code>google.rpc.Code.ALREADY_EXISTS</code>。</p><h3 id="请求去重"><a class="markdownIt-Anchor" href="#请求去重"></a> 请求去重</h3><p>对于网络 <code>API</code> 来说首选幂等的 <code>API</code>，因为当发生网络异常时可以安全的重试。不过某些 <code>API</code> 无法轻易的实现幂等，例如创建一个资源，但是又需要避免重复的请求。这种情况下请求消息体应该包含一个唯一的 <code>ID</code>，例如 <code>UUID</code> 使得服务端能够通过这个唯一的 <code>ID</code> 进行去重：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 服务端根据此唯一的 ID 进行去重</span><br><span class="line">// 该字段应当命名为 request_id</span><br><span class="line">string request_id = ...;</span><br></pre></td></tr></table></figure><p>当服务端监测到重复的请求时，服务端应当返回之前成功的相同请求的结果给客户端，因为客户端大概率没有收到之前的返回结果。</p><h3 id="枚举默认值"><a class="markdownIt-Anchor" href="#枚举默认值"></a> 枚举默认值</h3><p>每一个枚举的定义都必须以0作为起始值，当枚举值未明确时应当使用该0值，同时 <code>API</code> 文档必须标注如何处理0值。</p><p>枚举0值应当命名为 <code>ENUM_TYPE_UNSPECIFIED</code>。如果 <code>API</code> 有着通用的默认行为，则枚举值未定义时应当使用0值，否则0值应当被拒绝并返回 <code>INVALID_ARGUMENT</code> 错误。</p><p>枚举值示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enum Isolation &#123;</span><br><span class="line">  // 未定义</span><br><span class="line">  ISOLATION_UNSPECIFIED = 0;</span><br><span class="line">  // 从快照读取数据，如果当前所有的读写操作与并发执行中的事务无法做到逻辑串行执行则发生冲突</span><br><span class="line">  SERIALIZABLE = 1;</span><br><span class="line">  // 从快照读取数据，如果当前有并发执行中的事务写入到相同的行则发生冲突</span><br><span class="line">  SNAPSHOT = 2;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 当隔离级别未定义时，服务端可能会采用 SNAPSHOT 或者更优的隔离级别</span><br><span class="line">Isolation level = 1;</span><br></pre></td></tr></table></figure><p>在某些情况下可能使用某个惯用名表示枚举0值，例如 <code>google.rpc.Code.OK</code> 是错误码不存在时的默认值，它在语义上等价于 <code>UNSPECIFIED</code>。</p><h3 id="语法规则"><a class="markdownIt-Anchor" href="#语法规则"></a> 语法规则</h3><p>在某些场景下，需要为特定的数据格式定义简单的语法，例如允许接受的文本输入。为了在各 <code>API</code> 间提供一致的开发体验，<code>API</code> 设计者必须使用如下的 <code>Extended Backus-Naur Form (EBNF)</code> 的变种来定义语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Production  = name &quot;=&quot; [ Expression ] &quot;;&quot; ;</span><br><span class="line">Expression  = Alternative &#123; &quot;|&quot; Alternative &#125; ;</span><br><span class="line">Alternative = Term &#123; Term &#125; ;</span><br><span class="line">Term        = name | TOKEN | Group | Option | Repetition ;</span><br><span class="line">Group       = &quot;(&quot; Expression &quot;)&quot; ;</span><br><span class="line">Option      = &quot;[&quot; Expression &quot;]&quot; ;</span><br><span class="line">Repetition  = &quot;&#123;&quot; Expression &quot;&#125;&quot; ;</span><br></pre></td></tr></table></figure><h3 id="整数类型"><a class="markdownIt-Anchor" href="#整数类型"></a> 整数类型</h3><p>设计 <code>API</code> 时应当避免使用无符号整型例如 <code>uint32</code> 和 <code>fixed32</code>，因为某些重要的编程语言或者系统不能很好的支持无符号整型，例如 <code>Java</code>，<code>JavaScript</code> 和 <code>OpenAPI</code>，并且它们很大可能会造成整型溢出错误。另一个问题是不同的 <code>API</code> 可能将同一个值各自解析为不同的无符号整型或者带符号整型。</p><p>在某些场景下类型为带符号整型的字段值如果是负数则没有意义，例如大小，超时时间等等；<code>API</code> 设计者可能会用-1（并且只有-1）来表示特殊的含义，例如文件结束符（<code>EOF</code>），无限的超时时间，无限的配额或者未知的年龄等等。这种用法必须明确的在接口文档中标注以避免迷惑。同时 <code>API</code> 设计者也应当标注当整型数值为0时的系统行为，如果它不是非常直白明了的话。</p><h3 id="局部响应"><a class="markdownIt-Anchor" href="#局部响应"></a> 局部响应</h3><p>在某些情况下，客户端可能只希望获取资源的部分属性。<code>Google API</code> 通过 <code>FieldMask</code> 来支持这一场景。</p><p>对于任意 <code>Google API</code> 的 <code>REST</code> 接口，客户端都可以传入额外的 <code>$fields</code> 参数来表明需要获取哪些字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET https://library.googleapis.com/v1/shelves?$fields=shelves.name</span><br><span class="line">GET https://library.googleapis.com/v1/shelves/123?$fields=name</span><br></pre></td></tr></table></figure><h3 id="资源视图"><a class="markdownIt-Anchor" href="#资源视图"></a> 资源视图</h3><p>为了减少网络传输，可以允许客户端指定需要返回资源的某个视图而不是完整的资源数据，这需要在请求消息体中增加一个额外的参数，该参数要求：</p><ul><li>应该是 <code>enum</code> 类型</li><li>必须命名为 <code>view</code></li></ul><p>枚举类型的每一个值都定义了应当返回资源的哪部分数据。具体返回哪部分数据由实现决定并且应当在文档中标注。</p><p>接口定义示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package google.example.library.v1;</span><br><span class="line"></span><br><span class="line">service Library &#123;</span><br><span class="line">  rpc ListBooks(ListBooksRequest) returns (ListBooksResponse) &#123;</span><br><span class="line">    option (google.api.http) = &#123;</span><br><span class="line">      get: &quot;/v1/&#123;name=shelves/*&#125;/books&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum BookView &#123;</span><br><span class="line">  // 未定义，等同于 BASIC</span><br><span class="line">  BOOK_VIEW_UNSPECIFIED = 0;</span><br><span class="line"></span><br><span class="line">  // 默认视图，仅返回作者，标题，ISBN 和书籍 ID</span><br><span class="line">  BASIC = 1;</span><br><span class="line"></span><br><span class="line">  // 完整视图，返回书籍的全部数据，包括书籍的内容</span><br><span class="line">  FULL = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message ListBooksRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line"></span><br><span class="line">  // 指定需要返回书籍的哪个视图</span><br><span class="line">  BookView view = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端就可以通过如下的方式调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://library.googleapis.com/v1/shelves/shelf1/books?view=BASIC</span><br></pre></td></tr></table></figure><h3 id="etags"><a class="markdownIt-Anchor" href="#etags"></a> ETags</h3><p><code>ETag</code> 用于客户端进行条件请求，例如客户端获取了某个资源后将其缓存，下次再请求相同的资源时附带上之前服务端返回的 <code>ETag</code>，如果服务端判断 <code>ETag</code> 没有发生变化则无需返回完整的资源实体。为了支持 <code>ETag</code>，应当在资源定义时添加 <code>etag</code> 字段，同时其语义应当同 <code>ETag</code> 的常见用法保持一致。</p><p><code>ETag</code> 支持强校验和弱校验，弱校验时 <code>ETag</code> 的值需要添加前缀 <code>W/</code>。强校验模式下，如果两个资源有着相同的 <code>ETag</code> 则说明这两个资源的每个字节都是相同的，而且有着相同的额外字段（例如 <code>Content-Type</code>）。这表示强校验模式下获取的多个资源局部响应数据可以组合成为一个完整的资源数据。</p><p>相反的，弱校验模式下两个资源有着相同的 <code>ETag</code> 并不能说明两个资源的每一个字节都相同，因此不适合用于缓存字节范围的请求响应。</p><p>强弱 <code>ETag</code> 示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 强 ETag，包括引号</span><br><span class="line">&quot;1a2f3e4d5b6c7c&quot;</span><br><span class="line">// 弱 ETag，包括前缀和引号</span><br><span class="line">W/&quot;1a2b3c4d5ef&quot;</span><br></pre></td></tr></table></figure><p>需要注意的是，引号也是 <code>ETag</code> 的一部分，所以如果 <code>ETag</code> 在 <code>JSON</code> 中表示需要对引号进行转义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 强</span><br><span class="line">&#123; &quot;etag&quot;: &quot;\&quot;1a2f3e4d5b6c7c\&quot;&quot;, &quot;name&quot;: &quot;...&quot;, ... &#125;</span><br><span class="line">// 弱</span><br><span class="line">&#123; &quot;etag&quot;: &quot;W/\&quot;1a2b3c4d5ef\&quot;&quot;, &quot;name&quot;: &quot;...&quot;, ... &#125;</span><br></pre></td></tr></table></figure><h3 id="输出字段"><a class="markdownIt-Anchor" href="#输出字段"></a> 输出字段</h3><p>一个资源的某些字段可能不允许客户端设置而只能由服务端返回，这些字段应当需要额外标注。</p><p>需要注意的是如果仅作为输出的字段在请求消息体中设置了，或者包含在了 <code>google.protobuf.FieldMask</code> 中，服务端也必须接受该请求而不是返回错误，只不过服务端在处理时需要忽略这些输出字段。之所以要这么做是因为客户端经常会复用某个接口返回的资源，将其作为另一个接口的输入，例如客户端可能会先请求获取一个 <code>Book</code> 资源，将其修改后再调用 <code>UPDATE</code> 方法。如果服务端对输出字段进行校验，则要求客户端进行额外的处理来删除这些输出字段。</p><p>接口示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &quot;google/api/field_behavior.proto&quot;;</span><br><span class="line"></span><br><span class="line">message Book &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">  Timestamp create_time = 2 [(google.api.field_behavior) = OUTPUT_ONLY];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例资源"><a class="markdownIt-Anchor" href="#单例资源"></a> 单例资源</h3><p>当只有一个资源存在于某个父资源下（或服务，如果没有父资源的话）时，则可以使用单例资源。</p><p>标准方法的 <code>Create</code> 和 <code>Delete</code> 方法对单例资源无效，单例资源一般随着父资源的创建而创建，<br />随着父资源的删除而删除。单例资源必须通过标准方法的 <code>Get</code> 和 <code>Update</code> 方法来访问，以及其他适合的自定义方法。</p><p>例如，每一个 <code>User</code> 资源可以有一个单例的 <code>Settings</code> 资源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">rpc GetSettings(GetSettingsRequest) returns (Settings) &#123;</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    get: &quot;/v1/&#123;name=users/*/settings&#125;&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rpc UpdateSettings(UpdateSettingsRequest) returns (Settings) &#123;</span><br><span class="line">  option (google.api.http) = &#123;</span><br><span class="line">    patch: &quot;/v1/&#123;settings.name=users/*/settings&#125;&quot;</span><br><span class="line">    body: &quot;settings&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line">message Settings &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">  // 省略其他字段</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GetSettingsRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message UpdateSettingsRequest &#123;</span><br><span class="line">  Settings settings = 1;</span><br><span class="line">  // 支持局部更新</span><br><span class="line">  FieldMask update_mask = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流式半关闭"><a class="markdownIt-Anchor" href="#流式半关闭"></a> 流式半关闭</h3><p>对于任何的双向或者客户端流式 <code>API</code>，服务端应该依赖由 <code>RPC</code> 系统提供、客户端发起的半关闭来完成客户端流。没有必要额外的定义一个完成的消息。</p><p>任何在客户端发起半关闭前想要发送的消息都必须定义为请求消息体的一部分。</p><h3 id="domain-scoped-名称"><a class="markdownIt-Anchor" href="#domain-scoped-名称"></a> Domain-scoped 名称</h3><p><code>domain-scoped</code> 名称指的是添加了域名前缀的实体名称，用于避免不同服务的命名冲突。<code>Google APIs</code> 和 <code>Kubernetes APIs</code> 大量使用了 <code>domain-scoped</code> 名称：</p><ul><li><code>Protobuf</code> 的 <code>Any</code> 类型：<code>type.googleapis.com/google.protobuf.Any</code></li><li><code>Stackdriver</code> 的指标类型：<code>compute.googleapis.com/instance/cpu/utilization</code></li><li>标签的键：<code>cloud.googleapis.com/location</code></li><li><code>Kubernetes</code> 的 <code>API</code> 版本号：<code>networking.k8s.io/v1</code></li><li><code>x-kubernetes-group-version-kind</code> 的 <code>OpenAPI</code> 扩展中的 <code>kind</code> 字段</li></ul><h3 id="布尔值-vs-枚举-vs-字符串"><a class="markdownIt-Anchor" href="#布尔值-vs-枚举-vs-字符串"></a> 布尔值 vs. 枚举 vs. 字符串</h3><p>设计 <code>API</code> 时有时候会遇到需要能够启用或者禁用某个功能的场景，从实现上说可以增加一个 <code>bool</code>，<code>enum</code> 或者 <code>string</code> 类型的字段来控制，具体选择哪种类型可以遵循如下规则：</p><ul><li>如果确定只有两种状态且不希望在未来扩展时使用 <code>bool</code>，例如 <code>enable_tracing</code> 或者 <code>enable_pretty_print</code></li><li>如果希望设计更为灵活但是又不希望改动太频繁时使用 <code>enum</code>，一个评估的准则是一旦 <code>enum</code> 的值确定了，那么一年内只会改动一次或者更低频，例如 <code>enum TlsVersion</code> 或者 <code>enum HttpVersion</code></li><li><code>string</code> 有着最大的灵活性，适用于可能会频繁修改的场景，其对应的值必须清晰的在文档中标注，例如：<ul><li><a href="https://www.unicode.org/reports/tr35/#unicode_region_subtag">Unicode regions</a> 对应的 <code>string region_code</code></li><li><a href="https://www.unicode.org/reports/tr35/#Unicode_locale_identifier">Unicode locales</a> 对应的 <code>string language_code</code></li></ul></li></ul><h3 id="数据保留"><a class="markdownIt-Anchor" href="#数据保留"></a> 数据保留</h3><p>对于某些服务而言，用户数据非常重要，如果用户数据不小心被软件 <code>bug</code> 或者人为错误删除，在缺少数据保留策略和撤销删除功能的情况下，可能对业务造成灾难性的影响。</p><p>一般而言，建议为 <code>API</code> 服务设置如下的数据保留策略：</p><ul><li>对于用户的元数据，用户设置等其他重要的数据，设置30天的数据保留期。例如监控指标，项目的元数据和服务定义</li><li>对于大容量的用户数据，应该设置7天的数据保留期。例如对象存储和数据库表</li><li>对于临时的状态数据或者昂贵的存储数据，如果可行的话应该设置1天的数据保留期。例如 <code>memcache</code> 和 <code>Redis</code> 内存中的数据</li></ul><p>在数据保留期内，可以执行撤销删除的操作从而不会造成数据丢失。</p><h3 id="大型传输载荷"><a class="markdownIt-Anchor" href="#大型传输载荷"></a> 大型传输载荷</h3><p>网络 <code>API</code> 依赖分层的网络架构来传输数据，大多数的网络协议层对输入和输出的数据量设置了上限，一般而言，<code>32 MB</code> 是大多数系统中常用的大小上限。</p><p>如果某个 <code>API</code> 涉及的传输载荷超过 <code>10 MB</code>，则需要选择合适的策略以确保易用性和未来的扩展的需求。对于 <code>Google APIs</code> 来说，建议使用流式传输或者媒体上传/下载的方式来处理大型载荷，在流式传输下，服务端能够以增量同步的方式处理大量数据，例如 <code>Cloud Spanner API</code>。在媒体传输下，大量的数据流先流入到大型的存储系统中，例如 <code>Google Cloud Storage</code>，然后服务端可以异步的从存储系统中读取数据并处理，例如 <code>Google Drive API</code>。</p><h3 id="可选的基本类型字段"><a class="markdownIt-Anchor" href="#可选的基本类型字段"></a> 可选的基本类型字段</h3><p><code>Protocol Buffers v3</code> 支持 <code>optional</code> 基本类型字段，在语义上等同于众多编程语言中的 <code>nullable</code> 类型，它可以用于区分空值和未设置的值。</p><p>在实践中开发人员难以正确的处理可选字段，大多数的 <code>JSON HTTP</code> 客户端类库，包括 <code>Google API Client Libraries</code>，无法正确区分 <code>proto3</code> 的 <code>int32</code>，<code>google.protobuf.Int32Value</code> 以及 <code>optional int32</code>。如果存在一个方案更清晰而且也不需要可选的基本类型字段，则优先选择该方案。如果不使用可选的基本类型字段会造成复杂度上升或者含义不清晰，则选择可选的基本类型字段。但是不允许可选字段搭配包装类型使用。一般而言，从简洁和一致性考虑，<code>API</code> 设计者应当尽量选择基本类型字段，例如 <code>int32</code>。</p><h2 id="版本控制"><a class="markdownIt-Anchor" href="#版本控制"></a> 版本控制</h2><p><code>Google APIs</code> 借助版本控制来解决后向兼容问题。</p><p>所有的 <code>Google API</code> 接口都必须包含一个主版本号，这个主版本号会附加在 <code>protobuf</code> 包的最后，以及包含在 <code>REST APIs</code> 的 <code>URI</code> 的第一个部分中。如果 <code>API</code> 要引入一个与当前版本不兼容的变更，例如删除或者重命名某个字段，则必须增加主版本号，从而避免引用了当前版本的用户代码受到影响。</p><p>所有 <code>API</code> 的新主版本不允许依赖同 <code>API</code> 的前一个主版本。一个 <code>API</code> 本身可能会依赖其他 <code>API</code>，这要求调用方知晓被依赖的 <code>API</code> 的版本稳定性风险。在这种情况下，一个稳定版本的 <code>API</code> 必须只依赖同样是稳定版本的其他 <code>API</code>。</p><p>同一个 <code>API</code> 的不同版本在同一个客户端应用内必须能在一段合理的过渡时期内同时生效。这个过渡时期保障了客户端应用升级到新的 <code>API</code> 版本的平滑过渡。同样的，老版本的 <code>API</code> 也必须在废弃并最终停用之前留有足够的过渡时间。</p><p>对于会发布 <code>alpha</code> 或者 <code>beta</code> 版本的 <code>API</code> 来说，必须将 <code>alpha</code> 或者 <code>beta</code> 附加在主版本号之后，并且使用如下其一的策略：</p><ul><li>基于渠道的版本控制（推荐）</li><li>基于发布的版本控制</li><li>基于可见性的版本控制</li></ul><h3 id="基于渠道的版本控制"><a class="markdownIt-Anchor" href="#基于渠道的版本控制"></a> 基于渠道的版本控制</h3><p><code>stability channel</code> 是在某个稳定性级别下长期进行更新的版本。每个主版本号下的每个稳定性级别最多只有一个版本。因此，在这个策略下，每个主版本最多只有三个可用的版本：<code>alpha</code>，<code>beta</code>，以及 <code>stable</code>。</p><p><code>alpha</code> 和 <code>beta</code> 版本必须将稳定性级别附加到主版本号后，而 <code>stable</code> 则不需要也不允许。例如，<code>v1</code> 可用作为 <code>stable</code> 版本的版本号，但是 <code>v1beta</code> 和 <code>v1alpha</code> 不是。类似的，<code>v1beta</code> 或者 <code>v1alpha</code> 可用作为对应的 <code>beta</code> 和 <code>alpha</code> 版本，但是 <code>v1</code> 不行。每个版本下会对新功能进行就地更新而不会修改版本号。</p><p><code>beta</code> 版本的功能必须是 <code>stable</code> 版本的功能的超集，同时 <code>alpha</code> 版本的功能必须是 <code>beta</code> 版本的功能的超集。</p><p>对于任何版本的 <code>API</code> 来说，其中的元素（字段，消息体，RPC 方法等）都有可能被标记为废弃：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Represents a scroll. Books are preferred over scrolls.</span><br><span class="line">message Scroll &#123;</span><br><span class="line">  option deprecated = true;</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>废弃的 <code>API</code> 功能不允许从 <code>alpha</code> 版本继续保留到 <code>beta</code> 版本，也不允许从 <code>beta</code> 版本保留到 <code>stable</code> 版本。也就是说某个功能不能在任何版本中预先废弃。</p><p><code>beta</code> 版本的功能可以在废弃后经过合理的时间后删除，建议是180天。对于只存在于 <code>alpha</code> 版本的功能，不一定会标记为废弃，并且删除时也不会通知。</p><h3 id="基于发布的版本控制"><a class="markdownIt-Anchor" href="#基于发布的版本控制"></a> 基于发布的版本控制</h3><p>在该策略下，<code>alpha</code> 或者 <code>beta</code> 版本的功能在合并到 <code>stable</code> 版本之前只会在有限的时间内可用。因此，一个 <code>API</code> 在每个稳定性级别下可能有任意数量的版本发布。</p><blockquote><p>基于渠道的版本控制和基于发布的版本控制都会就地更新 <code>stable</code> 版本。</p></blockquote><p><code>alpha</code> 和 <code>beta</code> 版本发布时需要在 <code>alpha</code> 或者 <code>beta</code> 之后附加一个递增版本号，例如 <code>v1beta1</code> 或者 <code>v1alpha5</code>。<code>API</code> 应当在文档中记录这些版本的时间顺序。</p><p>每个 <code>alpha</code> 或者 <code>beta</code> 版本都有可能就地进行后向兼容的更新。对于 <code>beta</code> 版本来说，如果发布了后向不兼容的版本则应当修改 <code>beta</code> 后的版本号，然后发布新的版本。例如，如果当前版本是 <code>v1beta1</code>，则新版本为 <code>v1beta2</code>。</p><p>当 <code>alpha</code> 和 <code>beta</code> 版本中的功能合并到 <code>stable</code> 版本之后就可以终止 <code>alpha</code> 或者 <code>beta</code> 版本。<code>alpha</code> 版本可能会在任一时刻终止，但是 <code>beta</code> 版本在终止前应当给用户留有足够的过渡期，建议是180天。</p><h3 id="基于可见性的版本控制"><a class="markdownIt-Anchor" href="#基于可见性的版本控制"></a> 基于可见性的版本控制</h3><p><a href="https://github.com/googleapis/googleapis/blob/master/google/api/visibility.proto">API 可见性</a> 是 <code>Google API</code> 基础架构提供的一项高级功能。它允许 <code>API</code> 发布者将一个 <code>API</code> 对外暴露出多个不同的外部 <code>API</code> 视图，每个视图关联一个 <code>API</code> 可见性的标签，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &quot;google/api/visibility.proto&quot;;</span><br><span class="line"></span><br><span class="line">message Resource &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line"></span><br><span class="line">  // 预览功能，勿在生产环境使用</span><br><span class="line">  string display_name = 2</span><br><span class="line">    [(google.api.field_visibility).restriction = &quot;PREVIEW&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见性标签是一个区分大小写的字符串，可以绑定到任意 <code>API</code> 元素上。一般来说，可见性标签应当始终使用全大写字母。所有的 <code>API</code> 元素默认绑定 <code>PUBLIC</code> 的可见性标签，除非显式的声明了可见性。</p><p>每个可见性标签本质上是一个允许访问的列表，<code>API</code> 生产者需要授权给 <code>API</code> 消费者合适的可见性标签才能使用 <code>API</code>。换句话说，可见性标签类似于 <code>API</code> 的 <code>ACL</code>（<code>Access Control List</code>）。</p><p>每个 <code>API</code> 元素可以绑定多个可见性标签，各可见性标签之间用逗号分割（例如 <code>PREVIEW,TRUSTED_TESTER</code>）。多个可见性标签之间是逻辑或的关系，<code>API</code> 消费者只要授权了其中一个可见性标签就可以使用 <code>API</code>。</p><p>一个 <code>API</code> 请求只能使用一个可见性标签，默认使用的是授权给当前 <code>API</code> 消费者的可见性标签。客户端可以显式的指定需要用哪个可见性标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /v1/projects/my-project/topics HTTP/1.1</span><br><span class="line">Host: pubsub.googleapis.com</span><br><span class="line">Authorization: Bearer y29....</span><br><span class="line">X-Goog-Visibilities: PREVIEW</span><br></pre></td></tr></table></figure><p><code>API</code> 生产者可以借助可见性标签来实现版本控制，例如 <code>INTERNAL</code> 和 <code>PREVIEW</code>。<code>API</code> 的新功能从 <code>INTERNAL</code> 可见性标签开始，然后升级到 <code>PREVIEW</code> 可见性标签。当功能稳定可用后，就删除所有的可见性标签，即等同于默认的可见性标签 <code>PUBLIC</code>。</p><p>总体来说，<code>API</code> 的可见性比 <code>API</code> 版本号更容易实现增量的功能迭代，不过这要求比较成熟的 <code>API</code> 基础架构的支持。<code>Google Cloud APIs</code> 经常使用 <code>API</code> 可见性用于预览功能。</p><h2 id="兼容性"><a class="markdownIt-Anchor" href="#兼容性"></a> 兼容性</h2><p>这里的兼容性讨论的是对于 <code>API</code> 使用者的影响，<code>API</code> 生产者应当自身知晓为了实现兼容性需要哪方面的工作。</p><p>总的来说，<code>API</code> 的小版本更新或者补丁更新不应该对客户端造成兼容性问题。可能的不兼容问题包括：</p><ul><li>源代码兼容性：针对1.0版本编写的代码升级到1.1版本后编译失败</li><li>二进制文件兼容性：针对1.0版本编译生成的二进制文件链接到1.1版本后运行失败</li><li>通信兼容性：针对1.0版本编写的应用程序无法和运行1.1版本的服务端通信</li><li>语义兼容性：针对1.0版本编写的应用程序升级到1.1版本后能够运行，但是存在不可预知的结果</li></ul><p>从另一个角度来说，只要主版本号一致，运行着旧版本的客户端程序就能够和运行着新版本的服务端结合使用，并且客户端程序也能轻易的升级小版本。</p><h3 id="后向兼容的修改"><a class="markdownIt-Anchor" href="#后向兼容的修改"></a> 后向兼容的修改</h3><h4 id="向-api-服务添加新的接口"><a class="markdownIt-Anchor" href="#向-api-服务添加新的接口"></a> 向 API 服务添加新的接口</h4><p>从协议角度来看，添加新的接口始终是安全的。需要注意的是有可能新添加的接口名称已经被客户端代码占用了。如果当前新添加的接口与当前存在的接口完全不同，则基本不用担心；但是如果新添加的接口是当前某个存在的接口的简化版本，则有可能和客户端自定义实现的接口冲突。</p><h4 id="向-api-接口添加新的方法"><a class="markdownIt-Anchor" href="#向-api-接口添加新的方法"></a> 向 API 接口添加新的方法</h4><p>除非新添加的方法和客户端自动生成的代码中的某个方法冲突，否则这也是安全的。</p><p>例如当前已经存在了一个 <code>GetFoo</code> 方法，<code>C#</code> 的代码生成器会同时生成一个 <code>GetFooAsync</code> 的方法，如果此时再添加一个 <code>GetFooAsync</code> 方法，则会造成冲突。</p><h4 id="向已有的方法添加-http-绑定"><a class="markdownIt-Anchor" href="#向已有的方法添加-http-绑定"></a> 向已有的方法添加 HTTP 绑定</h4><p>假设绑定 <code>HTTP</code> 没有任何歧义，那么让服务端响应之前拒绝的 <code>URL</code> 就是安全的。这个操作可能在将某个已有的操作映射到某个新资源时发生。</p><h4 id="向请求消息体添加新的字段"><a class="markdownIt-Anchor" href="#向请求消息体添加新的字段"></a> 向请求消息体添加新的字段</h4><p>只要服务端在新版本的代码中处理未传入的新字段的逻辑和老版本代码中的逻辑一致，那么添加新的字段就是安全的。</p><p>一个最可能出错的场景是添加分页相关的字段：如果 <code>v1.0</code> 版本的代码中没有分页功能，那么也不能将分页功能添加到 <code>v1.1</code> 版本中，除非 <code>page_size</code> 的默认值是无限大（但这通常不是个好的设计）。否则的话依赖了 <code>v1.0</code> 版本的客户端期望一次请求获取所有的数据，但实际上可能只获取了第一页的数据。</p><h4 id="向响应消息体添加新的字段"><a class="markdownIt-Anchor" href="#向响应消息体添加新的字段"></a> 向响应消息体添加新的字段</h4><p>对于非资源类的响应消息体来说（例如 <code>ListBooksResponse</code>）添加一个字段都不会造成后向兼容性问题，只要新添加的字段不会影响其他字段的行为即可。消息体中之前暴露的字段应当继续以相同的语义保留，即使可能存在冗余。</p><p>例如，1.0版本的响应消息体中有一个字段是 <code>contained_duplicates</code> 表示返回的结果存在重复值并已经进行了去重。在1.1版本中新增了 <code>duplicate_count</code> 字段表示重复的数据数量，虽然原有的 <code>contained_duplicates</code> 已经冗余了但是该字段也必须保留。</p><h4 id="向枚举添加新值"><a class="markdownIt-Anchor" href="#向枚举添加新值"></a> 向枚举添加新值</h4><p>如果枚举是在请求消息体中使用，那么向枚举添加新值是安全的。因为客户端并不关心它们用不到的值。</p><p>对于在资源消息体或者响应消息体中的枚举，默认的假设是客户端需要能够处理未知的枚举值。不过，<code>API</code> 生产者应当知晓客户端如何正确的处理新的枚举值不是一件简单的事，因此必须在文档中标注如果客户端遇到未知的枚举值时期望的行为是什么。</p><h4 id="添加新的输出字段"><a class="markdownIt-Anchor" href="#添加新的输出字段"></a> 添加新的输出字段</h4><p>如果一个字段只可能会由服务端设置并仅作为输出使用，那么添加这个字段也是安全的。服务端可能会校验客户端发送的消息体中的字段，但是如果新添加的输出字段在请求消息体中不存在，服务端不允许抛出异常。</p><h3 id="后向不兼容的修改"><a class="markdownIt-Anchor" href="#后向不兼容的修改"></a> 后向不兼容的修改</h3><h4 id="移除或者重命名服务字段方法或者枚举值"><a class="markdownIt-Anchor" href="#移除或者重命名服务字段方法或者枚举值"></a> 移除或者重命名服务，字段，方法或者枚举值</h4><p>一般来说，移除或者重命名某个客户端代码可能引用的内容都是一次后向不兼容的修改，必须升级主版本号才能更新。对于某些编程语言来说如果引用了旧的名称则会造成编译问题（例如 <code>C#</code> 和 <code>Java</code>）或者对于另一些编程语言来说造成运行时异常或者数据丢失。</p><h4 id="更改-http-映射"><a class="markdownIt-Anchor" href="#更改-http-映射"></a> 更改 HTTP 映射</h4><p>这里的更改指的是删除然后添加。例如，假设你想将某个已经存在的方法的 <code>HTTP</code> 映射改为 <code>PATCH</code>，而目前暴露的 <code>HTTP</code> 方法是 <code>PUT</code>，你可以添加一个新的 <code>HTTP</code> 映射，但是不能删除原有的 <code>HTTP</code> 映射。</p><h4 id="更改字段类型"><a class="markdownIt-Anchor" href="#更改字段类型"></a> 更改字段类型</h4><p>即使更改后的字段类型和当前的传输格式兼容，也可能造成客户端生成的代码不兼容，因此也必须升级主版本号才能更新。对于静态编译型编程语言来说，这很容易引入编译问题。</p><h4 id="更改资源的命名格式"><a class="markdownIt-Anchor" href="#更改资源的命名格式"></a> 更改资源的命名格式</h4><p>不允许修改资源的名称，这也意味着资源集合的名称也不允许修改。</p><p>如果客户端能够在 <code>v2.0</code> 版本中访问 <code>v1.0</code> 版本中创建的资源（或者反过来），那么该资源在两个版本中就应当使用相同的资源名称。</p><p>另外，有效的资源名称集也不能修改，因为：</p><ul><li>如果集合变小，那么之前成功的请求就有可能失败</li><li>如果集合变大，那么客户端基于之前关于资源名称的假设可能失效。因为客户端很可能会根据资源名称所允许的字符和长度将其存储在其他地方，以及构建自己的资源名称验证规则</li></ul><h4 id="更改现有请求的可见行为"><a class="markdownIt-Anchor" href="#更改现有请求的可见行为"></a> 更改现有请求的可见行为</h4><p>客户端经常会依赖 <code>API</code> 的行为和语义，即使这些行为没有明确的表示支持或者在文档中说明。因此，在大多数情况下更改 <code>API</code> 的行为会造成后向不兼容问题。如果你的 <code>API</code> 的行为不是非常的隐秘，你都应该假设用户已经识别出 <code>API</code> 的行为并依赖它。</p><p>因此，加密分页功能中的页码信息就很有必要（即使该数据没有什么意义），从而防止用户自行创建页码信息，然后当页码行为更改时遭遇后向不兼容问题。</p><h4 id="更改-http-定义中的-url-格式"><a class="markdownIt-Anchor" href="#更改-http-定义中的-url-格式"></a> 更改 HTTP 定义中的 URL 格式</h4><p>除了资源名称之外，还有两个关于 <code>URL</code> 格式的修改：</p><ul><li>自定义方法的名称：虽然自定义方法名称不是资源名称的一部分，但依然是 <code>REST</code> 请求路径的一部分，虽然修改 <code>HTTP</code> 的自定义方法名称不会破坏 <code>gRPC</code> 客户端，但依然要假设存在 <code>REST</code> 客户端的用户</li><li>资源参数名称：例如从 <code>v1/shelves/&#123;shelf&#125;/books/&#123;book&#125;</code> 修改为 <code>v1/shelves/&#123;shelf_id&#125;/books/&#123;book_id&#125;</code> 不会影响资源名称，但是会影响客户端自动生成的代码</li></ul><h4 id="向资源消息体添加读写字段"><a class="markdownIt-Anchor" href="#向资源消息体添加读写字段"></a> 向资源消息体添加读/写字段</h4><p>客户端经常会执行先读，然后修改，最后写入的一整套操作，大多数情况下如果某个字段客户端用不到就不会给它赋值。虽然服务端可以采取缺失值的字段就不执行写入的措施，但不适用于基本类型的字段（包括 <code>string</code> 和 <code>bytes</code>），因为基本类型默认值的存在造成无法区分出是客户端主动设置 <code>int32</code> 类型的字段值为0还是没有设置值从而使用默认值0。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>虽然 <code>Google</code> 的这篇 <code>API</code> 设计主要是面向资源的设计，但同时也针对其不足提出了改进的方案。不管是 <code>RESTful</code> 还是非 <code>RESTful</code> 的接口设计，都只是一种规范，有各自适合的场景没有孰优孰劣，统一的规范胜过生搬硬套。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://cloud.google.com/apis/design">API design guide</a></li><li><a href="https://stackoverflow.com/questions/3715981/what-s-the-best-restful-method-to-return-total-number-of-items-in-an-object">What’s the best RESTful method to return total number of items in an object?</a></li><li><a href="https://docs.digitalocean.com/reference/api/api-reference/">DigitalOcean API (2.0)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/apis/design&quot;&gt;Google API Design Guide&lt;/</summary>
      
    
    
    
    
    <category term="Design" scheme="https://frederick-s.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>AWS EC2 监控内存使用</title>
    <link href="https://frederick-s.github.io/2022/10/09/monitor-ec2-memory-usage/"/>
    <id>https://frederick-s.github.io/2022/10/09/monitor-ec2-memory-usage/</id>
    <published>2022-10-08T16:00:00.000Z</published>
    <updated>2022-10-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>AWS</code> <code>EC2</code> 的监控页面默认没有显示内存使用率，需要搭配 <code>CloudWatch</code> 配置使用。</p><p>由于需要在 <code>EC2</code> 上安装 <code>CloudWatch agent</code> 来上报监控数据到 <code>CloudWatch</code>，所以需要先为 <code>EC2</code> 配置 <code>IAM</code> 角色来授予需要的权限。创建 <code>IAM</code> 角色时，在第一步的 <code>Trusted entity type</code> 选择 <code>AWS service</code>，<code>Use case</code> 选择 <code>EC2</code>；在第二步的 <code>Permissions policies</code> 添加 <code>CloudWatchAgentServerPolicy</code> 即可。更多细节可参考 <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/create-iam-roles-for-cloudwatch-agent-commandline.html">Create IAM roles and users for use with CloudWatch agent</a>。</p><p>接着，在 <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/download-cloudwatch-agent-commandline.html">Download and configure the CloudWatch agent using the command line</a> 中根据实际 <code>EC2</code> 的操作系统下载和安装 <code>CloudWatch agent</code>，这里以 <code>ARM64</code> 的 <code>Ubuntu</code> 系统为例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb</span><br><span class="line">sudo dpkg -i -E ./amazon-cloudwatch-agent.deb</span><br></pre></td></tr></table></figure><p>然后，为 <code>CloudWatch agent</code> 创建一个配置文件，例如 <code>cloudwatch.json</code>，写入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;metrics&quot;:&#123;</span><br><span class="line">      &quot;metrics_collected&quot;:&#123;</span><br><span class="line">         &quot;mem&quot;:&#123;</span><br><span class="line">            &quot;measurement&quot;:[</span><br><span class="line">               &quot;mem_used_percent&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;metrics_collection_interval&quot;:60</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;append_dimensions&quot;: &#123;</span><br><span class="line">        &quot;InstanceId&quot;: &quot;$&#123;aws:InstanceId&#125;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这表示每隔60秒收集一次内存使用率，接着启动 <code>CloudWatch agent</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:<span class="variable">$HOME</span>/cloudwatch.json -s</span><br></pre></td></tr></table></figure><p>可以通过 <code>amazon-cloudwatch-agent-ctl -a status</code> 来查看 <code>CloudWatch agent</code> 的状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;running&quot;,</span><br><span class="line">  &quot;starttime&quot;: &quot;2022-10-09T13:23:11+00:00&quot;,</span><br><span class="line">  &quot;configstatus&quot;: &quot;configured&quot;,</span><br><span class="line">  &quot;cwoc_status&quot;: &quot;stopped&quot;,</span><br><span class="line">  &quot;cwoc_starttime&quot;: &quot;&quot;,</span><br><span class="line">  &quot;cwoc_configstatus&quot;: &quot;not configured&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.247355.0b252062&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 <code>CloudWatch agent</code> 的状态为运行中。</p><p>如果一切正常，那么在 <code>AWS</code> 控制台中 <code>CloudWatch</code> 的 <code>All metrics</code> 下会多出一项 <code>CWAgent</code>（如果原来没有添加过的话）：</p><p><img src="/images/cloudwatch-1.png" alt="alt" /></p><p>点击进入后选择相应的 <code>EC2</code>，点击 <code>Add to graph</code>：</p><p><img src="/images/cloudwatch-2.png" alt="alt" /></p><p>在当前页面上方就会显示对应的内存使用率的监控：</p><p><img src="/images/cloudwatch-3.png" alt="alt" /></p><p>之后也可以创建一个 <code>Dashboard</code>，将这个监控加入到自定义的 <code>Dashboard</code> 中。</p><p>如果在 <code>AWS</code> 控制台没有看到 <code>CWAgent</code> 项目，那么可以查看 <code>EC2</code> 上 <code>CloudWatch agent</code> 的日志是否有异常，日志保存在 <code>/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log</code>。例如，如果忘记为 <code>EC2</code> 配置 <code>IAM</code> 角色，同时 <code>EC2</code> 上又没有其他的权限访问信息，<code>CloudWatch agent</code> 就无法上报监控数据，会提示如下类似的异常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2022-10-09T13:27:36Z E! WriteToCloudWatch failure, err:  NoCredentialProviders: no valid providers in chain</span><br><span class="line">caused by: EnvAccessKeyNotFound: failed to find credentials in the environment.</span><br><span class="line">SharedCredsLoad: failed to load profile, .</span><br><span class="line">EC2RoleRequestError: no EC2 instance role found</span><br><span class="line">caused by: EC2MetadataError: failed to make EC2Metadata request</span><br></pre></td></tr></table></figure><p>最后，如果想要添加更多的监控指标，可以参考 <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/metrics-collected-by-CloudWatch-agent.html">Metrics collected by the CloudWatch agent</a> 添加相应的指标。</p><p>参考：</p><ul><li><a href="https://lepczynski.it/en/aws_en/how-to-monitor-memory-usage-on-aws-ec2/">How to monitor memory usage on AWS EC2 ??</a></li><li><a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/download-cloudwatch-agent-commandline.html">Download and configure the CloudWatch agent using the command line</a></li><li><a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/metrics-collected-by-CloudWatch-agent.html">Metrics collected by the CloudWatch agent</a></li><li><a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/create-iam-roles-for-cloudwatch-agent-commandline.html">Create IAM roles and users for use with CloudWatch agent</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;AWS&lt;/code&gt; &lt;code&gt;EC2&lt;/code&gt; 的监控页面默认没有显示内存使用率，需要搭配 &lt;code&gt;CloudWatch&lt;/code&gt; 配置使用。&lt;/p&gt;
&lt;p&gt;由于需要在 &lt;code&gt;EC2&lt;/code&gt; 上安装 &lt;code&gt;CloudWatch </summary>
      
    
    
    
    
    <category term="AWS" scheme="https://frederick-s.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>AWS EC2 挂载磁盘</title>
    <link href="https://frederick-s.github.io/2022/09/18/add-volume-to-aws-ec2/"/>
    <id>https://frederick-s.github.io/2022/09/18/add-volume-to-aws-ec2/</id>
    <published>2022-09-17T16:00:00.000Z</published>
    <updated>2022-09-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="挂载磁盘"><a class="markdownIt-Anchor" href="#挂载磁盘"></a> 挂载磁盘</h2><p>在创建 <code>AWS</code> 的 <code>EC2</code> 实例时如果添加了额外的磁盘则需要手动挂载到系统中。</p><p>首先运行 <code>lsblk</code> 来查看可用的块设备：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NAME         MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS</span><br><span class="line">loop0          7:0    0 22.2M  1 loop /snap/amazon-ssm-agent/5657</span><br><span class="line">loop1          7:1    0   49M  1 loop /snap/core18/2406</span><br><span class="line">loop2          7:2    0 57.8M  1 loop /snap/core20/1498</span><br><span class="line">loop3          7:3    0 38.7M  1 loop /snap/snapd/15909</span><br><span class="line">loop4          7:4    0 71.8M  1 loop /snap/lxd/22927</span><br><span class="line">nvme1n1      259:0    0    8G  0 disk</span><br><span class="line">nvme0n1      259:1    0    8G  0 disk</span><br><span class="line">├─nvme0n1p1  259:2    0  7.9G  0 part /</span><br><span class="line">└─nvme0n1p15 259:3    0   99M  0 part /boot/efi</span><br></pre></td></tr></table></figure><p>其中的 <code>nvme1n1</code> 是本次新添加的磁盘，目前还未挂载到系统中，而 <code>nvme0n1</code> 则是根设备并且有两个分区。</p><blockquote><p><code>lsblk</code> 的输出结果会移除设备路径中的 <code>/dev/</code> 前缀，所以设备 <code>nvme1n1</code> 的完整路径为 <code>/dev/nvme1n1</code>。</p></blockquote><p>然后，我们需要在 <code>nvme1n1</code> 之上创建文件系统才能使用，执行 <code>sudo file -s /dev/nvme1n1</code> 显示 <code>nvme1n1</code> 还没有文件系统：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/nvme1n1: data</span><br></pre></td></tr></table></figure><p>而如果我们查看 <code>sudo file -s /dev/nvme0n1</code> 则会显示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/nvme0n1: DOS/MBR boot sector; partition 1 : ID=0xee, start-CHS (0x0,0,2), end-CHS (0x3ff,255,63), startsector 1, 16777215 sectors, extended partition table (last)</span><br></pre></td></tr></table></figure><p>执行 <code>sudo mkfs -t xfs /dev/nvme1n1</code> 来为 <code>nvme1n1</code> 创建文件系统，其中 <code>xfs</code> 表示文件系统的类型：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">meta-data=/dev/nvme1n1           isize=512    agcount=8, agsize=262144 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class="line">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class="line">data     =                       bsize=4096   blocks=2097152, imaxpct=25</span><br><span class="line">         =                       sunit=1      swidth=1 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class="line"><span class="built_in">log</span>      =internal <span class="built_in">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=1 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure><p>接着，我们就可以创建一个文件夹用来挂载磁盘，例如 <code>sudo mkdir /data</code>。最后将 <code>/dev/nvme1n1</code> 挂载到 <code>/data</code> 上：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/nvme1n1 /data</span><br></pre></td></tr></table></figure><p>此时如果查看 <code>df -h</code> 就会包含 <code>/dev/nvme1n1</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Filesystem       Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/root        7.6G  1.6G  6.1G  21% /</span><br><span class="line">tmpfs            926M     0  926M   0% /dev/shm</span><br><span class="line">tmpfs            371M 1000K  370M   1% /run</span><br><span class="line">tmpfs            5.0M     0  5.0M   0% /run/lock</span><br><span class="line">/dev/nvme0n1p15   98M  5.1M   93M   6% /boot/efi</span><br><span class="line">tmpfs            186M  4.0K  186M   1% /run/user/1000</span><br><span class="line">/dev/nvme1n1     8.0G   90M  8.0G   2% /data</span><br></pre></td></tr></table></figure><h2 id="系统启动自动挂载磁盘"><a class="markdownIt-Anchor" href="#系统启动自动挂载磁盘"></a> 系统启动自动挂载磁盘</h2><p>当前的磁盘挂载信息会在系统启动后丢失，如果希望系统启动后自动挂载磁盘则需要向 <code>/etc/fstab</code> 中添加一条记录。</p><p>安全起见先备份下 <code>/etc/fstab</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/fstab /etc/fstab.orig</span><br></pre></td></tr></table></figure><p>然后运行 <code>sudo blkid</code> 来查看设备 <code>/dev/nvme1n1</code> 的 <code>UUID</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/dev/nvme0n1p1: LABEL=<span class="string">&quot;cloudimg-rootfs&quot;</span> UUID=<span class="string">&quot;15ea47e1-ef7d-4928-9dbe-ffaf0e743653&quot;</span> BLOCK_SIZE=<span class="string">&quot;4096&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;1957f80e-a338-441c-a0e0-ed1575eefda3&quot;</span></span><br><span class="line">/dev/nvme0n1p15: LABEL_FATBOOT=<span class="string">&quot;UEFI&quot;</span> LABEL=<span class="string">&quot;UEFI&quot;</span> UUID=<span class="string">&quot;68E7-1A63&quot;</span> BLOCK_SIZE=<span class="string">&quot;512&quot;</span> TYPE=<span class="string">&quot;vfat&quot;</span> PARTUUID=<span class="string">&quot;1eeb08ab-0afd-4477-bd53-4389a42db8f6&quot;</span></span><br><span class="line">/dev/loop1: TYPE=<span class="string">&quot;squashfs&quot;</span></span><br><span class="line">/dev/loop4: TYPE=<span class="string">&quot;squashfs&quot;</span></span><br><span class="line">/dev/loop2: TYPE=<span class="string">&quot;squashfs&quot;</span></span><br><span class="line">/dev/loop0: TYPE=<span class="string">&quot;squashfs&quot;</span></span><br><span class="line">/dev/nvme1n1: UUID=<span class="string">&quot;aa81c000-325c-40b7-ba4c-598ec2c824e0&quot;</span> BLOCK_SIZE=<span class="string">&quot;512&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span></span><br><span class="line">/dev/loop3: TYPE=<span class="string">&quot;squashfs&quot;</span></span><br></pre></td></tr></table></figure><p>最后向 <code>/etc/fstab</code> 添加一条记录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=aa81c000-325c-40b7-ba4c-598ec2c824e0  /data  xfs  defaults,nofail  0  2</span><br></pre></td></tr></table></figure><p>可以通过先取消挂载 <code>/data</code> 即 <code>sudo umount /data</code> 然后再执行 <code>sudo mount -a</code> 来验证自动挂载是否生效。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html">Make an Amazon EBS volume available for use on Linux</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;挂载磁盘&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#挂载磁盘&quot;&gt;&lt;/a&gt; 挂载磁盘&lt;/h2&gt;
&lt;p&gt;在创建 &lt;code&gt;AWS&lt;/code&gt; 的 &lt;code&gt;EC2&lt;/code&gt; 实例时如果添加了额外的磁盘则需要手动挂载到系统中。&lt;</summary>
      
    
    
    
    
    <category term="AWS" scheme="https://frederick-s.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>创建 EKS 集群</title>
    <link href="https://frederick-s.github.io/2022/09/11/setup-eks-cluster/"/>
    <id>https://frederick-s.github.io/2022/09/11/setup-eks-cluster/</id>
    <published>2022-09-10T16:00:00.000Z</published>
    <updated>2022-09-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p><code>EKS</code>（<code>Amazon Elastic Kubernetes Service</code>）是 <code>AWS</code> 提供的 <code>Kubernetes</code> 服务，它能大大减轻创建和维护 <code>Kubernetes</code> 集群的负担。</p><h2 id="创建-eks-集群"><a class="markdownIt-Anchor" href="#创建-eks-集群"></a> 创建 EKS 集群</h2><p>有两种方式来创建 <code>EKS</code> 集群，一种是使用本地的 <code>eksctl</code> 程序；另一种是通过 <code>AWS</code> 的管理后台（<code>AWS Management Console</code>），这里选择通过 <code>AWS</code> 的管理后台来创建 <code>EKS</code> 集群。</p><h3 id="创建-cluster-service-role"><a class="markdownIt-Anchor" href="#创建-cluster-service-role"></a> 创建 Cluster service role</h3><p>创建 <code>EKS</code> 集群时需要绑定一个 <code>IAM</code> 角色，因为 <code>Kubernetes</code> 的 <code>control plane</code> 需要管理集群内的资源，所以需要有相应的操作权限。</p><p>首先进入 <a href="https://console.aws.amazon.com/iam/">IAM 控制台</a>，选择左侧 <code>Access management</code> 下的 <code>Roles</code>，点击 <code>Create role</code>。在 <code>Trusted entity type</code> 下选择 <code>AWS service</code>，然后在 <code>Use cases for other AWS services</code> 下选择 <code>EKS</code>，接着选择 <code>EKS - Cluster</code> 并点击 <code>Next</code>。在 <code>Add permissions</code> 这步直接点击 <code>Next</code>。在最后一步设置所创建的角色的名字，如 <code>eksClusterRole</code>，最后点击 <code>Create role</code> 创建角色。</p><h3 id="创建集群"><a class="markdownIt-Anchor" href="#创建集群"></a> 创建集群</h3><p>我们通过 <code>AWS</code> 管理后台中的 <code>Amazon Elastic Kubernetes Service</code> 界面来创建集群，第一步的 <code>Configure cluster</code> 主要设置集群的名称，如 <code>my-cluster</code>，以及绑定在之前步骤中所创建的 <code>Cluster service role</code>。第二步的 <code>Specify networking</code> 这里基本都保持默认，只是将 <code>Cluster endpoint access</code> 设置为 <code>Public and private</code>。第三步的 <code>Configure logging</code> 可以暂时不开启日志监控。最后在第四步的 <code>Review and create</code> 点击 <code>Create</code> 创建集群。</p><h2 id="创建-node-group"><a class="markdownIt-Anchor" href="#创建-node-group"></a> 创建 Node group</h2><p>当集群的状态变为 <code>Active</code> 后就表示集群创建成功，不过此时集群中还没有任何 <code>Node</code>，所以系统级别的 <code>Pod</code> 还无法正常工作，比如在集群详情的 <code>Resources</code> 下查看某个 <code>coredns</code> 的 <code>Pod</code> 会显示 <code>FailedScheduling</code>，因为 <code>no nodes available to schedule pods</code>。</p><p>我们需要创建 <code>Node group</code> 来为系统添加可用的 <code>Node</code>。</p><h3 id="创建-node-iam-role"><a class="markdownIt-Anchor" href="#创建-node-iam-role"></a> 创建 Node IAM role</h3><p>在创建 <code>Node group</code> 前，需要创建一个 <code>Node IAM role</code>。因为集群中的 <code>Node</code> 内部会运行着一个叫做 <code>kubelet</code> 的程序，它负责和集群的 <code>control plane</code> 进行通信，例如将当前 <code>Node</code> 注册到集群中，而某些操作需要调用 <code>AWS</code> 的接口，所以和 <code>Cluster service role</code> 类似，也需要绑定相应的权限。</p><p>这里同样也是通过 <a href="https://console.aws.amazon.com/iam/">IAM 控制台</a> 来创建角色，在 <code>Trusted entity type</code> 下选择 <code>AWS service</code>，在 <code>Use case</code> 下选择 <code>EC2</code>，然后点击 <code>Next</code>。在第二步的 <code>Add permissions</code> 需要添加 <code>AmazonEKSWorkerNodePolicy</code>，<code>AmazonEC2ContainerRegistryReadOnly</code> 和 <code>AmazonEKS_CNI_Policy</code> 三个权限，虽然文档中说不建议将 <code>AmazonEKS_CNI_Policy</code> 权限添加到 <code>Node IAM role</code> 上，不过这里作为示例教程将三个权限都绑定在了 <code>Node IAM role</code> 上。最后也是点击 <code>Create role</code> 创建角色。</p><h3 id="创建-node-group-2"><a class="markdownIt-Anchor" href="#创建-node-group-2"></a> 创建 Node group</h3><p>在集群详情的 <code>Compute</code> 下点击 <code>Add node group</code> 来创建 <code>Node group</code>，在第一步 <code>Configure node group</code> 中设置 <code>node group</code> 的名称及绑定在之前步骤中所创建的 <code>Node IAM role</code>。在第二步 <code>Set compute and scaling configuration</code> 里配置节点的类型和数量等信息，作为教程都采用默认配置。第三步 <code>Specify networking</code> 同样采用默认配置。最后在第四步的 <code>Review and create</code> 点击 <code>Create</code> 完成创建。</p><p>最后当所创建的 <code>Node group</code> 的状态变为 <code>Active</code> 以及该 <code>Node group</code> 下的 <code>Node</code> 的状态变为 <code>Ready</code> 时说明节点创建成功。此时再查看集群详情下 <code>Resources</code> 的 <code>coredns</code> 的 <code>Pod</code> 已成功分配了 <code>Node</code> 运行。</p><h2 id="连接-eks-集群"><a class="markdownIt-Anchor" href="#连接-eks-集群"></a> 连接 EKS 集群</h2><p>日常需要通过 <code>kubectl</code> 管理集群，所以需要先在本地配置访问 <code>EKS</code> 集群的权限。<code>kubectl</code> 本质上是和 <code>Kubernetes API server</code> 打交道，而创建集群时 <code>Cluster endpoint access</code> 部分选择的是 <code>Public and private</code>，所以在这个场景下能够从公网管理 <code>EKS</code> 集群。</p><p>首先需要安装 <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">AWS CLI</a> 和 <a href="https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html">kubectl</a>。然后在本地通过 <code>aws configure</code> 来设置 <code>AWS Access Key ID</code> 和 <code>AWS Secret Access Key</code>。根据 <a href="https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html">Enabling IAM user and role access to your cluster</a> 的描述，创建集群的账户会自动授予集群的 <code>system:masters</code> 权限，本文是通过 <code>AWS</code> 的管理后台创建集群，当前登录的账户为 <code>root</code>，所以 <code>aws configure</code> 需要设置为 <code>root</code> 的 <code>AWS Access Key ID</code> 和 <code>AWS Secret Access Key</code>：</p><blockquote><p>When you create an Amazon EKS cluster, the AWS Identity and Access Management (IAM) entity user or role, such as a federated user that creates the cluster, is automatically granted system:masters permissions in the cluster’s role-based access control (RBAC) configuration in the Amazon EKS control plane.</p></blockquote><p>一般公司生产环境中的 <code>AWS</code> 是不会直接使用 <code>root</code> 账户登录的，而是创建 <code>IAM</code> 用户，由于这里是个人的 <code>AWS</code> 账户所以直接使用了 <code>root</code>，反之就需要使用 <code>IAM</code> 用户的 <code>AWS Access Key ID</code> 和 <code>AWS Secret Access Key</code>。设置完成之后可以通过 <code>aws sts get-caller-identity</code> 来验证当前用户是否设置正确：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;UserId&quot;: &quot;123&quot;,</span><br><span class="line">    &quot;Account&quot;: &quot;123&quot;,</span><br><span class="line">    &quot;Arn&quot;: &quot;arn:aws:iam::123:user&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行 <code>aws eks update-kubeconfig --region us-west-2 --name my-cluster</code> 来更新本地的 <code>kubeconfig</code>，其中 <code>us-west-2</code> 需要修改为实际的 <code>AWS Region</code>，<code>my-cluster</code> 需要修改为实际的集群名称。最后就可以通过 <code>kubectl get all</code> 来验证能否访问集群，如果没有问题就会输出如下类似内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/kubernetes   ClusterIP   10.100.0.1   &lt;none&gt;        443/TCP   175m</span><br></pre></td></tr></table></figure><h2 id="设置其他用户的集群访问权限"><a class="markdownIt-Anchor" href="#设置其他用户的集群访问权限"></a> 设置其他用户的集群访问权限</h2><p>创建集群的账户可能权限较高，所以需要单独给某些账户开通集群的访问权限。可以通过 <code>kubectl describe -n kube-system configmap/aws-auth</code> 查看当前的权限分配情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Name:         aws-auth</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">mapRoles:</span><br><span class="line">----</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers</span><br><span class="line">  - system:nodes</span><br><span class="line">  rolearn: arn:aws:iam::123:role/AmazonEKSNodeRole</span><br><span class="line">  username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BinaryData</span><br><span class="line">====</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><p>假设我们需要授予某个 <code>IAM</code> 用户 <code>eks</code> <code>system:masters</code> 的角色，首先运行 <code>kubectl edit -n kube-system configmap/aws-auth</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Please edit the object below. Lines beginning with a &#x27;#&#x27; will be ignored,</span><br><span class="line"># and an empty file will abort the edit. If an error occurs while saving this file will be</span><br><span class="line"># reopened with the relevant failures.</span><br><span class="line">#</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  mapRoles: |</span><br><span class="line">    - groups:</span><br><span class="line">      - system:bootstrappers</span><br><span class="line">      - system:nodes</span><br><span class="line">      rolearn: arn:aws:iam::123:role/AmazonEKSNodeRole</span><br><span class="line">      username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span><br><span class="line">  mapUsers: |</span><br><span class="line">    - groups:</span><br><span class="line">      - system:masters</span><br><span class="line">      userarn: arn:aws:iam::123:user/eks</span><br><span class="line">      username: eks</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2022-09-11T06:33:38Z&quot;</span><br><span class="line">  name: aws-auth</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: &quot;33231&quot;</span><br><span class="line">  uid: 6b186686-548c-4c99-9f65-0381da1366a4</span><br></pre></td></tr></table></figure><p>这里在 <code>data</code> 下新增了 <code>mapUsers</code>，授予用户 <code>eks</code> <code>system:masters</code> 的角色：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mapUsers: |</span><br><span class="line">  - groups:</span><br><span class="line">    - system:masters</span><br><span class="line">    userarn: arn:aws:iam::123:user/eks</span><br><span class="line">    username: eks</span><br></pre></td></tr></table></figure><p>保存后可以通过 <code>kubectl describe configmap -n kube-system aws-auth</code> 验证改动是否生效。然后下载 <code>aws-auth-cm.yaml</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o aws-auth-cm.yaml https://s3.us-west-2.amazonaws.com/amazon-eks/cloudformation/2020-10-29/aws-auth-cm.yaml</span><br></pre></td></tr></table></figure><p>将其中的 <code>&lt;ARN of instance role (not instance profile)&gt;</code> 替换为之前创建的 <code>Node IAM role</code>，然后执行 <code>kubectl apply -f aws-auth-cm.yaml</code> 应用修改，执行 <code>kubectl get nodes --watch</code> 观察是否所有的节点的状态都变为了 <code>Ready</code>。</p><p>接着删除本地的 <code>~/.kube/config</code> 来验证权限是否生效。重新运行 <code>aws configure</code> 来设置某个 <code>IAM</code> 用户的信息，因为我们要重新执行 <code>aws eks update-kubeconfig --region us-west-2 --name my-cluster</code> 来生成新的 <code>~/.kube/config</code>，这里要求当前 <code>IAM</code> 用户拥有 <code>DescribeCluster</code> 的权限，这个权限是 <code>AWS</code> 层面的资源访问权限，而不是 <code>EKS</code> 集群的权限，添加权限后可能需要等待几分钟才会生效。当重新生成了 <code>~/.kube/config</code> 文件之后，就可以继续通过 <code>kubectl get all</code> 验证访问权限是否生效。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html#create-service-role">Creating the Amazon EKS cluster role</a></li><li><a href="https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html#create-worker-node-role">Creating the Amazon EKS node IAM role</a></li><li><a href="https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html">Enabling IAM user and role access to your cluster</a></li><li><a href="https://stackoverflow.com/questions/50791303/kubectl-error-you-must-be-logged-in-to-the-server-unauthorized-when-accessing">kubectl error You must be logged in to the server (Unauthorized) when accessing EKS cluster</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;EKS&lt;/code&gt;（&lt;code&gt;Amazon Elastic Kubernetes Service&lt;/code&gt;）是 &lt;code&gt;</summary>
      
    
    
    
    
    <category term="Kubernetes" scheme="https://frederick-s.github.io/tags/Kubernetes/"/>
    
    <category term="AWS" scheme="https://frederick-s.github.io/tags/AWS/"/>
    
    <category term="EKS" scheme="https://frederick-s.github.io/tags/EKS/"/>
    
  </entry>
  
  <entry>
    <title>Hello Minikube - Apple M1 Max connection reset</title>
    <link href="https://frederick-s.github.io/2022/09/01/hello-minikube-connection-reset-on-apple-m1-max/"/>
    <id>https://frederick-s.github.io/2022/09/01/hello-minikube-connection-reset-on-apple-m1-max/</id>
    <published>2022-08-31T16:00:00.000Z</published>
    <updated>2022-08-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>Apple M1 Max</code> 处理器上按照 <a href="https://kubernetes.io/docs/tutorials/hello-minikube/">Hello Minikube</a> 进行 <code>minikube</code> 的入门教程，不过最后通过本地链接访问的时候出现了 <code>connection reset</code>。按照 <a href="https://github.com/kubernetes/minikube/issues/12036">这里</a> 的描述需要将镜像由 <code>echoserver:1.4</code> 换成适用于 <code>Apple M1 Max</code> 的 <code>echoserver-arm:1.8</code>，即：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment hello-arm --image=registry.k8s.io/echoserver-arm:1.8</span><br></pre></td></tr></table></figure><p>不过帖子中也有人提到换了镜像之后依然无效，所以也不一定对所有人有用。</p><p>参考：</p><ul><li><a href="https://github.com/kubernetes/minikube/issues/12036">Cannot connect to service from localhost on M1 Mac</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;code&gt;Apple M1 Max&lt;/code&gt; 处理器上按照 &lt;a href=&quot;https://kubernetes.io/docs/tutorials/hello-minikube/&quot;&gt;Hello Minikube&lt;/a&gt; 进行 &lt;code&gt;minikube&lt;/c</summary>
      
    
    
    
    
    <category term="Kubernetes" scheme="https://frederick-s.github.io/tags/Kubernetes/"/>
    
    <category term="minikube" scheme="https://frederick-s.github.io/tags/minikube/"/>
    
  </entry>
  
  <entry>
    <title>Buddy Memory Allocation</title>
    <link href="https://frederick-s.github.io/2022/07/03/buddy-memory-allocation/"/>
    <id>https://frederick-s.github.io/2022/07/03/buddy-memory-allocation/</id>
    <published>2022-07-02T16:00:00.000Z</published>
    <updated>2022-07-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p><code>Buddy Memory Allocation</code> 是内存分配算法的一种，它假定内存的大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">2^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span>（<code>N</code> 为整数），并且总是以2的幂次方为单位分配或者释放内存。</p><h2 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h2><p>假设某个线程需要申请 <code>m</code> 字节内存，<code>Buddy Memory Allocation</code> 会先在当前所有的空闲空间中找到最小的空间满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>≥</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">2^k \geq m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.985078em;vertical-align:-0.13597em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>，如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>的一半依然大于等于 <code>m</code>，说明当前分配的空间过大，则继续将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>对半分（分裂后的这两块内存区域就成为了互为兄弟关系（<code>buddies</code>）），不断重复上述操作，直到找到最小的 <code>p</code>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>≤</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">p \leq k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>）满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>&lt;</mo><mi>m</mi><mo>≤</mo><msup><mn>2</mn><mi>p</mi></msup></mrow><annotation encoding="application/x-tex">2^{p - 1} &lt; m \leq 2^p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span></span></span></span>。</p><p>下图描述了从16字节中分配3字节的过程（假设系统总共只有16字节内存）：</p><ol><li>初始状态整个内存只有16字节，是可分配的最小空间；不过由于16字节的一半大于3字节，所以将16字节拆分为两个8字节</li><li>同理一个8字节的一半依然大于3字节，继续将其中一个8字节拆分为两个4字节</li><li>4字节的一半比3字节小，所以4字节就是可分配的最小内存空间</li></ol><p><img src="/images/buddy-1.png" alt="alt" /></p><p>当某个线程需要释放<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>的内存时，<code>Buddy Memory Allocation</code> 会尝试将这个内存空间及其相邻的兄弟空间一起合并得到一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{k + 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>大小的空间，然后一直重复此操作，直到某块内存空间无法和其兄弟空间合并，无法合并的情况有三种：</p><ol><li>当前分配的内存空间大小为整个内存空间的大小，所以也就没有兄弟空间</li><li>兄弟空间已全部分配</li><li>兄弟空间已局部分配</li></ol><p>下图描述了从16字节中释放3字节的过程（假设系统总共只有16字节内存）：</p><ol><li>当前系统分配了一个2字节的空间和一个4字节的空间</li><li>此时需要回收被占用的2字节，由于它的兄弟空间没有被占用，所以两个2字节的空间合并为一个4字节的空间</li><li>合并后的4字节的空间的兄弟空间同样没有被占用，两个4字节的空间继续合并为1个8字节的空间</li><li>合并后的8字节的空间的兄弟空间存在部分占用，无法继续合并</li></ol><p><img src="/images/buddy-2.png" alt="alt" /></p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><h3 id="内存"><a class="markdownIt-Anchor" href="#内存"></a> 内存</h3><p>首先定义一个 <code>Memory</code> 类来表示内存，其内部使用一个 <code>byte</code> 数组来存储数据，数组的索引就是内存地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] memory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Memory</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;size should be greater than zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.memory = <span class="keyword">new</span> <span class="title class_">byte</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，<code>Memory</code> 类还支持 <code>bool</code> 和 <code>int32</code> 类型的数据读写，从实现的简化考虑，<code>bool</code> 值的读写以一个 <code>byte</code> 为单位；而 <code>int32</code> 的读写以4个 <code>byte</code> 为单位：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在给定的地址设置布尔值，占据一字节</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBool</span><span class="params">(<span class="type">int</span> address, <span class="type">boolean</span> value)</span> &#123;</span><br><span class="line">    checkAddress(address);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.memory[address] = value ? (<span class="type">byte</span>) <span class="number">1</span> : (<span class="type">byte</span>) <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据给定的地址读取布尔值，读取一字节</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getBool</span><span class="params">(<span class="type">int</span> address)</span> &#123;</span><br><span class="line">    checkAddress(address);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.memory[address] == (<span class="type">byte</span>) <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在给定的地址设置 int32，占据4字节</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInt32</span><span class="params">(<span class="type">int</span> address, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    checkAddress(address);</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] bytes = ByteBuffer.allocate(Constant.INT32_SIZE).putInt(value).array();</span><br><span class="line">    setByteArray(address, bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据给定的地址读取 int32，读取4字节</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInt32</span><span class="params">(<span class="type">int</span> address)</span> &#123;</span><br><span class="line">    checkAddress(address);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (address + Constant.INT32_SIZE &gt; <span class="built_in">this</span>.memory.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;address overflow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[Constant.INT32_SIZE];</span><br><span class="line"></span><br><span class="line">    System.arraycopy(<span class="built_in">this</span>.memory, address, bytes, <span class="number">0</span>, Constant.INT32_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ByteBuffer.wrap(bytes).getInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="block"><a class="markdownIt-Anchor" href="#block"></a> Block</h3><p>定义 <code>Block</code> 表示系统所分配的内存块，其中 <code>address</code> 表示该 <code>Block</code> 的起始内存地址，同时 <code>Block</code> 借助 <code>Memory</code> 对内存实现读写操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Block</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">(<span class="type">int</span> address, Memory memory)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (address &lt; <span class="number">0</span> || address &gt;= memory.getSize()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;invalid address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Objects.requireNonNull(memory, <span class="string">&quot;memory should not be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图展示了一个 <code>Block</code> 在内存中的布局：</p><p><img src="/images/buddy-3.png" alt="alt" /></p><p>一个 <code>Block</code> 除了包含用户数据外还需要保存元数据，所以每个 <code>Block</code> 占据的内存会大于用户实际申请的内存；元数据中的第一个字节表示当前内存块是否被使用；第2到5字节表示 <code>sizeClass</code>，用来计算当前内存块所占据的内存的大小，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{sizeClass}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">s</span></span></span></span></span></span></span></span></span></span></span></span>；第6到9字节表示前一个空闲内存块的地址；第10到13字节表示后一个空闲内存块的地址；从第14字节开始就是用户数据。当然，这只是一种很粗犷的布局方式，实际应用中的布局必然比这个精炼。</p><p>这里需要前一个/后一个空闲内存块的地址是因为将相同大小的内存块通过双向链表的方式串联在一起，从而能快速找到以及删除某个指定大小的内存块。因为 <code>Buddy Memory Allocation</code> 始终以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>大小分配内存，假设系统的最大内存为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">2^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span>，则可以建立 <code>N</code> 个双向链表，每个双向链表表示当前大小下可用的内存块，如下图所示：</p><p><img src="/images/buddy-4.png" alt="alt" /></p><p><code>Block</code> 通过 <code>Memory</code> 类提供的 <code>bool</code>，<code>int32</code> 数据的读写功能来实现对元数据的读写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 block 标记为已使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsed</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.memory.setBool(<span class="built_in">this</span>.address, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前 block 是否已使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUsed</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.memory.getBool(<span class="built_in">this</span>.address);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放当前 block</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFree</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.memory.setBool(<span class="built_in">this</span>.address, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 sizeClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSizeClass</span><span class="params">(<span class="type">int</span> sizeClass)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.memory.setInt32(<span class="built_in">this</span>.address + Constant.OFFSET_SIZE_CLASS, sizeClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前 block 的 sizeClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSizeClass</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.memory.getInt32(<span class="built_in">this</span>.address + Constant.OFFSET_SIZE_CLASS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置前一个空闲的 block</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrev</span><span class="params">(Block block)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.memory.setInt32(<span class="built_in">this</span>.address + Constant.OFFSET_PREV, block.getAddress());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取前一个空闲的 block</span></span><br><span class="line"><span class="keyword">public</span> Block <span class="title function_">getPrev</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">address</span> <span class="operator">=</span> <span class="built_in">this</span>.memory.getInt32(<span class="built_in">this</span>.address + Constant.OFFSET_PREV);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> address == -<span class="number">1</span> ? <span class="literal">null</span> : <span class="keyword">new</span> <span class="title class_">Block</span>(address, <span class="built_in">this</span>.memory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置后一个空闲的 block</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Block block)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.memory.setInt32(<span class="built_in">this</span>.address + Constant.OFFSET_NEXT, block.address);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取后一个空闲的 block</span></span><br><span class="line"><span class="keyword">public</span> Block <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">address</span> <span class="operator">=</span> <span class="built_in">this</span>.memory.getInt32(<span class="built_in">this</span>.address + Constant.OFFSET_NEXT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> address == -<span class="number">1</span> ? <span class="literal">null</span> : <span class="keyword">new</span> <span class="title class_">Block</span>(address, <span class="built_in">this</span>.memory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="blocklist"><a class="markdownIt-Anchor" href="#blocklist"></a> BlockList</h3><p><code>BlockList</code> 表示一个双向链表，用于存储某个 <code>sizeClass</code> 下的所有空闲内存块，为了实现方便，内部使用了一个哨兵头节点来作为双向链表的头节点，新节点的插入采用头插法的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> buddy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Block head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> sizeClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlockList</span><span class="params">(<span class="type">int</span> address, Memory memory, <span class="type">int</span> sizeClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (address &lt; <span class="number">0</span> || address &gt;= memory.getSize()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;invalid address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Objects.requireNonNull(memory, <span class="string">&quot;memory cannot be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sizeClass &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;invalid sizeClass&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Block</span>(address, memory);</span><br><span class="line">        <span class="built_in">this</span>.head.setSizeClass(sizeClass);</span><br><span class="line">        <span class="built_in">this</span>.sizeClass = sizeClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空列表，将头节点指向自身</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head.setNext(<span class="built_in">this</span>.head);</span><br><span class="line">        <span class="built_in">this</span>.head.setPrev(<span class="built_in">this</span>.head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列表是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.head.getNext().equals(<span class="built_in">this</span>.head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取头节点的后一个节点</span></span><br><span class="line">    <span class="keyword">public</span> Block <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;list must not be empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.head.getNext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头插法插入一个 block</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFront</span><span class="params">(Block block)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head.insertAfter(block);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前列表是否有空闲的内存块，以及该内存块是否能容纳 size 大小的数据（减去元数据占用的内存大小后）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAvailableBlock</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">this</span>.isEmpty() &amp;&amp; Block.getActualSize(<span class="built_in">this</span>.sizeClass) &gt;= size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有空闲内存块的数量，不包含哨兵头节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Block</span> <span class="variable">block</span> <span class="operator">=</span> <span class="built_in">this</span>.head.getNext();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!block.equals(<span class="built_in">this</span>.head)) &#123;</span><br><span class="line">            length += <span class="number">1</span>;</span><br><span class="line">            block = block.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于需要通过哨兵头节点访问下一个可用的内存块，所以每个哨兵头节点就需要知道下一个 <code>Block</code> 的内存起始地址，因此同样需要将哨兵头节点的信息保存在内存中，对于内存大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">2^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span>的系统来说，一共需要保存 <code>N</code> 个哨兵头节点的信息，这里将内存分为两部分，前一部分保存所有的哨兵头节点，后一部分保存所有的 <code>Block</code>：</p><p><img src="/images/buddy-5.png" alt="alt" /></p><p>因此第一个 <code>Block</code> 的内存起始位置也就等于所有哨兵节点的大小之和。</p><h3 id="内存管理"><a class="markdownIt-Anchor" href="#内存管理"></a> 内存管理</h3><h4 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h4><p>定义 <code>Allocator</code> 负责内存的分配和回收，本质上是对 <code>Block</code> 的管理，即 <code>Block</code> 的分裂和合并：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Allocator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockList[] blockLists;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_SIZE_CLASS</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_SIZE_CLASS</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Allocator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">allHeadSentinelSize</span> <span class="operator">=</span> <span class="built_in">this</span>.getMemoryOffset();</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxMemorySize</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; MAX_SIZE_CLASS) + allHeadSentinelSize;</span><br><span class="line">        <span class="built_in">this</span>.memory = <span class="keyword">new</span> <span class="title class_">Memory</span>(maxMemorySize);</span><br><span class="line">        <span class="built_in">this</span>.blockLists = <span class="keyword">new</span> <span class="title class_">BlockList</span>[MAX_SIZE_CLASS];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化空闲列表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MAX_SIZE_CLASS; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sizeClass</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">headSentinelAddress</span> <span class="operator">=</span> Constant.HEAD_SENTINEL_SIZE * i;</span><br><span class="line">            <span class="built_in">this</span>.blockLists[i] = <span class="keyword">new</span> <span class="title class_">BlockList</span>(headSentinelAddress, <span class="built_in">this</span>.memory, sizeClass);</span><br><span class="line">            <span class="built_in">this</span>.blockLists[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The single full block</span></span><br><span class="line">        <span class="type">Block</span> <span class="variable">block</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(allHeadSentinelSize, <span class="built_in">this</span>.memory);</span><br><span class="line">        block.setSizeClass(MAX_SIZE_CLASS);</span><br><span class="line">        block.setFree();</span><br><span class="line">        <span class="built_in">this</span>.blockLists[MAX_SIZE_CLASS - <span class="number">1</span>].insertFront(block);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们假设系统最大能支持的内存大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding="application/x-tex">2^{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span>个字节，由于哨兵节点也需要占用一部分内存，所以在构造函数中初始化 <code>Memory</code> 的大小为所有哨兵节点占用的内存大小加上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding="application/x-tex">2^{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span> 个字节。同时，系统可分配的 <code>Block</code> 的大小分别为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">2^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，…，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding="application/x-tex">2^{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span>，对应需要初始化16个双向链表，这里简单的使用数组来保存这16个双向链表，并初始化对应哨兵头节点的内存起始地址。同时，整个系统在初始状态只有一个 <code>Block</code>，大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding="application/x-tex">2^{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span>。</p><h4 id="内存分配"><a class="markdownIt-Anchor" href="#内存分配"></a> 内存分配</h4><p>如前面所述，内存分配的第一步是找到满足用户内存需求的最小的 <code>Block</code>，然后如果 <code>Block</code> 过大则继续将 <code>Block</code> 进行分裂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">alloc</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="type">Block</span> <span class="variable">block</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MAX_SIZE_CLASS; i++) &#123;</span><br><span class="line">        <span class="type">BlockList</span> <span class="variable">blockList</span> <span class="operator">=</span> <span class="built_in">this</span>.blockLists[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到满足用户内存需求的最小的 Block</span></span><br><span class="line">        <span class="keyword">if</span> (!blockList.hasAvailableBlock(size)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        block = blockList.getFirst();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试将 block 分裂</span></span><br><span class="line">        block = <span class="built_in">this</span>.split(block, size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 block 标记为已使用</span></span><br><span class="line">        block.setUsed();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (block == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;memory is full&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里没有返回 block 的起始地址，因为 block 的起始地址指向的是元数据，实际需要返回用户数据的起始地址</span></span><br><span class="line">    <span class="keyword">return</span> block.getUserAddress();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 Block 分裂（如果能分裂的话），返回分裂后的左兄弟</span></span><br><span class="line"><span class="keyword">private</span> Block <span class="title function_">split</span><span class="params">(Block block, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sizeClass</span> <span class="operator">=</span> block.getSizeClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只要 block 的一半（减去元数据占据的空间后）仍能容纳 size，则持续将 block 分裂</span></span><br><span class="line">    <span class="comment">// 由于 block 本身需要存储元数据，每个 block 至少需要 2^MIN_SIZE_CLASS 字节</span></span><br><span class="line">    <span class="keyword">while</span> (sizeClass &gt; MIN_SIZE_CLASS &amp;&amp; Block.getActualSize(sizeClass - <span class="number">1</span>) &gt;= size) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newSizeClass</span> <span class="operator">=</span> sizeClass - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 block 分裂为两个，取第一个继续分裂</span></span><br><span class="line">        Block[] buddies = <span class="built_in">this</span>.splitToBuddies(block, newSizeClass);</span><br><span class="line">        block = buddies[<span class="number">0</span>];</span><br><span class="line">        sizeClass = newSizeClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 block 从空闲链表中删除</span></span><br><span class="line">    block.removeFromList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Block[] splitToBuddies(Block block, <span class="type">int</span> sizeClass) &#123;</span><br><span class="line">    block.removeFromList();</span><br><span class="line">    Block[] buddies = <span class="keyword">new</span> <span class="title class_">Block</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 更新分裂后的 block 的起始地址和 sizeClass，并标记为可用</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">address</span> <span class="operator">=</span> block.getAddress() + (<span class="number">1</span> &lt;&lt; sizeClass) * i;</span><br><span class="line">        buddies[i] = <span class="keyword">new</span> <span class="title class_">Block</span>(address, <span class="built_in">this</span>.memory);</span><br><span class="line">        buddies[i].setFree();</span><br><span class="line">        buddies[i].setSizeClass(sizeClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里从后往前遍历 buddies 插入到双链表中是因为最后返回给用户的是第一个 buddy</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">this</span>.blockLists[sizeClass - <span class="number">1</span>].insertFront(buddies[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> buddies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内存回收"><a class="markdownIt-Anchor" href="#内存回收"></a> 内存回收</h4><p>应用程序要求释放内存时，提交的是用户数据的起始地址，需要先将其转为 <code>Block</code> 的起始地址（减去 <code>Block</code> 元数据的占用空间大小即可），然后尝试将 <code>Block</code> 和其兄弟合并，并将合并后的 <code>Block</code> 加入到空闲列表中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">free</span><span class="params">(<span class="type">int</span> userAddress)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据用户数据地址得到 Block 的起始地址</span></span><br><span class="line">    <span class="type">Block</span> <span class="variable">block</span> <span class="operator">=</span> Block.fromUserAddress(userAddress, <span class="built_in">this</span>.memory);</span><br><span class="line">    block.setFree();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试将 block 和其兄弟合并</span></span><br><span class="line">    <span class="built_in">this</span>.merge(block);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Block block)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sizeClass</span> <span class="operator">=</span> block.getSizeClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最多只能合并到 MAX_SIZE_CLASS - 1</span></span><br><span class="line">    <span class="keyword">while</span> (sizeClass &lt; MAX_SIZE_CLASS) &#123;</span><br><span class="line">        <span class="comment">// 得到兄弟 block</span></span><br><span class="line">        <span class="type">Block</span> <span class="variable">buddy</span> <span class="operator">=</span> <span class="built_in">this</span>.getBuddy(block, sizeClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 兄弟 block 正在被使用或者已分裂为更小的 block，则不能合并</span></span><br><span class="line">        <span class="keyword">if</span> (buddy.isUsed() || buddy.getSizeClass() != sizeClass) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将兄弟 block 从空闲链表中删除</span></span><br><span class="line">        buddy.removeFromList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果兄弟 block 的起始地址比 block 的起始地址小，说明当前的 block 是右兄弟，由于合并后需要得到整个 block 的起始地址，因此将 block 指向 buddy</span></span><br><span class="line">        <span class="keyword">if</span> (block.getAddress() &gt; buddy.getAddress()) &#123;</span><br><span class="line">            block = buddy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sizeClass += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置合并后的 sizeClass</span></span><br><span class="line">    block.setSizeClass(sizeClass);</span><br><span class="line">    <span class="built_in">this</span>.blockLists[sizeClass - <span class="number">1</span>].insertFront(block);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个关键的问题在于如何根据 <code>block</code> 的地址知道其兄弟 <code>block</code> 的地址？因为一个 <code>block</code> 会被分为左兄弟和右兄弟两个内存块，如果当前 <code>block</code> 是左兄弟，则右兄弟的地址为 <code>block.getAddress() + 1 &lt;&lt; sizeClass</code>，如果当前 <code>block</code> 是右兄弟，则左兄弟的地址为 <code>block.getAddress() - 1 &lt;&lt; sizeClass</code>。然而由于缺失位置信息我们并不能知道一个 <code>block</code> 是左兄弟还是右兄弟。</p><p>原作者在这里巧妙的在不引入额外的元数据的情况下解决了这个问题。首先，对于某个 <code>sizeClass</code> 为 <code>k</code> 的内存块来说，它的起始地址一定是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">C2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>，其中 <code>C</code> 为整数。这里使用数学归纳法来证明，假设系统内存最多支持<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">2^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span>个字节，则初始状态下整个系统只有一个内存块，<code>k</code> 就等于 <code>N</code>，该内存块的起始地址为0，满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">C2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>，取 <code>C = 0</code> 即可。假设某个 <code>sizeClass</code> 为 <code>k</code> 的内存块的起始地址满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">C2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>，则需要进一步证明分裂后的两个内存块的起始地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>C</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">C&#x27;2^{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>。而分裂后的内存块的起始地址分别为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">C2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><msup><mn>2</mn><mi>k</mi></msup><mo>+</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">C2^k + 2^{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，又<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><msup><mn>2</mn><mi>k</mi></msup><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><mi>C</mi><mo stretchy="false">)</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">C2^k = (2C)2^{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><msup><mn>2</mn><mi>k</mi></msup><mo>+</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><mi>C</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">C2^k + 2^{k - 1} = (2C+ 1)2^{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，证明完毕。同时，由这些公式可以发现，对于左兄弟内存块来说，<code>C</code> 是偶数，而对于右兄弟内存块来说 <code>C</code> 是奇数。更进一步来说，左右兄弟内存块的地址差异仅在于从低位往高位数的第 <code>k + 1</code> 位不同。</p><p>因此，根据某个内存块的地址推算出兄弟内存块的地址只需要将当前内存块的地址从低位往高位数第 <code>k + 1</code> 位反转即可。这种涉及反转比特位的操作就可以使用异或运算，我们可以将内存块的地址和 <code>1 &lt;&lt; sizeClass</code>（也就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>）进行异或运算，得到的地址就是对应兄弟内存块的地址。</p><p>另外，由于哨兵头节点的存在，<code>Memory</code> 内部的数组大小不是严格的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>，在计算兄弟内存块的地址时，可以先将当前内存块的地址减去哨兵头节点的大小之和，计算出兄弟内存块的地址之后，再加回偏移量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Block <span class="title function_">getBuddy</span><span class="params">(Block block, <span class="type">int</span> sizeClass)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">virtualAddress</span> <span class="operator">=</span> block.getAddress() - <span class="built_in">this</span>.getMemoryOffset();</span><br><span class="line">    <span class="type">int</span> <span class="variable">buddyVirtualAddress</span> <span class="operator">=</span> virtualAddress ^ (<span class="number">1</span> &lt;&lt; sizeClass);</span><br><span class="line">    <span class="type">int</span> <span class="variable">buddyAddress</span> <span class="operator">=</span> buddyVirtualAddress + <span class="built_in">this</span>.getMemoryOffset();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Block</span>(buddyAddress, <span class="built_in">this</span>.memory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>以上仅作为 <code>Buddy Memory Allocation</code> 算法的示例，不具有实际应用意义，例如完全没有考虑线程安全。完整的代码可参考原作者的 <a href="https://github.com/kunigami/blog-examples/blob/master/buddy-algorithm/buddy_algorithm.py">代码</a> 及 <code>Java</code> 版本的 <a href="https://github.com/Frederick-S/buddy-memory-allocation">buddy-memory-allocation</a>。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://www.kuniga.me/blog/2020/07/31/buddy-memory-allocation.html">Buddy Memory Allocation</a></li><li><a href="https://opendsa-server.cs.vt.edu/ODSA/Books/Everything/html/Buddy.html#buddy-methods">Buddy Methods</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Buddy Memory Allocation&lt;/code&gt; 是内存分配算法的一种，它假定内存的大小为&lt;span class=&quot;ka</summary>
      
    
    
    
    
    <category term="Memory Allocation" scheme="https://frederick-s.github.io/tags/Memory-Allocation/"/>
    
  </entry>
  
  <entry>
    <title>A Template Engine - 简易模板引擎实现</title>
    <link href="https://frederick-s.github.io/2022/06/25/simple-template-engine/"/>
    <id>https://frederick-s.github.io/2022/06/25/simple-template-engine/</id>
    <published>2022-06-24T16:00:00.000Z</published>
    <updated>2022-06-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文内容主要来源于 <a href="https://aosabook.org/en/500L/a-template-engine.html">A Template Engine</a>。</p></blockquote><h2 id="支持的语法"><a class="markdownIt-Anchor" href="#支持的语法"></a> 支持的语法</h2><p>首先来看一下这个模板引擎所支持的语法。</p><h3 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h3><p>使用 <code>&#123;&#123; variable &#125;&#125;</code> 来表示变量，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Welcome, &#123;&#123;user_name&#125;&#125;!&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>如果 <code>user_name</code> 是 <code>Tom</code>，则最后渲染的结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Welcome, Tom!&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="对象属性和方法"><a class="markdownIt-Anchor" href="#对象属性和方法"></a> 对象属性和方法</h3><p>除了字面量外，模板引擎的变量还支持复杂对象，可以通过点操作符来访问对象的属性或方法，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;The price is: &#123;&#123;product.price&#125;&#125;, with a &#123;&#123;product.discount&#125;&#125;% discount.&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>注意如果访问的是对象的方法，则不需要在方法名后添加 <code>()</code>，模板引擎会自动解析并调用方法。</p><p>同时，还可以使用管道操作符来链式调用过滤器，从而改变所渲染的变量值，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Short name: &#123;&#123;story.subject|slugify|lower&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="条件判断"><a class="markdownIt-Anchor" href="#条件判断"></a> 条件判断</h3><p>使用 <code>&#123;% if condition %&#125; body &#123;% endif %&#125;</code> 来表示条件判断，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if user.is_logged_in %&#125;</span><br><span class="line">    &lt;p&gt;Welcome, &#123;&#123; user.name &#125;&#125;!&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="循环"><a class="markdownIt-Anchor" href="#循环"></a> 循环</h3><p>使用 <code>&#123;% for item in list %&#125; body &#123;% endfor %&#125;</code> 来表示循环，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Products:&lt;/p&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% for product in product_list %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; product.name &#125;&#125;: &#123;&#123; product.price|format_price &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h3><p>使用 `` 来表示注释，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;# This is the best template ever! #&#125;</span><br></pre></td></tr></table></figure><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><p>一般来说，一个模板引擎主要做两件事：模板解析和渲染。这里要实现的模板引擎的渲染包括：</p><ul><li>管理动态数据</li><li>执行逻辑语句，例如 <code>if</code>，<code>for</code></li><li>实现点操作符访问和过滤器执行</li></ul><p>类似于编程语言的实现，模板引擎的解析也可以分为解释型和编译型两种。对于解释型来说，模板解析阶段需要生成某个特定的数据结构，然后在渲染阶段遍历该数据结构并执行所遇到的每一条指令；而对于编译型来说，模板解析阶段直接生成可执行代码，而渲染阶段则大大简化，直接执行代码即可。</p><p>本文描述的模板引擎采用编译型的方式，原文的作者将模板编译为了 <code>Python</code> 代码，这里为了进一步加深理解，实现了 <code>.NET Core</code> 版本的简单编译。</p><h2 id="编译为-c-代码"><a class="markdownIt-Anchor" href="#编译为-c-代码"></a> 编译为 C# 代码</h2><p>在介绍模板引擎实现之前，先来看一下模板引擎编译出的 <code>C#</code> 代码示例，对于如下的模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Welcome, &#123;&#123;userName&#125;&#125;!&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Products:&lt;/p&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% for product in productList %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; product.Name &#125;&#125;:</span><br><span class="line">        &#123;&#123; product.Price|FormatPrice &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>模板引擎会生成类似于下面的代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Render</span>(<span class="params">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; Context Context, Func&lt;<span class="built_in">object</span>, <span class="built_in">string</span>[], <span class="built_in">object</span>&gt; ResolveDots</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">var</span> userName = Context[<span class="string">&quot;userName&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> productList = Context[<span class="string">&quot;productList&quot;</span>];</span><br><span class="line">    result.AddRange(<span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123;<span class="string">&quot;&lt;p&gt;Welcome, &quot;</span>, Convert.ToString(userName), <span class="string">&quot;!&lt;/p&gt;&lt;p&gt;Products:&lt;/p&gt;&lt;ul&gt;&quot;</span>&#125;);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> product <span class="keyword">in</span> <span class="title">ConvertToEnumerable</span>(<span class="params">productList</span>))</span> &#123;</span><br><span class="line">        result.AddRange(<span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123;<span class="string">&quot;&lt;li&gt;&quot;</span>, Convert.ToString(ResolveDots(product, <span class="keyword">new</span> [] &#123; <span class="string">&quot;Name&quot;</span> &#125;)), <span class="string">&quot;:&quot;</span>, Convert.ToString(FormatPrice(ResolveDots(product, <span class="keyword">new</span> [] &#123; <span class="string">&quot;Price&quot;</span> &#125;))), <span class="string">&quot;&lt;/li&gt;&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    result.Add(<span class="string">&quot;&lt;/ul&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.Join(<span class="built_in">string</span>.Empty, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>Context</code> 表示全局上下文，用于获取渲染需要的动态数据，例如例子中的 <code>userName</code>，<code>Render</code> 方法会先从 <code>Context</code> 中提取出模板中所有需要的变量；<code>ResolveDots</code> 是一个函数指针，用于执行点操作符调用；而变量的值都会通过 <code>Convert.ToString</code> 转为字符串。</p><p>模板引擎的最终产物是一个字符串，所以在 <code>Render</code> 中先使用一个 <code>List</code> 保存每一行的渲染结果，最后再将 <code>List</code> 转换为字符串。</p><p><code>.NET</code> 编译器提供了 <code>Microsoft.CodeAnalysis.CSharp.Scripting</code> 包来将某段字符串当做 <code>C#</code> 代码执行，所以最终模板引擎生成的代码将通过如下方式执行：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> code = <span class="string">&quot;some code&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> scriptOptions = ScriptOptions.Default.WithImports(<span class="string">&quot;System&quot;</span>, <span class="string">&quot;System.Collections.Generic&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> script = CSharpScript.RunAsync(code, scriptOptions, yourCustomGlobals);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> script.Result.ReturnValue.ToString();</span><br></pre></td></tr></table></figure><h2 id="模板引擎编写"><a class="markdownIt-Anchor" href="#模板引擎编写"></a> 模板引擎编写</h2><h3 id="template"><a class="markdownIt-Anchor" href="#template"></a> Template</h3><p><code>Template</code> 是整个模板引擎的核心类，它首先通过模板和全局上下文初始化一个实例，然后调用 <code>Render</code> 方法来渲染模板：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;()</span><br><span class="line">&#123;</span><br><span class="line">    &#123; <span class="string">&quot;numbers&quot;</span>, <span class="keyword">new</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> text = <span class="string">@&quot;&lt;ol&gt;&#123;% for number in numbers %&#125;&lt;li&gt;&#123;&#123; number &#125;&#125;&lt;/li&gt;&#123;% endfor %&#125;&lt;/ol&gt;&quot;</span>;</span><br><span class="line">Template template = <span class="keyword">new</span> Template(text, context);</span><br><span class="line"><span class="built_in">string</span> result = template.Render();</span><br></pre></td></tr></table></figure><p>这里将 <code>text</code> 传入 <code>Template</code> 的构造函数后，会在构造函数中完成模板解析，后续的 <code>Render</code> 调用都不需要再执行模板解析。</p><h3 id="codebuilder"><a class="markdownIt-Anchor" href="#codebuilder"></a> CodeBuilder</h3><p>在介绍 <code>Template</code> 的实现之前，需要先了解下 <code>CodeBuilder</code>，<code>CodeBuilder</code> 用于辅助生成 <code>C#</code> 代码，<code>Template</code> 通过 <code>CodeBuilder</code> 添加代码行，以及管理缩进（原文的作者使用 <code>Python</code> 作为编译的目标语言所以这里需要维护正确的缩进，<code>C#</code> 则不需要），并最终通过 <code>CodeBuilder</code> 得到可执行代码。</p><p><code>CodeBuilder</code> 内部维护了一个类型为 <code>List&lt;object&gt;</code> 的变量 <code>Codes</code> 来表示代码行，这里的 <code>List</code> 容器类型不是字符串是因为 <code>CodeBuilder</code> 间可以嵌套，一个 <code>CodeBuilder</code> 可以作为一个完整的逻辑单元添加到另一个 <code>CodeBuilder</code> 中，并最终通过自定义的 <code>ToString</code> 方法来生成可执行代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CodeBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> IndentStep = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeBuilder</span>()</span></span><br><span class="line"><span class="function">        : <span class="title">this</span>(<span class="params"><span class="number">0</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeBuilder</span>(<span class="params"><span class="built_in">int</span> indentLevel</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Codes = <span class="keyword">new</span> List&lt;<span class="built_in">object</span>&gt;();</span><br><span class="line">        <span class="keyword">this</span>.IndentLevel = indentLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">object</span>&gt; Codes</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> IndentLevel</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CodeBuilder</code> 的 <code>AddLine</code> 方法非常简单，即根据缩进层级补齐空格后添加一行代码（这里 <code>C#</code> 版本保留了 <code>Python</code> 版本缩进的功能）：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddLine</span>(<span class="params"><span class="built_in">string</span> line</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Codes.AddRange(<span class="keyword">new</span> List&lt;<span class="built_in">object</span>&gt; &#123; <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27; &#x27;</span>, <span class="keyword">this</span>.IndentLevel), line, <span class="string">&quot;\n&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Indent</code> 和 <code>Dedent</code> 用于管理 <code>Python</code> 代码的缩进层级：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Indent</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.IndentLevel += IndentStep;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dedent</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.IndentLevel -= IndentStep;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AddSection</code> 用于创建一个新的 <code>CodeBuilder</code> 对象，并将其添加到当前 <code>CodeBuilder</code> 的代码行中，后续对子 <code>CodeBuilder</code> 的修改都会反应到父 <code>CodeBuilder</code> 中：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CodeBuilder <span class="title">AddSection</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    CodeBuilder section = <span class="keyword">new</span> CodeBuilder(<span class="keyword">this</span>.IndentLevel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.Codes.Add(section);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> section;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后重写了 <code>ToString()</code> 方法来生成可执行代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.Join(<span class="built_in">string</span>.Empty, <span class="keyword">this</span>.Codes.Select(code =&gt; code.ToString()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="template-实现"><a class="markdownIt-Anchor" href="#template-实现"></a> Template 实现</h3><h4 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h4><p>模板引擎的模板解析阶段发生在 <code>Template</code> 的构造函数中：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Template</span>(<span class="params"><span class="built_in">string</span> text, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Context = context;</span><br><span class="line">    <span class="keyword">this</span>.CodeBuilder = <span class="keyword">new</span> CodeBuilder();</span><br><span class="line">    <span class="keyword">this</span>.AllVariables = <span class="keyword">new</span> HashSet&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">this</span>.LoopVariables = <span class="keyword">new</span> HashSet&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.Initialize(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Python</code> 版本的代码支持多个 <code>context</code>，会由构造函数统一合并为一个上下文对象，这里只简单实现仅支持一个 <code>context</code>；<code>AllVariables</code> 用于记录模板 <code>text</code> 中需要用到的变量名，例如 <code>userName</code>，然后在代码生成阶段就可以遍历 <code>AllVariables</code> 并通过 <code>var someName = Context[someName];</code> 生成局部变量；不过由于模板中的变量可能还会有循环语句用到的临时变量，这些变量会记录到 <code>LoopVariables</code> 中，最终代码生成阶段用到的变量为 <code>AllVariables - LoopVariables</code>。</p><p>接着我们再来看 <code>Initialize</code> 方法：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.CodeBuilder.AddLine(<span class="string">&quot;var result = new List&lt;string&gt;();&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> variablesSection = <span class="keyword">this</span>.CodeBuilder.AddSection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析 text</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="function"><span class="built_in">string</span> variableName <span class="keyword">in</span> <span class="keyword">new</span> <span class="title">HashSet</span>&lt;<span class="title">string</span>&gt;(<span class="params"><span class="keyword">this</span>.AllVariables.Except(<span class="keyword">this</span>.LoopVariables</span>)))</span></span><br><span class="line">    &#123;</span><br><span class="line">        variablesSection.AddLine(<span class="built_in">string</span>.Format(<span class="string">&quot;var &#123;0&#125; = Context[&#123;1&#125;];&quot;</span>, variableName, <span class="keyword">this</span>.ConvertToStringLiteral(variableName)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.CodeBuilder.AddLine(<span class="string">&quot;return string.Join(string.Empty, result);&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Initialize</code> 首先会通过 <code>CodeBuilder</code> 分配一个 <code>List</code> 保存所有的代码行，然后新建一个子 <code>CodeBuilder</code> 来保存所有的局部变量，接着解析 <code>text</code>，在完成 <code>text</code> 的解析后就能知道模板中使用了哪些变量，从而根据 <code>AllVariables - LoopVariables</code> 生成局部变量，最后将所有的代码行转成字符串。</p><p>同时，原文作者在这里有一个优化，相比于在生成的代码中不断的调用 <code>result.Add(xxx)</code>，从性能上考虑可以将多个操作合并为一个即 <code>result.AddRange(new List&lt;string&gt; &#123; xxx &#125;)</code>，从而引出了辅助变量 <code>buffered</code> 和辅助方法 <code>FlushOutput</code>：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffered = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FlushOutput</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; buffered</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (buffered.Count == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.CodeBuilder.AddLine(<span class="built_in">string</span>.Format(<span class="string">&quot;result.Add(&#123;0&#125;);&quot;</span>, buffered[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (buffered.Count &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.CodeBuilder.AddLine(<span class="built_in">string</span>.Format(<span class="string">&quot;result.AddRange(new List&lt;string&gt; &#123;&#123;&#123;0&#125;&#125;&#125;);&quot;</span>, <span class="built_in">string</span>.Join(<span class="string">&quot;, &quot;</span>, buffered)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buffered.Clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在解析 <code>text</code> 时，并不会处理完一个 <code>token</code> 就执行一次 <code>this.CodeBuilder.AddLine</code>，而是将多个 <code>token</code> 的处理结果批量的追加到最终的可执行代码中。</p><p>接着，再回到 <code>Initialize</code> 方法中，由于模板中 <code>if</code>，<code>for</code> 可能存在嵌套，为了正确处理嵌套语句，这里引入一个栈 <code>var operationStack = new Stack&lt;string&gt;();</code> 来处理嵌套关系。例如，假设模板中存在 <code>&#123;% if xxx %&#125; &#123;% if xxx %&#125; &#123;% endif %&#125; &#123;% endif %&#125;</code>，每次遇到 <code>if</code> 时则执行入栈，遇到 <code>endif</code> 时则执行出栈，如果出栈时栈为空则说明 <code>if</code> 语句不完整，并抛出语法错误。</p><p>那么，如何解析 <code>text</code> 呢？这里使用正则表达式来将 <code>text</code> 分割为 <code>token</code>：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Regex tokenPattern = <span class="keyword">new</span> Regex(<span class="string">&quot;(?s)(&#123;&#123;.*?&#125;&#125;|&#123;%.*?%&#125;|&#123;#.*?#&#125;)&quot;</span>, RegexOptions.Compiled);</span><br><span class="line"><span class="keyword">var</span> tokens = tokenPattern.Split(text);</span><br></pre></td></tr></table></figure><p>其中正则表达式中的 <code>(?s)</code> 使得 <code>.</code> 能够匹配换行符。</p><p>例如对于模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;&#123;% for number in numbers %&#125;&lt;li&gt;&#123;&#123; number &#125;&#125;&lt;/li&gt;&#123;% endfor %&#125;&lt;/ol&gt;</span><br></pre></td></tr></table></figure><p>分割后的 <code>tokens</code> 为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#x27;&lt;ol&gt;&#x27;,</span><br><span class="line">    &#x27;&#123;% for number in numbers %&#125;&#x27;,</span><br><span class="line">    &#x27;&lt;li&gt;&#x27;,</span><br><span class="line">    &#x27;&#123;&#123; number &#125;&#125;&#x27;,</span><br><span class="line">    &#x27;&lt;/li&gt;&#x27;,</span><br><span class="line">    &#x27;&#123;% endfor %&#125;&#x27;,</span><br><span class="line">    &#x27;&lt;/ol&gt;&#x27;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后我们就可以遍历 <code>tokens</code> 处理了，每种 <code>token</code> 对应一种策略，如果是注释，则忽略：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (token.StartsWith(<span class="string">&quot;&#123;#&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是变量，则解析变量的表达式（表达式解析会在后面介绍）的值，然后再将其转为字符串：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (token.StartsWith(<span class="string">&quot;&#123;&#123;&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> expression = <span class="keyword">this</span>.EvaluateExpression(token.Substring(<span class="number">2</span>, token.Length - <span class="number">4</span>).Trim());</span><br><span class="line"></span><br><span class="line">    buffered.Add(<span class="built_in">string</span>.Format(<span class="string">&quot;Convert.ToString(&#123;0&#125;)&quot;</span>, expression));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而如果是 `</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文内容主要来源于 &lt;a href=&quot;https://aosabook.org/en/500L/a-template-engine.html&quot;&gt;A Template Engine&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;支持的</summary>
      
    
    
    
    
    <category term="Template Engine" scheme="https://frederick-s.github.io/tags/Template-Engine/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.824 - Spanner: Google’s Globally-Distributed Database</title>
    <link href="https://frederick-s.github.io/2022/06/19/mit-6.824-spanner/"/>
    <id>https://frederick-s.github.io/2022/06/19/mit-6.824-spanner/</id>
    <published>2022-06-18T16:00:00.000Z</published>
    <updated>2022-06-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p><code>Spanner</code> 是一个由 <code>Google</code> 设计，构建和部署的可扩展的全球分布式数据库。从高层次的抽象来看，作为一个数据库，<code>Spanner</code> 会将数据进行分片，每个分片构建在一组 <code>Paxos</code> 状态机之上，同时所有的数据存储在世界各地的各个数据中心内。<code>Spanner</code> 使用副本来保证数据库的全球可用性和客户端读取数据的就近访问性；客户端也能自动的在各个副本之间实现故障转移。当数据量或者服务器数量发生变化时，<code>Spanner</code> 能自动的跨服务器对数据进行重分区；同时，<code>Spanner</code> 也能自动的跨服务器（甚至是跨数据中心）迁移数据来应对负载均衡或者异常。<code>Spanner</code> 的扩展性能够支持上百个数据中心内的几百万台服务器，以及几万亿的数据行。</p><p>应用程序可以借助 <code>Spanner</code> 来确保高可用，即使是面对大面积的自然灾害，也可以通过将数据存储在单个大洲或者跨大洲的多个数据中心来保证容错。<code>Spanner</code> 的第一个客户是 <code>F1</code>，<code>F1</code> 是 <code>Google</code> 广告后端的一个重构项目。<code>F1</code> 的每份数据在美国境内存有5个副本。大部分其他的应用程序一般会将数据备份在同一个地理区域内的3到5个数据中心中，不过这在应对极端灾害时的容错性要略差一些。因为在能够容忍1到2个数据中心异常的情况下，大多数的应用程序相比于更进一步的高可用来说更看重低延迟。</p><p><code>Spanner</code> 设计的首要关注点是管理跨数据中心的数据副本，不过设计者依然在 <code>Google</code> 已有的分布式系统设施之上花了大量的时间来设计和实现某些重要的数据库特性。虽然 <code>Bigtable</code> 能满足很多项目的需求，不过依然有很多 <code>Bigtable</code> 的用户反馈在某些场景下 <code>Bigtable</code> 难以胜任：例如涉及复杂、不断改变的数据库模式；或者要求在大范围数据复制场景下保证强一致性。由于半关系型数据模型以及同步复制的特性，很多 <code>Google</code> 的应用选择使用 <code>Megastore</code> 来存储数据，尽管 <code>Megastore</code> 的写性能不是很好。因此，<code>Spanner</code> 从一个类似 <code>Bigtable</code> 的带版本号的键值存储演化为了一个基于时间戳的多版本数据库。<code>Spanner</code> 中的数据保存在半关系型的表中；每个数据存有多个版本，每个版本的数据都自动标记着提交时的时间戳；旧版本的数据可以根据可配置的垃圾回收策略进行回收；应用程序可以读取某个旧的时间戳下的数据。<code>Spanner</code> 支持通用的事务，以及提供了一个基于 <code>SQL</code> 的查询语言。</p><p>作为一个全球分布式数据库，<code>Spanner</code> 提供了几个有趣的特性。首先，应用程序能以合适的粒度动态的调控数据复制的配置。应用程序可以通过配置指定哪个数据中心保存什么样的数据，数据存储的位置距离终端用户有多远（控制读延迟），数据的各个副本间距离有多远（控制写延迟），每个数据要保存几个副本（控制持久性，可用性和读性能）。同时，系统可以动态和透明的在各个数据中心间迁移数据，从而在各数据中心间实现资源的均衡使用。第二，<code>Spanner</code> 实现了两个在分布式数据库中难以实现的功能：提供了外部一致性的读和写，以及在某个时间戳上跨全球数据库的一致性读。这些特性使得 <code>Spanner</code> 能够在全球多数据中心级别支持一致性备份，一致性的 <code>MapReduce</code> 任务执行，以及原子的数据库模式更新，即使执行这些操作时存在进行中的事务也没有关系。</p><p><code>Spanner</code> 通过对事务记录全球提交时间戳来实现上述特性，即使事务可能会被分布式的执行。事务的时间戳体现了串行顺序性。另外，这个串行顺序性满足外部一致性（或者相当于线性一致性）：如果某个事务<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">T_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在另一个事务<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">T_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>开始执行前完成提交，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">T_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的提交时间戳小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">T_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的提交时间戳。<code>Spanner</code> 是第一个在全球数据中心级别保证这一特性的系统。</p><p>实现上述特性的关键点是一个全新的 <code>TrueTime</code> <code>API</code> 及其实现。这个 <code>API</code> 直接将时间的不确定性暴露给了使用方，而 <code>Spanner</code> 基于 <code>TrueTime</code> 提供的不确定性时间的范围（后面会提到 <code>TrueTime</code> 返回当前时间时不是返回一个单独的值，而是一个范围，<code>TrueTime</code> 会确保当前时间落在这个范围内）实现了事务的时间戳先后顺序保证。如果这个时间的不确定性范围太大，<code>Spanner</code> 会减缓操作来等待不确定性范围变小。<code>Google</code> 的集群管理软件提供了 <code>TrueTime</code> <code>API</code> 的一种实现。这个实现利用多个现代的基准时钟（<code>GPS</code> 和原子钟）能将时间不确定性控制在很小的一个范围内（一般来说小于10毫秒）。</p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><p>本节描述了 <code>Spanner</code> 的结构及其底层实现。然后会再介绍目录（<code>directory</code>），和文件系统中的目录不同，<code>Spanner</code> 中的目录是一个抽象的概念，用于管理数据副本和访问局部性，同时也是数据迁移的最小单元。最后会介绍 <code>Spanner</code> 的数据模型，相比于键值数据库 <code>Spanner</code> 更像是个关系型数据库，以及描述了应用程序如何控制数据的存储位置来实现访问局部性。</p><p>一个 <code>Spanner</code> 的完整部署被称之为 <code>universe</code>。因为 <code>Spanner</code> 在全球级别的数据中心管理数据，所以一共只会有几个运行中的 <code>universe</code>。<code>Google</code> 目前运行了一个测试/体验环境的 <code>universe</code>，一个开发/生产环境的 <code>universe</code>，以及一个仅生产环境的 <code>universe</code>。</p><p>一个 <code>Spanner</code> 实例以一组 <code>zone</code> 的形式来组织，每个 <code>zone</code> 差不多等同于部署了一批 <code>Bigtable</code> 服务器。每个 <code>zone</code> 是一个可管理的部署单元。系统在各个 <code>zone</code> 之间进行数据复制。当上线或者下线数据中心时，可以向运行中的系统添加或者删除 <code>zone</code>。<code>zone</code> 也是物理隔离的单位：一个数据中心内可能有1个或者多个 <code>zone</code>，例如不同应用程序的数据需要分片到同一个数据中心内的不同服务器上。</p><p><img src="/images/spanner-1.png" alt="alt" /></p><p>上图展示了 <code>Spanner</code> 的一个 <code>universe</code> 中各服务器的职责。每个 <code>zone</code> 有一个 <code>zonemaster</code> 和成百上千台 <code>spanserver</code>。<code>zonemaster</code> 向 <code>spanserver</code> 分发数据，<code>spanserver</code> 向客户端提供数据服务。同时，客户端通过每个 <code>zone</code> 内的 <code>location proxy</code> 来确定需要访问哪台 <code>spanserver</code> 获取数据。<code>universe master</code> 和 <code>placement driver</code> 目前是单点的。<code>universe master</code> 主要是一个控制台，用于展示所有 <code>zone</code> 的状态信息，从而方便调试。<code>placement driver</code> 负责自动的在各个 <code>zone</code> 之前进行数据迁移，这个的操作耗时一般是分钟级。出于满足数据副本数量的要求以及实现数据访问的负载均衡，<code>placement driver</code> 会周期性的和 <code>spanserver</code> 通信从而确认哪些数据需要迁移。出于篇幅考虑，论文只会描述 <code>spanserver</code> 的实现细节。</p><h3 id="spanserver-软件栈"><a class="markdownIt-Anchor" href="#spanserver-软件栈"></a> Spanserver 软件栈</h3><p><img src="/images/spanner-2.png" alt="alt" /></p><p>本节主要关注 <code>spanserver</code> 的实现并展示了如何在 <code>Bigtable</code> 的实现之上构建数据复制和分布式事务。上图展示了 <code>spanserver</code> 的软件栈。在底部，每个 <code>spanserver</code> 负责管理100到1000个被称之为 <code>tablet</code> 的数据结构实例。<code>tablet</code> 类似于 <code>Bigtable</code> 中表的抽象，其内部维护了如下的映射：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(key:string, timestamp:int64) -&gt; string</span><br></pre></td></tr></table></figure><p>和 <code>Bigtable</code> 不同的是，<code>Spanner</code> 给每一个数据都标记了时间戳，从而使得 <code>Spanner</code> 更像是一个多版本数据库而不是键值存储。每个 <code>tablet</code> 的状态会保存在一组类似 <code>B</code> 树的文件以及一个预写日志中，所有的文件都会保存在一个称之为 <code>Colossus</code>（<code>Google File System</code> 的后继者）的分布式文件系统中。</p><p>为了支持数据复制，每个 <code>spanserver</code> 在每个 <code>tablet</code> 之上构建了一个单 <code>Paxos</code> 状态机（<code>Spanner</code> 的早期设计支持每个 <code>tablet</code> 对应多个 <code>Paxos</code> 状态机，这能支持更灵活的复制配置。不过由于这种设计的复杂性作者最终放弃了）。每个状态机将其元数据和日志保存到对应的 <code>tablet</code> 中。<code>Spanner</code> 的 <code>Paxos</code> 实现支持长期存活的主节点，每个主节点会分配一个基于时间的租约，租期的默认长度是10秒。当前 <code>Spanner</code> 的实现会记录两次 <code>Paxos</code> 的写操作，一次是在 <code>tablet</code> 的日志中，另一次是在 <code>Paxos</code> 的日志中。不过这个目前只是权宜之计，可能会在未来修复。<code>Spanner</code> 的 <code>Paxos</code> 实现能以管道的方式执行，因此在 <code>WAN</code> 环境的延迟下能提高 <code>Spanner</code> 的吞吐；不过提交到 <code>Paxos</code> 的写操作会按照顺序执行。</p><p><code>Spanner</code> 借助 <code>Paxos</code> 状态机实现了一致性的数据映射复制。每个副本的键值映射状态都会保存在相应的 <code>tablet</code> 中。客户端的写操作必须由主节点发起 <code>Paxos</code> 协议；而读操作可以由任意一个有着最新数据的副本执行。这些副本构成了一个 <code>Paxos group</code>。</p><p>对于身为主节点的副本来说，每个 <code>spanserver</code> 实现了一个锁表（<code>lock table</code>）来实现并发控制。锁表包含了两阶段锁的状态：它会将某个范围内的键和锁的状态建立映射（长期存活的主节点是高效管理锁表的关键）。在 <code>Bigtable</code> 和 <code>Spanner</code> 中，锁表都是专门为长时间运行的事务设计的（例如，对于报表生成这样的事务可能需要花费分钟级的时间才能完成），但在锁竞争激烈的情况下使用乐观并发控制策略会造成性能不佳。诸如事务读这样需要同步的操作需要先从锁表中获取锁；其他不涉及同步的操作则无需操作锁表。</p><p>对于身为主节点的副本来说，每个 <code>spanserver</code> 实现了一个事务管理器（<code>transaction manager</code>）来支持分布式事务。事务管理器被用来实现 <code>participant leader</code>；而其他同 <code>Paxos</code> 组内的副本则被称为 <code>participant slaves</code>。如果一个事务只涉及一个 <code>Paxos</code> 组（对于大多数的事务来说），则无需事务管理器介入，因为锁表和 <code>Paxos</code> 一起已经提供了事务功能。如果一个事务涉及多个 <code>Paxos</code> 组，则每个组的主节点需要协同完成两阶段提交。其中某个 <code>Paxos</code> 组会被选为协调者：该组的 <code>participant leader</code> 则会担任 <code>coordinator leader</code>，该组内其他的从节点则担任 <code>coordinator slaves</code>。事务管理器的状态会保存在底层的 <code>Paxos</code> 组中（因此这个状态数据也会存有多个副本）。</p><h3 id="目录和数据放置"><a class="markdownIt-Anchor" href="#目录和数据放置"></a> 目录和数据放置</h3><p>在键值映射之上，<code>Spanner</code> 的实现支持被称为目录（<code>directory</code>）的桶的抽象，目录是一组有着公共前缀的连续键的集合（命名为目录是由于历史的偶然；一个更好的命名可能是桶（<code>bucket</code>））。目录的支持使得应用程序可以通过设置合适的键来控制数据访问的局部性。</p><p>一个目录是数据放置的最小单元。每个目录下的所有数据有着相同的复制配置。数据以目录的形式从一个 <code>Paxos</code> 组迁移到另一个 <code>Paxos</code> 组，下图描述了这个过程。<code>Spanner</code> 可能会移动一个目录来减轻某个 <code>Paxos</code> 组的负载；或者将经常被同时访问的多个目录移动到同一个 <code>Paxos</code> 组中；或者将某个目录移动到距离客户端更近的 <code>Paxos</code> 组中。目录的移动可以和客户端的操作同时进行。一个 <code>50 MB</code> 大小的目录可以在几秒内完成。</p><p><img src="/images/spanner-3.png" alt="alt" /></p><p>一个 <code>Paxos</code> 组可能会包含多个目录说明 <code>Spanner</code> 的 <code>tablet</code> 和 <code>Bigtable</code> 的 <code>tablet</code> 不同：<code>Spanner</code> 的 <code>tablet</code> 没有必要是行空间（<code>row space</code>）内按照字典顺序的连续分区。相反，一个 <code>Spanner</code> 的 <code>tablet</code> 可能包含了行空间的多个分区。正是基于此特性才使得多个同时被访问的目录可以被移动到同一个 <code>Paxos</code> 组中。下图展示了各组成部分间的关系：</p><p><img src="/images/spanner-4.png" alt="alt" /></p><p><code>Spanner</code> 使用 <code>Movedir</code> 这样的后台任务在多个 <code>Paxos</code> 组之间移动目录。<code>Movedir</code> 也被用来向 <code>Paxos</code> 组中添加或者删除副本，因为目前 <code>Spanner</code> 还不支持在 <code>Paxos</code> 内部实现配置变更。<code>Movedir</code> 没有被设计为一个独立的事务，这主要是为了避免在进行大量数据移动时阻塞读写请求。相反，<code>movedir</code> 会在后台开始迁移数据。当 <code>movedir</code> 完成数据迁移，但还剩下一小部分数据未迁移时，则会发起一个事务自动的完成数据的迁移，然后更新涉及的两个 <code>Paxos</code> 组的元数据。</p><p>目录是应用程序能够控制副本的地理位置属性（或者简单来说，数据放置）的最小单位。在 <code>Spanner</code> 的设计中，数据放置规范语言（<code>placement-specification language</code>）和管理副本配置的职责相解耦。管理员可以控制两个维度：副本的数量和类型，以及副本所在的地理位置属性。<code>Spanner</code> 为这两个维度提供了可选的选项（例如，<code>North America, replicated 5 ways with 1 witness</code>）。应用程序通过标记每个数据库和/或者单个目录的复制选项组合来控制数据的复制。例如，某个应用程序可能会将每个终端用户的数据保存在自己的目录中，从而使得用户 <code>A</code> 的数据在欧洲有三个副本，用户 <code>B</code> 的数据在北美有5个副本。</p><p>出于表达清晰的考虑作者简化了这块的描述。实际上，如果某个目录包含的数据过多，<code>Spanner</code> 会将其拆分为多个段（<code>fragment</code>）。不同的段会由不同的 <code>Paxos</code> 组提供服务（也对应了不同的服务器）。<code>Movedir</code> 实际上是在各个 <code>Paxos</code> 组之间移动段，而不是整个目录。</p><h3 id="数据模型"><a class="markdownIt-Anchor" href="#数据模型"></a> 数据模型</h3><p><code>Spanner</code> 为应用程序提供了如下的数据特性：一个基于模式化半关系型表的数据模型，一个查询语言，以及通用型事务。之所以要支持这些特性是受几方面的驱动。支持模式化半关系型表和同步复制的需求来自于 <code>Megastore</code> 的流行。至少有300个 <code>Google</code> 内部的应用程序选择使用 <code>Megastore</code>（尽管它的性能不是很好），因为它的数据模型比 <code>Bigtable</code> 更简单，而且它也支持跨数据中心的同步数据复制（<code>Bigtable</code> 只支持跨数据中心数据复制的最终一致性）。使用 <code>Megastore</code> 的 <code>Google</code> 应用程序中比较有名的有 <code>Gmail</code>，<code>Picasa</code>，<code>Calendar</code>，<code>Android Market</code> 和 <code>AppEngine</code>。在 <code>Spanner</code> 中支持类似 <code>SQL</code> 的查询语言的需求同样很明确，因为交互式数据分析工具 <code>Dremel</code> 也很流行。最后，希望 <code>Bigtable</code> 支持跨行的事务的呼声也很强烈；开发 <code>Percolator</code> 的部分原因就是为了解决这个问题。某些作者认为通用的两阶段提交的支持成本太大，因为它存在性能和可用性问题。不过，<code>Spanner</code> 的作者认为最好交给应用开发人员来处理由于过度使用事务而产生的性能瓶颈，而不是始终在缺少事务的环境下编程。而在 <code>Paxos</code> 之上实现两阶段提交则减缓了可用性问题。</p><p>应用程序的数据模型构建在目录式的键值数据映射之上。一个应用程序会在一个 <code>universe</code> 中创建一个或者多个数据库。每个数据库可以包含不限制数量的模式化表。<code>Spanner</code> 的表类似于关系型数据库中的表，它同样有行，列，以及带版本的值。本文不会深入探讨 <code>Spanner</code> 的查询语言。它和 <code>SQL</code> 很像不过在这基础之上多了些扩展来支持 <code>protocol-buffer</code> 类型的字段。</p><p><code>Spanner</code> 的数据模型不是纯关系型的，它的行必须有名称。更准确的来说，每张表需要有一个或者多个主键列组成的有序集合。这个要求使得 <code>Spanner</code> 看起来像一个键值存储：主键定义了每行的名称，每个表定义了主键列到非主键列的映射。只有某个主键对应有值（即使值是 <code>NULL</code>）才能被认为某一行存在。采用这个结构使得应用程序能通过选择键来控制数据访问的局部性。</p><p><img src="/images/spanner-5.png" alt="alt" /></p><p>上图展示了 <code>Spanner</code> 数据模式的一个示例，在这个例子中，我们创建了两张表来存储每个用户和每张照片的元数据。<code>Spanner</code> 的模式语言和 <code>Megastore</code> 类似，不过 <code>Spanner</code> 有额外的要求，<code>Spanner</code> 的每个数据库必须由客户端分区为一个或者多个层次化的表。客户端程序通过 <code>INTERLEAVE IN</code> 来声明数据库模式的层次化结构。位于层次化结构顶端的表被称之为 <code>directory table</code>。<code>directory table</code> 中以 <code>K</code> 为键的数据，和关联的子孙表中所有键以 <code>K</code> 为起始的行按照字典顺序组成了一个目录。<code>ON DELETE CASCADE</code> 表明如果删除了 <code>directory table</code> 中的一条数据，则需要一并删除关联的子孙表中的数据。上图也展示了示例数据库的交错结构（<code>interleaved layout</code>）：例如，<code>Albums(2, 1)</code> 表示 <code>Albums</code> 表中 <code>user_id</code> 为2，<code>album_id</code> 为1的数据。这种由交错的表组成的目录对于客户端来说非常重要，因为它使得客户端能够描述不同的表之间的局部性关联，这对于分片、分布式的数据库的高性能来说非常重要。如果缺少这个特性，<code>Spanner</code> 将无从知晓最重要的局部性关联。</p><h2 id="truetime"><a class="markdownIt-Anchor" href="#truetime"></a> TrueTime</h2><p>本节主要描述 <code>TrueTime</code> 的 <code>API</code> 及概述其实现。<code>TrueTime</code> 大部分的细节会在另一篇论文中描述，本文主要是展示它对于 <code>Spanner</code> 的重要性。下表列举了 <code>TrueTime</code> 的 <code>API</code>。<code>TrueTime</code> 以 <code>TTinterval</code> 的形式表示时间，<code>TTinterval</code> 是一段表示非确定性时间的有界区间（而标准时间接口并不会将时间的不确定性暴露给客户端）。<code>TTinterval</code> 两个端点值的类型为 <code>TTstamp</code>。<code>TT.now()</code> 会返回一个 <code>TTinterval</code>，并且保证 <code>TTinterval</code> 所表示的时间区间一定包含 <code>TT.now()</code> 被调用时的绝对时间。这个时间类似于带闰秒的 <code>UNIX</code> 时间。定义时间的瞬时误差上限为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>，其值为 <code>TTinterval</code> 区间长度的一半，以及定义<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>ϵ</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{\epsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.56778em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span></span>为平均误差上限。<code>TT.after()</code> 和 <code>TT.before()</code> 是基于 <code>TT.now()</code> 的更易用的封装。</p><table><thead><tr><th>Method</th><th>Returns</th></tr></thead><tbody><tr><td>TT.now()</td><td>TTinterval: [earliest, latest]</td></tr><tr><td>TT.after(t)</td><td>true if t has definitely passed</td></tr><tr><td>TT.before(t)</td><td>true if t has definitely not arrived</td></tr></tbody></table><p>记某个事件 <code>e</code> 发生的绝对时间为函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_{abs}(e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span>。那么以更正式的术语来说，<code>TrueTime</code> 保证对于某次调用 <code>tt = TT.now()</code>，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>e</mi><mi>a</mi><mi>r</mi><mi>l</mi><mi>i</mi><mi>e</mi><mi>s</mi><mi>t</mi><mo>≤</mo><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>e</mi><mrow><mi>n</mi><mi>o</mi><mi>w</mi></mrow></msub><mo stretchy="false">)</mo><mo>≤</mo><mi>t</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">tt.earliest \leq t_{abs}(e_{now}) \leq tt.latest</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mrow><mi>n</mi><mi>o</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">e_{now}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是调用 <code>TT.now()</code> 的事件。</p><p><code>TrueTime</code> 底层使用的时间参照是 <code>GPS</code> 和原子钟。<code>TrueTime</code> 使用两种形式的时间参照是因为它们有着不同的异常模式。<code>GPS</code> 发生异常可能是由于天线或者接收器异常，本地电磁波干扰，某些关联异常（例如设计的缺陷造成无法正确处理闰秒和电子欺骗），以及 <code>GPS</code> 系统瘫痪。原子钟的异常模式和 <code>GPS</code> 无关，不过在经过很长一段时间后可能会因为频率误差造成严重的精度缺失。</p><p><code>TrueTime</code> 的实现由每个数据中心中的一组 <code>time master</code> 机器完成，每个机器上存在一个 <code>timeslave</code> 守护进程。大多数的 <code>time master</code> 安装了具有专用天线的 <code>GPS</code> 接收器；这些机器在物理上相互隔离，从而降低天线异常，电磁波干扰和电子欺骗的影响。剩下的 <code>time master</code>（被称之为 <code>Armageddon masters</code>）则配有原子钟。一个原子钟并不是太昂贵；一个 <code>Armageddon master</code> 的成本和一个 <code>GPS master</code> 的成本相当。各个 <code>time master</code> 会定期的互相对比各自的参照时间。每个 <code>time master</code> 也会对比自己的参照时间和本地时钟，如果两者相差过大则该 <code>time master</code> 会退出集群。在时钟同步期间，<code>Armageddon masters</code> 会保守的根据最差情况的时钟漂移来逐渐增加时间的不确定性。<code>GPS masters</code> 的时间不确定性误差一般接近于0。</p><p>每个 <code>timeslave</code> 守护进程会拉取多个 <code>time master</code> 的参照时间来减少单个 <code>time master</code> 异常造成的时间误差。<code>timeslave</code> 轮询的 <code>time master</code> 一部分来自于就近数据中心的 <code>GPS master</code>；剩下的来自于更远的数据中心的 <code>GPS master</code> 以及一些 <code>Armageddon master</code>。获取到其他 <code>time master</code> 的参照时间后，<code>timeslave</code> 守护进程会通过一种 <code>Marzullo</code> 算法的变种来识别出不可信的值，然后根据可信的值同步本地时钟。为了避免异常的本地时钟造成影响，如果某个机器的时钟误差频繁超过组件规范和工作环境下的误差上限，则该机器会从集群中剔除。</p><p>在时钟同步期间，<code>timeslave</code> 守护进程也会逐渐增加时间的不确定性。记<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>表示保守最差情况下的本地时钟偏移。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>的值同时也依赖 <code>time master</code> 的不确定性以及和 <code>time master</code> 的通信延迟。在 <code>Google</code> 的生产环境中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>呈现出随时间变化的锯齿形函数，在每次轮询 <code>time master</code> 间隔间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>的值在1到7毫秒内浮动。因此在大多数时间里<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>ϵ</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{\epsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.56778em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span></span>的值为4毫秒。当前 <code>timeslave</code> 守护进程轮询 <code>time master</code> 的时间间隔为30秒，以及时钟漂移速率为200微妙/秒，最后<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>的浮动范围为0到6毫秒。而剩下的1毫秒则来源于和 <code>time master</code> 的通信延迟。当发生异常时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>的偏移范围超过7毫秒也是有可能的。例如，有时候 <code>time master</code> 的不可用会造成数据中心范围内<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>值的增加。类似的，服务器过载以及网络链路异常也有可能造成局部范围内<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>的值产生毛刺。</p><h2 id="并发控制"><a class="markdownIt-Anchor" href="#并发控制"></a> 并发控制</h2><p>本节描述了 <code>Spanner</code> 如何使用 <code>TrueTime</code> 来保证并发控制下的正确性特性，以及如何利用这些正确性特性来实现诸如外部一致性事务，无锁只读事务以及非阻塞式的读取旧数据。例如要在某个时间戳 <code>t</code> 对整个数据库做一次审计读取操作，则借助这些特性可以保证这次操作一定能够读取到在时间戳 <code>t</code> 之前已经提交的事务修改。</p><p>另外，将 <code>Paxos</code> 的写操作（除非上下文明确的情况下，后续此操作都被称之为 <code>Paxos writes</code>）和 <code>Spanner</code> 的客户端的写操作区分开非常重要。例如，两阶段提交场景下 <code>Paxos</code> 会在准备阶段执行写操作，这个写操作没有任何相关联的客户端写操作。</p><h3 id="时间戳管理"><a class="markdownIt-Anchor" href="#时间戳管理"></a> 时间戳管理</h3><p>下表列举了 <code>Spanner</code> 支持的操作类型。<code>Spanner</code> 支持读写事务（<code>read-write transactions</code>），只读事务（<code>read-only transactions</code>）（预先声明的快照隔离事务（<code>snapshot-isolation transactions</code>）），和快照读（<code>snapshot reads</code>）。单独的写事务由读写事务实现；单独的非快照读由只读事务实现。两者都会在实现内部执行重试（因此客户端无需编写自己的重试逻辑）。</p><table><thead><tr><th>Operation</th><th>Timestamp Discussion</th><th>Concurrency Control</th><th>Replica Required</th></tr></thead><tbody><tr><td>Read-Write Transaction</td><td>Section 4.1.2</td><td>pessimistic</td><td>leader</td></tr><tr><td>Read-Only Transaction</td><td>Section 4.1.4</td><td>lock-free</td><td>leader for timestamp; any for read, subject to section 4.1.3</td></tr><tr><td>Snapshot Read, client-provided timestamp</td><td>——</td><td>lock-free</td><td>any, subject to section 4.1.3</td></tr><tr><td>Snapshot Read, client-provided bound</td><td>Section 4.1.3</td><td>lock-free</td><td>any, subject to section 4.1.3</td></tr></tbody></table><p>只读事务借助了快照隔离从而有着较好的性能。一个只读事务必须事先声明为不包含任何写操作；它并不简单是一个没有写操作的读写事务。系统会为只读事务选择一个时间戳从而能够以无锁的方式读取以该时间戳为基准的数据，因此也不会阻塞接下来的写操作。只读事务中的读操作可以由任何有着足够新的数据的副本执行。</p><p>快照读指的是读取过去的数据因此也无需加锁。客户端可以为快照读指定一个时间戳或者指定一个期望时间戳的上限，然后由 <code>Spanner</code> 选择一个时间戳。不管在哪种情况下，快照读可以由任何有着足够新的数据的副本执行。</p><p>对于只读事务和快照读来说，一旦确定了时间戳事务的提交就不可避免了，除非该时间戳对应的数据已经被垃圾回收了。因此，客户端可以避免在重试循环中缓冲结果。当某个服务器异常时，客户端可以在另一台服务器上重新以期望的时间戳和当前的数据读取位置继续执行查询操作。</p><h4 id="paxos-主节点租约"><a class="markdownIt-Anchor" href="#paxos-主节点租约"></a> Paxos 主节点租约</h4><p><code>Spanner</code> 的 <code>Paxos</code> 实现使用了基于时间的租约来确保某个主节点长期存活（租期默认是10秒）。主节点的候选者会向其他节点发送请求来获取基于时间的租约投票（<code>lease votes</code>）；当该候选者收到大多数的选票后就知道自己持有了租约。当某个副本成功的执行写入后会同时延长租约选票，而对于主节点来说则会在租期快过期前发起延长租约选票的请求。定义某个主节点的租期区间（<code>lease interval</code>）始于获取了大多数的选票，终于不再持有大多数的选票（因为某些选票已过期）。<code>Spanner</code> 依赖如下的不相交不变式（<code>disjointness invariant</code>）：对于每个 <code>Paxos</code> 组来说，每个 <code>Paxos</code> 主节点的租期区间都和任意其他主节点的租期区间不相交。</p><p><code>Spanner</code> 的实现允许某个 <code>Paxos</code> 主节点通过释放从节点的选票来主动发起主节点退位。为了维持不相交不变式（<code>disjointness invariant</code>），<code>Spanner</code> 会限制在什么情况下才能发起主节点退位。定义<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示某个主节点使用的最大时间戳。后面章节会描述什么时候<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>会增加。因此，某个主节点只有等到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>T</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>f</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TT.after(s_{max})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>为真时才能发起退位。</p><h4 id="为读写事务分配时间戳"><a class="markdownIt-Anchor" href="#为读写事务分配时间戳"></a> 为读写事务分配时间戳</h4><p>读写事务需要用到两阶段锁。因此，<code>Spanner</code> 可以在获取所有锁之后，释放任意锁之前为事务分配时间戳。对于某个给定的事务来说，<code>Spanner</code> 会以 <code>Paxos</code> 的写操作的时间戳作为事务的提交时间戳。</p><p><code>Spanner</code> 依赖如下的单调不变式（<code>monotonicity invariant</code>）：在每个 <code>Paxos</code> 组内，即使是多个不同的主节点之间，<code>Spanner</code> 分配给 <code>Paxos</code> 写操作的时间戳都是单调递增的。对于单个主节点来说，分配单调递增的时间戳没有什么困难。<code>Spanner</code> 通过不相交不变式（<code>disjointness invariant</code>）确保了在多个不同的主节点之间也能保证单调不变式（<code>monotonicity invariant</code>）：每个主节点只能分配位于任期区间内的时间戳。每当主节点分配了一个时间戳 <code>s</code>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（某个主节点使用的最大时间戳）都会更新为 <code>s</code> 来确保不相交不变式（<code>disjointness invariant</code>）。</p><p><code>Spanner</code> 同时也保证了如下的外部一致性不变式（<code>external-consistency invariant</code>）：如果某个事务 <code>T2</code> 的开始时间晚于事务 <code>T1</code> 的提交时间，则 <code>T2</code> 的提交时间戳一定大于 <code>T</code> 的提交时间戳。定义事务<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的开始和提交事件为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>e</mi><mi>i</mi><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">e_i^{start}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05222em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>e</mi><mi>i</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">e_i^{commit}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0833279999999998em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span>；事务<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的提交时间戳为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。则有不变式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msubsup><mi>e</mi><mn>1</mn><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo><mo>&lt;</mo><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msubsup><mi>e</mi><mn>2</mn><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>s</mi><mn>1</mn><mo>&lt;</mo><mi>s</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">t_{abs}(e_1^{commit}) &lt; t_{abs}(e_2^{start}) \implies s1 &lt; s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.043556em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">s</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord">2</span></span></span></span>。<code>Spanner</code> 中执行事务和分配时间戳的协议遵循了如下的两条规则，从而确保了上述的不变式。定义两阶段提交协议的 <code>coordinator leader</code> 针对某个写操作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>发起提交请求对应的事件为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>e</mi><mi>i</mi><mrow><mi>s</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">e_i^{server}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.923056em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span>。则 <code>Spanner</code> 遵循的两条规则为：</p><ul><li>开始（<code>Start</code>）：在事件<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>e</mi><mi>i</mi><mrow><mi>s</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">e_i^{server}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.923056em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span>之后，两阶段提交协议的 <code>coordinator leader</code> 分配给某个写事务<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的提交时间戳<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>不会小于 <code>TT.now().latest</code>。注意 <code>participant leaders</code> 在这一阶段不会参与；4.2.1节会介绍在实现提交等待（<code>Commit Wait</code>）规则时 <code>participant leaders</code> 的职责。</li><li>提交等待（<code>Commit Wait</code>）：两阶段提交协议的 <code>coordinator leader</code> 会确保在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>T</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>f</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TT.after(s_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>返回真之前客户端不会读取到事务<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>提交的数据。提交等待（<code>Commit wait</code>）确保了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>一定小于事务<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>提交的绝对时间，或者说<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub><mo>&lt;</mo><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msubsup><mi>e</mi><mi>i</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s_i &lt; t_{abs}(e_i^{commit})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0833279999999998em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。4.2.1节会描述提交等待（<code>Commit wait</code>）的实现。其证明如下：</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left right" columnspacing="0em 1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>s</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>&lt;</mo><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msubsup><mi>e</mi><mn>1</mn><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo><mspace width="2em"/></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi><mtext> </mtext><mi>w</mi><mi>a</mi><mi>i</mi><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msubsup><mi>e</mi><mn>1</mn><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>&lt;</mo><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msubsup><mi>e</mi><mn>2</mn><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo><mspace width="2em"/></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>u</mi><mi>m</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msubsup><mi>e</mi><mn>2</mn><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msubsup><mi>e</mi><mn>2</mn><mrow><mi>s</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi></mrow></msubsup><mo stretchy="false">)</mo><mspace width="2em"/></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>a</mi><mi>u</mi><mi>s</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msubsup><mi>e</mi><mn>2</mn><mrow><mi>s</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi></mrow></msubsup><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><msub><mi>s</mi><mn>2</mn></msub><mspace width="2em"/></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>s</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>&lt;</mo><msub><mi>s</mi><mn>2</mn></msub><mspace width="2em"/></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}s_1 &amp;&lt; t_{abs}(e_1^{commit}) \qquad&amp; (commit \, wait) \\t_{abs}(e_1^{commit}) &amp;&lt; t_{abs}(e_2^{start}) \qquad&amp; (assumption) \\t_{abs}(e_2^{start}) &amp;\le t_{abs}(e_2^{server}) \qquad&amp; (causality) \\t_{abs}(e_2^{server}) &amp;\le s_2 \qquad&amp; (start) \\s_1 &amp;&lt; s_2 \qquad&amp; (transitivity)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.572883999999999em;vertical-align:-3.536441999999999em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.036442em;"><span style="top:-6.161778em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.627114000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.123558000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8435559999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.623558000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-0.12355800000000094em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.536441999999999em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.036442em;"><span style="top:-6.161778em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span></span></span><span style="top:-4.627114000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8435559999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span></span></span><span style="top:-3.123558000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span></span></span><span style="top:-1.623558000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span></span></span><span style="top:-0.12355800000000094em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.536441999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.036442em;"><span style="top:-6.161778em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span><span style="top:-4.627114000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-3.123558000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-1.623558000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span><span style="top:-0.12355800000000094em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.536441999999999em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="根据某个时间戳读"><a class="markdownIt-Anchor" href="#根据某个时间戳读"></a> 根据某个时间戳读</h4><p>4.1.2节描述的单调不变式（<code>monotonicity invariant</code>）使得 <code>Spanner</code> 能正确的判断某个副本的状态是否足够满足某个客户端的读请求。每个副本都会记录一个称之为安全时间（<code>safe time</code>）的变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，这表示当前副本拥有到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>为止所有已提交事务的修改。因此，只要客户端希望读取的数据的时间戳 <code>t</code> 满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>≤</mo><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t \leq t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，则当前副本就能够提供读操作。</p><p>定义<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_{safe} = min(t_{safe}^{Paxos}, t_{safe}^{TM})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{safe}^{Paxos}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>表示每个 <code>Paxos</code> 状态机的安全时间，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{safe}^{TM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>表示每个事务管理器的安全时间。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{safe}^{Paxos}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>的实现很简单：它的值等于最近一次提交的 <code>Paxos</code> 的写操作的时间戳。因为 <code>Spanner</code> 会以单调递增的顺序分配时间戳，加上 <code>Paxos</code> 会按顺序应用写操作，因此某个写入操作一定不会在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{safe}^{Paxos}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>或其之前发生。</p><p>当不存在完成了准备阶段（但事务还未提交）的事务时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{safe}^{TM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>的值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>——即两阶段提交协议中已完成准备阶段，但还未完成提交阶段的场景（对于 <code>participant slave</code> 来说，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{safe}^{TM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>指向的是该副本所属主节点的事务管理器的安全时间，从节点可根据主节点下发的写请求中的元数据推断而来）。如果存在这样的事务，则受这些事务影响的状态是不确定的：因为对于 <code>participant replica</code> 来说并不知道这些事务最终是否会被提交。在4.2.1节会介绍，<code>Spanner</code> 的提交协议确保了每个 <code>participant</code> 能知道某个已准备完成的事务的时间戳的下界。每个 <code>participant leader</code>（对应某个 <code>Paxos</code> 组 <code>g</code>）会为某个事务<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在准备阶段的日志中记录一个时间戳<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>g</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">s_{i, g}^{prepare}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1952720000000001em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span>。<code>coordinator leader</code> 会确保对于组 <code>g</code> 中的每一个事务的参与者来说，事务的提交时间戳<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub><mo>≥</mo><msubsup><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>g</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">s_i \geq s_{i, g}^{prepare}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1952720000000001em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span>。因此，对于组 <code>g</code> 中的每个副本来说，在组 <code>g</code> 内完成准备阶段的所有事务<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup><mo>=</mo><mi>m</mi><mi>i</mi><msub><mi>n</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msubsup><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>g</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi></mrow></msubsup><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">t_{safe}^{TM} = min_i(s_{i, g}^{prepare}) - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1952720000000001em;vertical-align:-0.412972em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p><h4 id="为只读事务分配时间戳"><a class="markdownIt-Anchor" href="#为只读事务分配时间戳"></a> 为只读事务分配时间戳</h4><p>只读事务会有两阶段来执行：首先会分配一个时间戳<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，然后以快照读的方式来执行读取时间戳<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>处的数据。快照读可以由任何有着足够新的数据的副本执行。</p><p>可以简单的选取 <code>TT.now().latest</code> 作为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值，则类似于4.1.2节中关于写事务的描述，就一定能读取到在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>之前提交的事务修改。然而，如果客户端读取的副本的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>还没有更新（从系统层面来看，某个在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>之前提交的事务已执行成功，但当前副本并不一定知道这个信息），为了不破坏外部一致性，避免客户端读取到旧的数据，则可能需要阻塞客户端的读取直到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>更新完成（另外，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的选取也会导致<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的更新来确保不相交不变式（<code>disjointness invariant</code>））。为了减少阻塞的可能，<code>Spanner</code> 需要选取满足外部一致性前提下最老的时间戳。4.2.2节会介绍如何选取这个时间戳。</p><h3 id="细节"><a class="markdownIt-Anchor" href="#细节"></a> 细节</h3><p>本节会描述读写事务和之前介绍只读事务时省略的实现细节，以及某种特殊的事务类型实现用来支持原子的模式修改。然后会再描述某些对基础方案的改进。</p><h4 id="读写事务"><a class="markdownIt-Anchor" href="#读写事务"></a> 读写事务</h4><p>类似于 <code>Bigtable</code>，在某个事务提交前，其写操作会在客户端中缓冲。因此，某个事务中的读操作不会读取到同一个事务中的写操作。这个设计能很好的适配 <code>Spanner</code>，因为读取操作会返回被读取数据的时间戳，而未提交的写操作还未被分配时间戳。</p><p>读写事务中的读操作会使用 <code>wound-wait</code> 来避免死锁。客户端向主节点发起读操作，主节点会获取相应的锁然后读取最新的数据。当客户端的事务还在进行中时，它会定期的发送消息来避免 <code>participant leaders</code> 将其事务超时。当客户端完成所有的读操作以及缓冲了所有的写操作时，它就会开始执行两阶段提交。客户端会首先选择一个协调者组（<code>coordinator group</code>），然后给每一个 <code>participant leader</code> 发送一条提交消息，这个提交消息中包含了协调者的标识符以及所有客户端缓冲的写操作。由客户端发起两阶段提交避免了在广域链路下发送两次数据（如果两阶段提交不由客户端发起，可能的一种情况是客户端先将缓冲的写操作发给某个 <code>participant leader</code>，不管是这个 <code>participant leader</code> 自己成为 <code>coordinator leader</code> 还是让其他的 <code>participant leader</code> 成为 <code>coordinator leader</code>，都需要将客户端缓冲的写操作发送给其他的节点，这就造成发了两次数据）。</p><p>非协调者的 <code>participant leader</code> 会先获取写锁。然后它会选取一个比之前所有的事务的时间戳都大的时间戳作为准备阶段的时间戳（为了确保单调不变式（<code>monotonicity invariant</code>）），然后通过 <code>Paxos</code> 记录一条准备阶段的日志。然后每个 <code>participant leader</code> 会通知协调者自己所分配的时间戳。</p><p>协调者同样会先获取写锁，但是会跳过准备阶段。在收到所有 <code>participant leader</code> 的时间戳后，它会基于这些时间戳选择一个时间戳作为整个事务的时间戳。所选择的事务提交的时间戳 <code>s</code> 必须大于等于任意一个 <code>participant leader</code> 的准备阶段的时间戳（为了满足4.1.3节的限制约束），同时也要大于协调者收到提交消息时的时间戳 <code>TT.now().latest</code>，以及大于 <code>coordinator leader</code> 所有分配给之前的事务的时间戳（同样是为了确保单调不变式（<code>monotonicity invariant</code>））。然后 <code>coordinator leader</code> 也会通过 <code>Paxos</code> 记录一条提交的日志（或者在等待其他参与者时超时从而放弃当次事务）。</p><p>在允许参与事务的副本执行提交命令前，<code>coordinator leader</code> 会先进行等待直到 <code>TT.after(s)</code> 返回真，这就满足了4.1.2节描述的提交等待（<code>commit-wait</code>）规则。因为 <code>coordinator leader</code> 会基于 <code>TT.now().latest</code> 选择时间戳 <code>s</code>（<code>TT.now().latest</code> 只是其中的一个参考基准，但是实际的时间戳也必然会大于 <code>TT.now().latest</code>），然后现在需要等待直到当前的时间戳大于 <code>s</code>，则等待的时间至少是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>∗</mo><mover accent="true"><mi>ϵ</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">2 * \bar{\epsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.56778em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span></span>（时间的瞬时误差上限记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>，其值为 <code>TTinterval</code> 区间长度的一半，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>ϵ</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{\epsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.56778em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span></span>表示平均误差上限。因为最差的情况下当前的绝对时间可能正好是 <code>TTinterval</code> 区间的起始位置，从而需要等待整个区间长度）。不过这个等待时间基本上是和 <code>Paxos</code> 的通信重合的。在提交等待（<code>commit-wait</code>）结束后，协调者将事务的时间戳发送给客户端以及其他的 <code>participant leader</code>。每个 <code>participant leader</code> 通过 <code>Paxos</code> 记录事务的结果。每个参与者也同样在相同的时间戳下应用日志然后释放锁。</p><h4 id="只读事务"><a class="markdownIt-Anchor" href="#只读事务"></a> 只读事务</h4><p>给只读事务分配时间戳需要所有涉及的 <code>Paxos</code> 组进行协商。因此，<code>Spanner</code> 要求每个只读事务需要声明一个 <code>scope</code> 表达式，这个表达式汇总了整个只读事务会读取的键。<code>Spanner</code> 会自动的为独立的查询推导出 <code>scope</code>。</p><p>如果某个 <code>scope</code> 的值只涉及单个 <code>Paxos</code> 组，则客户端会向该 <code>Paxos</code> 组的主节点发起只读事务（当前 <code>Spanner</code> 的实现中只会由主节点为只读事务选取时间戳）。主节点选取时间戳<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>之后开始执行读操作。对于单点（<code>single-site</code>）读操作，<code>Spanner</code> 通常能选取一个比 <code>TT.now().latest</code> 更好的时间戳。定义 <code>LastTS()</code> 表示该 <code>Paxos</code> 组中最后一次提交的写操作的时间戳。如果当前没有任何已完成准备阶段的事务，那么选取 <code>LastTS()</code> 作为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值就已经能满足外部一致性：当前的只读事务能读取到上一次写操作的结果，因此该只读事务也发生在这之后。</p><p>如果 <code>scope</code> 的值涉及了多个 <code>Paxos</code> 组，这就有几种选择。其中最复杂的选择就是和每一个 <code>Paxos</code> 组的主节点通信，然后基于每个 <code>Paxos</code> 组的 <code>LastTS()</code> 来选取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。<code>Spanner</code> 目前选取了更简单的实现。客户端省略了和所有涉及的 <code>Paxos</code> 组的协商阶段，直接选取 <code>TT.now().latest</code> 作为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值（当然前面说过这会造成阻塞，需要等待副本的安全时间满足大于等于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）。因此该事务中所有的读操作都可以发送给有着足够新的数据的副本处理。</p><h4 id="模式变更事务"><a class="markdownIt-Anchor" href="#模式变更事务"></a> 模式变更事务</h4><p><code>TrueTime</code> 使得 <code>Spanner</code> 能够支持原子的模式变更。使用标准的事务来处理模式变更是不切实际的，因为涉及的参与者数量（数据库中 <code>Paxos</code> 组的数量）可能有百万级别。<code>Bigtable</code> 支持单个数据中心内的原子模式变更，不过执行模式变更时会阻塞所有的其他操作。</p><p><code>Spanner</code> 的模式变更事务基本上是标准事务的一个非阻塞式的变种。首先，它会被分配一个未来的时间戳，这个时间戳是在准备阶段生成的。因此，涉及几千台服务器的模式变更能够在尽可能少的影响到并发进行的事务的前提下完成。第二，依赖需要变更的模式的读写操作会和分配了时间戳 <code>t</code> 的模式变更事务保持同步：如果读写操作的时间戳小于 <code>t</code>，则这些操作可以继续进行；但是如果读写操作的时间戳大于 <code>t</code>，则需要阻塞等待模式变更事务完成。如果没有 <code>TrueTiime</code>，则定义模式修改发生在时间戳 <code>t</code> 就没有意义。</p><h4 id="改进"><a class="markdownIt-Anchor" href="#改进"></a> 改进</h4><p>上述定义的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>T</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">T_{safe}^{TM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>存在一个缺陷，某个已完成准备阶段的事务会阻止<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>更新（因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_{safe} = min(t_{safe}^{Paxos}, t_{safe}^{TM})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，在4.1.3节有描述，当存在完成准备阶段的事务时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup><mo>=</mo><mi>m</mi><mi>i</mi><msub><mi>n</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msubsup><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>g</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi></mrow></msubsup><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">t_{safe}^{TM} = min_i(s_{i, g}^{prepare}) - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1952720000000001em;vertical-align:-0.412972em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，需要依赖各参与者所分配的准备阶段的时间戳）。因此，需要读取后面的时间戳的读操作都无法完成，即使该读操作和当前的事务没有冲突。一种解决方案是建立某个范围内的键到已完成准备阶段的事务的时间戳的映射。这部分的信息可以保存在锁表中，因为锁表本身已经保存了某个范围内的键到锁的元数据的映射。当 <code>Spanner</code> 收到一个读操作时，会先判断要读取的键是否存在已完成准备阶段但还未完成提交的事务，如果不存在这样的事务，则如4.1.3节所述<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{safe}^{TM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>的值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>的值就只取决于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{safe}^{Paxos}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>。</p><p><code>LastTS()</code> 也有类似的问题：如果某个事务刚刚提交，一个无冲突的只读事务所分配的时间戳<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>依然要在刚提交的事务的时间戳之后。因此，由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>的存在，该只读事务也有可能延迟。这个问题的解决方案也类似于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>T</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">T_{safe}^{TM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>，同样是建立某个范围内的键到 <code>LastTS()</code> 的映射（不过目前 <code>Spanner</code> 还未实现这个优化）。当 <code>Spanner</code> 收到某个只读事务时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值取决于读操作涉及的键所对应的 <code>LastTS()</code> 的最大值，除非同时还存在已完成准备阶段但还未完成提交的事务（则又回到上面一种情况）。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{safe}^{Paxos}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>的问题在于如果没有写操作，则这个值始终得不到更新。因此，如果某个期望读取时间戳 <code>t</code> 的快照读落在了某个最近一次写操作的时间戳小于 <code>t</code> 的 <code>Paxos</code> 组中，那么在没有新的写操作的情况下，这个快照读始终无法被执行。<code>Spanner</code> 通过主节点租约区间的不相交不变式（<code>disjointness invariant</code>）来解决这个问题。每个主节点维护了一个 <code>Paxos</code> 序号 <code>n</code> 到可能分配给下一个序号 <code>n + 1</code> 的最小时间戳的映射，即 <code>MinNextTS(n)</code>。当某个副本应用了序号 <code>n</code> 的指令后，则可以将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{safe}^{Paxos}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>的值更新为 <code>MinNextTS(n) - 1</code>，因为下一个被分配的最小时间戳为 <code>MinNextTS(n)</code>，减1就保证了不会超过这个值。</p><p>对于单个主节点来说可以很轻易的保证 <code>MinNextTS()</code> 的值的正确性（这里有一种可能的粗暴的方案，例如主节点设定10毫秒后才能提交下一个事务，如果10毫秒内来了一个事务，则直接等待到10毫秒后）。因为 <code>MinNextTS()</code> 的值必然落在当前主节点的租期内，又由于各个主节点租期之间的不相交不变式（<code>disjointness invariant</code>）的存在，使得 <code>Spanner</code> 能够在跨主节点时依然保证 <code>MinNextTS()</code> 的值的正确性（如果 <code>MinNextTS()</code> 的值超过了当前主节点的任期，则 <code>MinNextTS()</code> 的值的正确性就交由下一个主节点保证，从而转为了单主节点问题）。如果某个主节点在当前租期快过期时想要增加 <code>MinNextTS()</code> 的值，那么这个主节点就必须先延长租期。注意<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（某个主节点使用的最大时间戳）始终会更新为 <code>MinNextTS()</code> 的最大值来确保不相交不变式（<code>disjointness invariant</code>）。</p><p>主节点默认每8秒增加一次 <code>MinNextTS()</code> 的值（因为如果一直没有写操作，则需要不断更新 <code>MinNextTS()</code> 来确保后续的读请求不会阻塞）。因此，在不存在已完成准备阶段的事务的情况下，某个空闲的 <code>Paxos</code> 组中健康的副本在最差情况下需要等待8秒才能返回数据给客户端。主节点可能也会根据从节点的要求来更新 <code>MinNextTS()</code> 的值。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://pdos.csail.mit.edu/6.824/papers/spanner.pdf">Spanner: Google’s Globally-Distributed Database</a></li><li><a href="https://cloud.google.com/spanner/docs/replication#benefits_of_cloud_spanner_replication">Benefits of Cloud Spanner replication</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Spanner&lt;/code&gt; 是一个由 &lt;code&gt;Google&lt;/code&gt; 设计，构建和部署的可扩展的全球分布式数据库。从高层次</summary>
      
    
    
    
    
    <category term="Paper" scheme="https://frederick-s.github.io/tags/Paper/"/>
    
    <category term="MIT 6.824" scheme="https://frederick-s.github.io/tags/MIT-6-824/"/>
    
    <category term="Distributed Systems" scheme="https://frederick-s.github.io/tags/Distributed-Systems/"/>
    
    <category term="Spanner" scheme="https://frederick-s.github.io/tags/Spanner/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.824 - Frangipani: A Scalable Distributed File System</title>
    <link href="https://frederick-s.github.io/2022/06/11/mit-6.824-frangipani/"/>
    <id>https://frederick-s.github.io/2022/06/11/mit-6.824-frangipani/</id>
    <published>2022-06-10T16:00:00.000Z</published>
    <updated>2022-06-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>这是一篇上世纪九十年代的论文，在当时的环境下，安装新工作站的需求与日俱增，而针对大量工作站的文件系统管理却费时费力。为了保存更多的文件和服务更多的用户，就需要更多的磁盘，并挂载到更多的机器上。某一组文件经常会被手动分配给某些特定的磁盘，当磁盘空间不足，异常或者成为性能热点时，就需要手动移动或者复制文件到其他磁盘上。使用 <code>RAID</code> 技术管理多个磁盘只能解决部分问题；当系统增长到需要多个磁盘阵列和多台服务器时，系统管理问题也随之而来。</p><p><code>Frangipani</code> 是一个可扩展的分布式文件系统，它能统一管理挂载在不同机器上的磁盘，对外来说，这些磁盘构成了一个独立的共享存储池。组成 <code>Frangipani</code> 的机器默认能够被统一管理而且相互间能安全的通信。在 <code>Frangipani</code> 之前已经有了一些分布式文件系统的实现，并且在吞吐和容量上有很好的扩展性。<code>Frangipani</code> 的一个显著特性是它的内部结构非常简单——各台协作的机器共同访问一个通用的存储，并使用锁来保证访问的同步性。这种简单的结构使得只需要少量的机器就能处理系统恢复，重配置和负载均衡。<code>Frangipani</code> 的另一个关键特性是相比于已知的分布式文件系统，它结合了一系列功能使得 <code>Frangipani</code> 更易于使用和管理：</p><ol><li>所有用户读取到的文件内容都相同。</li><li>可以轻易的向 <code>Frangipani</code> 添加更多的服务器来增加存储容量和吞吐，而无需修改已有服务器的配置，或者中断其操作。这些服务器可以像积木一样根据需要搭建来构建更大的文件系统。</li><li>系统管理员添加新用户时无需关心新用户的数据会由哪台服务器管理或者保存在哪个磁盘上。</li><li>系统管理员可以对整个文件系统进行完整和一致的备份，而无需停止服务。备份可以在线进行，使得用户可以快速访问被意外删除的文件。</li><li>文件系统可以在无需人工干预的情况下容忍机器、网络、磁盘异常并自行恢复。</li></ol><p><code>Frangipani</code> 构建于 <code>Petal</code> 之上，<code>Petal</code> 是一个易于管理的分布式存储系统，为客户端提供了虚拟磁盘。和物理磁盘一样，<code>Petal</code> 的虚拟磁盘也是以块（<code>block</code>）的方式来读取和写入。和物理磁盘不同的是，一个 <code>Petal</code> 虚拟磁盘提供了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>字节的稀疏地址空间，并且只在需要的时候才会分配物理存储。<code>Petal</code> 也支持数据备份来保证高可用。<code>Petal</code> 同时提供了高效的快照功能来支持一致性备份。<code>Frangipani</code> 从下层存储系统继承了扩展性，容错和易于管理的特性，不过将这些特性扩展到文件系统还需要些细致的设计。下一节将会详细描述 <code>Frangipani</code> 的结构以及和 <code>Petal</code> 的关系。</p><p><img src="/images/frangipani-1.png" alt="alt" /></p><p>上图展示了 <code>Frangipani</code> 的层级设计。多个可替换的 <code>Frangipani</code> 服务器运行于一个共享的 <code>Petal</code> 虚拟磁盘之上，不同的用户程序可以各自通过连接的 <code>Frangipani</code> 服务器来访问相同的文件，而各 <code>Frangipani</code> 服务器间通过分布式锁服务来保证数据的一致性。通过添加 <code>Frangipani</code> 服务器可以实现对文件系统层的扩展。<code>Frangipani</code> 通过异常服务器的自动恢复和借助依然存活的服务器来提供服务实现了容错。相比于中心化的网络文件服务器，<code>Frangipani</code> 通过将负载分摊到各个正在使用文件的机器上来提供更好的负载均衡。出于扩展性，容错和负载均衡的考虑，<code>Petal</code> 和 <code>Frangipani</code> 用到的锁服务也是分布式的。</p><p><code>Frangipani</code> 服务器默认信任 <code>Petal</code> 服务器和锁服务。<code>Frangipani</code> 的最佳使用场景是在同一个管理域下的工作站集群，虽然它也可以扩展到其他管理域下。因此，<code>Frangipani</code> 可以被看做是一个集群文件系统。</p><p>论文的作者在 <code>DIGITAL Unix 4.0</code> 之上实现了 <code>Frangipani</code>。得益于 <code>Frangipani</code> 在 <code>Petal</code> 之上构建的简洁的层级设计，使得在几个月内实现了一个可用的系统。</p><p><code>Frangipani</code> 的目标运行环境的场景是程序开发和工程。测试表明在这样的负载下，<code>Frangipani</code> 有着优秀的性能并且能很好的扩展，而最终的性能上限则受限于网络能力。</p><h2 id="系统结构"><a class="markdownIt-Anchor" href="#系统结构"></a> 系统结构</h2><p><img src="/images/frangipani-2.png" alt="alt" /></p><p>上图展示了 <code>Frangipani</code> 系统下各机器的一种典型职责分配。最上方的机器运行着用户程序和 <code>Frangipani</code> 的文件服务模块，这些机器无需挂载磁盘。最下方的机器运行着 <code>Petal</code> 和分布式锁服务。</p><p>不过在实际场景中，组成 <code>Frangipani</code> 的机器无需严格按照上图中的描述承担职责。<code>Petal</code> 和 <code>Frangipani</code> 文件服务不一定要运行在不同的机器上；每台运行着 <code>Petal</code> 的机器也可以同时运行着 <code>Frangipani</code> 文件服务，特别是当 <code>Petal</code> 的机器负载不高时。分布式锁服务独立于系统中的其他服务，上图中描述了每个 <code>Petal</code> 机器上运行着一个锁服务，不过它们也可以运行在 <code>Frangipani</code> 或者其他可用的机器上。</p><h3 id="组件"><a class="markdownIt-Anchor" href="#组件"></a> 组件</h3><p>如前面的图中所示，用户程序通过标准的系统调用接口来访问 <code>Frangipani</code>。运行在不同机器上的应用程序能访问到相同的文件，而且看到的文件内容也是相同的；也就是说，如果在某台机器上修改了某个文件或者文件夹，那么运行在其他机器上的程序也能马上看到这个修改。对于使用 <code>Frangipani</code> 的程序来说，<code>Frangipani</code> 提供的文件操作语义保证和本地 <code>Unix</code> 文件系统提供的文件操作语义保证相同：程序对文件的修改会先暂存在内核的缓冲区中，在下一次的 <code>fsync</code> 或者 <code>sync</code> 系统调用之前，系统不保证对文件的修改会保存到非易失存储上，不过系统会记录对文件元数据的修改并且可选的保证当系统调用返回时，文件的元数据修改已经保存到了非易失存储上。和本地文件系统的文件操作语义有点小小的不同，<code>Frangipani</code> 中文件的最后访问时间是一个近似值，从而避免了每次读取文件时都需要写元数据。</p><p>每台机器上的 <code>Frangipani</code> 文件服务模块运行在操作系统内核中。通过内核的 <code>file system switch</code> <code>Frangipani</code> 将自己注册为一个可用的文件系统实现。<code>Frangipani</code> 的文件服务模块使用了内核的缓冲区来缓存最近使用的文件数据。它通过本地的 <code>Petal</code> 设备驱动来实现对 <code>Petal</code> 虚拟磁盘的读写。每个文件服务器使用相同的数据结构来读取和写入文件到共享的 <code>Petal</code> 磁盘上，不过各服务器会在 <code>Petal</code> 磁盘的不同区域上针对进行中的修改维护各自的重做日志。因为 <code>Frangipani</code> 的重做日志保存在 <code>Petal</code> 中，所以当某个 <code>Frangipani</code> 服务器异常时，其他的服务器可以通过 <code>Petal</code> 访问日志并进行数据恢复。各 <code>Frangipani</code> 服务器之间无需通信；它们只会和 <code>Petal</code> 和分布式锁通信。这就简化了服务器的添加，删除和恢复。</p><p><code>Petal</code> 的设备驱动程序掩盖了 <code>Petal</code> 分布式的特性，对操作系统的上层应用来说，<code>Petal</code> 就等同于是一块本地磁盘。驱动程序负责和正确的 <code>Petal</code> 服务器通信，以及如果当前的服务器发生异常，能切换到另一台可用的服务器。类似 <code>Digital Unix</code>  的文件系统都可以运行在 <code>Petal</code> 之上，不过只有 <code>Frangipani</code> 提供了多客户端下访问同一文件的数据一致性特性。</p><p><code>Petal</code> 的各服务器基于本地挂载的物理磁盘并通过协作来向 <code>Frangipani</code> 提供大型，可扩展，容错的虚拟磁盘。<code>Petal</code> 可以容忍一个或多个磁盘或者服务器异常，只要大多数的 <code>Petal</code> 服务器依然存活并且相互之间可以通信，以及每个数据块都至少有一个副本保存在物理存储上并且能够被访问。</p><p><code>Frangipani</code> 用到的锁服务能够为网络中的客户端提供通用的读写锁服务。出于容错和扩展性考虑，它的实现是分布式的。<code>Frangipani</code> 使用锁服务来协调对虚拟磁盘的访问，以及保证各服务器内文件缓存的一致性。</p><h3 id="安全和客户端服务器配置"><a class="markdownIt-Anchor" href="#安全和客户端服务器配置"></a> 安全和客户端/服务器配置</h3><p>如 <code>Fugure 2</code> 所示，每台运行着用户程序的机器同时运行着 <code>Frangipani</code> 的文件服务模块。虽然这种配置有利于负载均衡和扩展，不过存在安全隐患。每个 <code>Frangipani</code> 机器都可以对共享的 <code>Petal</code> 虚拟磁盘上的数据块进行任意读写，所以 <code>Frangipani</code> 必须运行在受信任的操作系统上；类似于 <code>NFS</code> 的远程文件访问协议中的身份认证还不足以保证安全性。完整的安全性也要求 <code>Petal</code> 和锁服务运行在受信任的操作系统上，并且 <code>Frangipani</code>、<code>Petal</code>、锁服务这三个组件都需要能够互相认证。最后，为了保证文件数据的私有性，也需要保证没有人能够窃听 <code>Petal</code> 和 <code>Frangipani</code> 机器间的网络通信。</p><p>一种解决方案是运行用户程序的机器被设置为不允许运行自定义修改的操作系统，同时这些机器间通过一个私有网络连接并且用户程序没有权限访问。不过这并不是说需要将所有的机器放在同一个机房中并通过私有的物理网络相连；可以借助某些加密技术来实现系统的安全启动，以及某些认证技术和加密链路来保证通信安全性。另外，对于某些应用程序来说，一个不完整的解决方案也是可以接受的；典型的如 <code>NFS</code> 就不能防止网络窃听以及杜绝用户在自己的工作站上运行修改后的操作系统。论文的作者并没有实现所有的安全措施，不过 <code>Frangipani</code> 基本也可以达到 <code>NFS</code> 的安全级别，<code>Petal</code> 服务器只会接受来自已知网络地址的 <code>Frangipani</code> 服务器的请求。</p><p><img src="/images/frangipani-3.png" alt="alt" /></p><p>如上图所示，<code>Frangipani</code> 文件系统可以扩展到外部非受信的管理域中。图中区分开了 <code>Frangipani</code> 客户端和服务端。只有受信的 <code>Frangipani</code> 服务端可以和 <code>Petal</code> 以及锁服务通信。这三个组件可以放置在一个受限制的环境中并且通过私有的网络连接。而外部的非受信远程客户端只能和 <code>Frangipani</code> 服务端通信，而不能直接访问 <code>Petal</code> 服务器。</p><p>客户端可以和 <code>Frangipani</code> 服务端以任何操作系统支持的文件访问协议通信，例如 <code>DCE/DFS</code>，<code>NFS</code>，<code>SMB</code>，因为对于运行着 <code>Frangipani</code> 服务端的机器来说，<code>Frangipani</code> 就类似于是个本地文件系统。当然，如果访问协议本身支持一致性访问是最好的（例如 <code>DCE/DFS</code>），从而使得 <code>Frangipani</code> 的多服务器间的一致性不会在上一层丢失。理想情况下，客户端的访问协议需要支持故障转移。上述提到的协议并不直接支持故障转移，不过在其他系统中如果某台服务器发生异常，会有另一台服务器接管并复用异常服务器的 <code>IP</code> 地址，因此可以在这里应用同样的手段。</p><p>除了安全之外，还有第二个原因要使用上述的客户端/服务端配置。因为 <code>Frangipani</code> 运行在操作系统内核，不能快速的适配不同的操作系统甚至是不同版本的 <code>Unix</code>。所以通过远程客户端的方式就能使得运行不支持的操作系统的客户端也能够使用 <code>Frangipani</code>。</p><h3 id="讨论"><a class="markdownIt-Anchor" href="#讨论"></a> 讨论</h3><p>构建文件系统的分层思想——低层提供存储服务，高层提供命名，文件夹和文件服务，并不是 <code>Frangipani</code> 独有的。最早应用这个思想的是 <code>Universal File Server</code>。不过，<code>Petal</code> 提供的存储功能和早先的系统大有不同，从而引申出不同的上层结构设计。</p><p><code>Frangipani</code> 的设计是基于 <code>Petal</code> 提供的抽象存储服务，作者还未充分考虑为了适配其他的存储服务（例如 <code>NASD</code>）需要对 <code>Frangipani</code> 做出哪些修改。</p><p><code>Petal</code> 提供了高可用的存储服务并且能够通过添加资源来实现对吞吐和容量的扩展。不过，<code>Petal</code> 不提供协同功能或者在多个客户端间共享存储。另外，大部分的应用程序不能直接使用 <code>Petal</code> 的接口因为 <code>Petal</code> 面向的是磁盘而不是文件。<code>Frangipani</code> 在 <code>Petal</code> 之上构建了文件系统层使得在保留和扩展了 <code>Petal</code> 有用的特性的同时对应用程序更加易用。</p><p><code>Frangipani</code> 的一个优势是能够透明的添加服务器，删除服务器以及实现故障恢复。通过将预写日志、锁和提供一致性访问、高可用的存储结合使用，<code>Frangipani</code> 能轻易的实现这个特性。</p><p><code>Frangipani</code> 的另一个特性是能在文件系统运行时生成一致性的备份。这个机制会在后面介绍。</p><p>不过 <code>Frangipani</code> 的设计可能在三个方面上存在问题。基于启用了副本的 <code>Petal</code> 虚拟磁盘构建的 <code>Frangipani</code> 有时候会记录重复的日志，一次是 <code>Frangipani</code> 自己写入的日志，这里是 <code>Frangipani</code> 为客户端提供服务；另一次是 <code>Petal</code>记录的日志，这里以 <code>Petal</code> 的视角来说 <code>Frangipani</code> 成为了客户端。第二，<code>Frangipani</code> 无法根据磁盘的位置来选择在哪里保存数据，因为 <code>Petal</code> 提供的是虚拟的磁盘，之所以有这个需求可能是因为类似于 <code>GFS</code> 选择在哪里放置副本一样，如果 <code>Frangipani</code> 能知道具体磁盘的位置，它就能选择一个距离客户端近的磁盘保存文件。最后，<code>Frangipani</code> 会对整个文件或者文件夹加锁而不是对某个数据块加锁。不过作者还没有足够的使用经历来评估这三个问题的影响，不过撇开它们不谈，在作者所处环境下测试出的 <code>Frangipani</code> 的性能还是不错的。</p><h2 id="磁盘布局"><a class="markdownIt-Anchor" href="#磁盘布局"></a> 磁盘布局</h2><p><code>Frangipani</code> 使用 <code>Petal</code> 提供的巨大、稀疏的磁盘地址空间来简化其数据结构。这个想法是受之前有着巨大内存空间的计算机上的相关工作所启发。因为有着如此巨大的地址空间所以可以将其任意切分。</p><p>一个 <code>Petal</code> 虚拟磁盘有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>字节的地址空间。<code>Petal</code> 只会在物理磁盘空间写入后才会将其提交到虚拟地址中。<code>Petal</code> 同时提供了 <code>decommit</code> 原语用来释放某个范围内的虚拟地址所关联的物理磁盘空间。</p><p>为了使内部的数据结构足够小，<code>Petal</code> 会以较大的数据块来提交（<code>commit</code>）和回收（<code>decommit</code>）虚拟地址，目前的数据块大小是 <code>64 KB</code>。也就是说，对于每个 <code>64 KB</code> 的虚拟地址空间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo>∗</mo><msup><mn>2</mn><mn>16</mn></msup><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><msup><mn>2</mn><mn>16</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[a * 2^{16}, (a + 1) * 2^{16})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，如果有数据写入且没有被回收，那么同时就需要分配 <code>64 KB</code> 的物理磁盘地址空间。因此 <code>Petal</code> 客户端写入的数据不能太稀疏，否则可能由于碎片化造成物理磁盘空间浪费。下图展示了 <code>Frangipani</code> 如何切分 <code>Petal</code> 的虚拟磁盘空间：</p><p><img src="/images/frangipani-4.png" alt="alt" /></p><p>图中的第一个区域用于保存共享的配置参数和其他信息。这个区域的最大大小是 <code>1 T</code>，不过目前实际上只用了几 <code>K</code>。</p><p>第二个区域用于保存日志。每个 <code>Frangipani</code> 服务器会在这块区域中选择一部分来保存自己的私有日志。这里总共预留了 <code>1 T</code> 的空间，并切分为256个分区，所以可以保存256份日志。这就限制了一个 <code>Petal</code> 虚拟磁盘最多支持256个 <code>Frangipani</code> 服务器，不过这可以轻易的通过调整分区个数来扩展。</p><p>第三个区域用于保存分配位图，从而知道余下的虚拟空间中哪些是可用的。每个 <code>Frangipani</code> 服务器会独占式的锁住这块区域中的某一部分。当某台 <code>Frangipani</code> 服务器的分配位图空间不够时，它会再次找到可用的区域然后加锁使用。整个区域的大小是 <code>3 T</code>。</p><p>第四个区域用于保存 <code>inode</code>。每个文件需要一个 <code>inode</code> 来保存元数据，例如访问的时间戳和指向文件数据位置的指针。对于符号链接来说它们的数据直接保存在了 <code>inode</code> 中。每个 <code>inode</code> 的大小为512字节，和磁盘块的大小相同，从而避免了两个服务器同时访问同一个磁盘块上保存的不同 <code>inode</code> 所带来的竞争（也就是 <code>false sharing</code>，<a href="https://pdos.csail.mit.edu/6.824/papers/frangipani-faq.txt">FAQ for Frangipani, Thekkath, Mann, Lee, SOSP 1997</a> 中对这个问题有所解释，磁盘数据的读取以块为单位，如果 <code>inode</code> 小于512字节，某个 <code>Frangipani</code> 服务器先读取了磁盘数据块并缓存，此时另一个服务器需要读取和修改同一个磁盘数据块上的 <code>inode</code>，那么为了保证缓存一致性，第一个服务器再次读取 <code>inode</code> 时就需要重新读取磁盘数据块并刷新缓存，造成两个服务器交替的读取修改同一个数据块的内容，缓存也就失去了意义，而本质上两个服务器之间并不应该有竞争。）。整个区域的大小是 <code>1 TB</code>，所以可以保存<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个 <code>inode</code>。在位图分配区域中的比特位和 <code>inode</code> 的映射是固定的，也就是说根据位图分配区域中的比特位地址就能推算出对应 <code>inode</code> 的地址，所以每个 <code>Frangipani</code> 为新文件所创建的 <code>inode</code> 地址在第四个区域中的偏移比例和该 <code>inode</code> 对应位图分配区域中的比特位的偏移比例是一致的。不过任何一个 <code>Frangipani</code> 都可能读写或释放某个已经存在的文件的 <code>inode</code>。</p><p>第五个区域用于保存小数据块，每个数据块大小为 <code>4 KB</code>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>12</mn></msup></mrow><annotation encoding="application/x-tex">2^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>字节）。一个文件的前 <code>64 KB</code>（16个数据块） 的内容会保存在小数据块中。如果某个文件的大小超过 <code>64 KB</code>，则超过的部分会保存在一个大数据块中。<code>Frangipani</code> 在一个 <code>Fetal</code> 虚拟磁盘上最多可以分配<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>47</mn></msup></mrow><annotation encoding="application/x-tex">2^{47}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></span>字节（<code>128 T</code>）的小数据块，共计<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>35</mn></msup></mrow><annotation encoding="application/x-tex">2^{35}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>块，是 <code>inode</code> 最大数量的16倍。</p><p><code>Petal</code> 虚拟磁盘剩下的地址空间用于保存大数据块。每个大数据块有 <code>1 TB</code> 空间。</p><p>选择 <code>4 KB</code> 作为数据块大小会比更小的数据块的策略更容易产生磁盘碎片。同时，一个 <code>inode</code> 512字节在某种程度上也是空间浪费。可以将小文件直接保存在 <code>inode</code> 中来缓解这个问题。虽然存在碎片和空间浪费的问题，不过出于设计简洁性的考虑，作者认为这是一种合理的折中选择。</p><p>在当前的设计下，<code>Frangipani</code> 能保存的大文件个数小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>24</mn></msup></mrow><annotation encoding="application/x-tex">2^{24}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>（1600万，大文件需要保存在大数据块中，一个大数据块 <code>1 T</code>，而虚拟空间最大地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>24</mn></msup><mi>T</mi></mrow><annotation encoding="application/x-tex">2^{24} T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>，又因为不是整个空间都用来保存大文件，所以实际个数小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>24</mn></msup></mrow><annotation encoding="application/x-tex">2^{24}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>），大文件是指大于 <code>64 KB</code> 的文件。另外，<code>Frangipani</code> 能保存文件的最大大小是16个小数据块加上一个大数据块（<code>64 KB</code> 加 <code>1 TB</code>）。如果需要保存更多的文件，可以通过减小大数据块的大小来解决；以及允许一个大文件可以保存在多个大数据块中，这样就可以提高最大能保存文件的大小。如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>字节的地址空间不够，则一个 <code>Frangipani</code> 服务器可以支持扩展为多个 <code>Petal</code> 虚拟磁盘组成的 <code>Frangipani</code> 文件系统。</p><p>作者基于之前文件系统的使用经验设定了上述的系统参数。作者认为这种配置已经足够满足需求，不过还是需要时间和实际使用来检验。<code>Frangipani</code> 的设计足够灵活所以可以通过备份和恢复来验证合适的磁盘布局。</p><h2 id="日志和恢复"><a class="markdownIt-Anchor" href="#日志和恢复"></a> 日志和恢复</h2><p><code>Frangipani</code> 通过元数据的预写重做日志来简化异常恢复和提高性能；不过用户的数据并不会记录到日志中。每个 <code>Frangipani</code> 服务器会将自己的日志保存在 <code>Petal</code> 中。当某个 <code>Frangipani</code> 服务器需要修改某个元数据时，它会首先生成一条日志来描述具体的修改内容并将其添加到内存日志中。这些内存中的日志会周期性的按照修改请求发起的顺序写入到 <code>Petal</code> 中（<code>Frangipani</code> 同时也支持将日志同步的写入到 <code>Petal</code> 中，这会稍微提高容错性不过会增加元数据更新操作的延迟。）。只有当某条日志写入 <code>Petal</code> 之后，系统才会真正修改对应文件的元数据。实际文件的元数据更新会交由一个 <code>Unix</code> 的 <code>update</code> 守护进程来周期性（大概每隔30秒）的更新。</p><p>在当前的实现中，<code>Frangipani</code> 写到 <code>Petal</code> 的日志的最大大小为 <code>128 KB</code>。根据 <code>Petal</code> 的空间分配策略，一份日志会拆分到两个不同的物理磁盘上，每个磁盘上的大小为 <code>64 KB</code>。<code>Frangipani</code> 会以环形缓冲（<code>circular buffer</code>）的方式来管理所分配的日志空间。当日志空间满时，<code>Frangipani</code> 会回收25%的最老的日志空间来存放新的日志。一般来说，被回收的日志所对应的元数据修改都应该已经写入到了 <code>Petal</code> 中（通过之前的 <code>sync</code> 操作），因此回收日志时不需要额外的写操作。如果回收日志时发现存在某些待回收的日志所对应的元数据修改还没有写入到 <code>Petal</code>，则需要先执行元数据的写入操作再回收日志。根据日志缓冲区和单条 <code>Frangipani</code> 日志的大小（80-128字节），如果在两个 <code>sync</code> 周期内存在1000-1600个元数据修改操作就能写满整个日志缓冲区。</p><p>如果某个 <code>Frangipani</code> 服务器发生异常，系统最终能检测到异常并根据该 <code>Frangipani</code> 服务器的日志进行恢复。<code>Frangipani</code> 服务器异常可以被所访问的客户端发现，或者当锁服务向持有锁的 <code>Frangipani</code> 服务器要求返回锁而没有响应时发现。当异常发生时，负责恢复的守护进程会临时拥有异常的 <code>Frangipani</code> 服务器的日志和锁的所有权。异常恢复进程会先找到异常服务器日志的起始位置和结束位置，然后逐条检查每一条日志，判断哪些日志所对应的元数据更新还没有被执行。当日志处理完成后，异常恢复进程就会释放所持有的锁并清空日志。其他的 <code>Frangipani</code> 服务器就可以在不受异常服务器影响的情况下继续工作，而异常的服务器可以在稍后被重启（对应的日志为空）。只要底层的 <code>Petal</code> 磁盘依然可用，系统就能容忍任意数量的 <code>Frangipani</code> 服务器异常。</p><p>为了确保异常恢复进程能找到异常服务器的日志的结束位置（即使磁盘控制器没有按照顺序写数据），系统为每512字节的日志数据块分配了一个递增的序号。只要发现某个数据块的序号小于前一个数据块的序号，那就说明前一个数据块就是日志的结束位置。</p><p><code>Frangipani</code> 确保了日志和异常恢复能正确的处理多条日志。不过这在细节上有几点要注意。</p><p>首先，在下一节会介绍到 <code>Frangipani</code> 的锁协议保证了多个服务器对同一个数据的更新请求会被串行执行。某个持有写锁且修改了数据的服务器需要先将修改的数据写回到 <code>Petal</code> 后才能释放锁，所以要么是该服务器在正常情况下数据更新完成后主动释放锁，要么是服务器异常后由异常恢复进程在数据更新完成后释放锁。这说明对于任意的数据块来说，整个系统中最多只可能有一条数据修改的日志还未完成。</p><p>第二，<code>Frangipani</code> 确保了异常恢复进程只会处理异常服务器在持有锁之后但还未释放锁期间记录的日志。这是为了确保锁协议保证的更新串行化不会被破坏。<code>Frangipani</code> 使用了更强的条件限制来实现这一保证：异常恢复进程永远不会重新执行一个已经执行完成的数据更新。为了保证这一点，<code>Frangipani</code> 给每512字节的元数据块分配了一个版本号。而类似于文件夹的元数据有可能会跨多个数据块，所以也会有多个版本号。对于每个日志要修改的数据块，日志会记录修改的内容及新的版本号。在异常恢复时，恢复进程会比较当前元数据块最新的版本号和日志中记录的版本号，只有当日志中的版本号大于当前最新的版本号时，恢复进程才会执行重做日志。</p><p>由于 <code>Frangipani</code> 记录更新日志时不会记录用户数据，而只有元数据块给版本号预留了空间。这就带来了一个潜在问题。如果某个数据块一开始被用于保存元数据，后来空间被释放，然后又被用来保存用户数据，那么恢复进程就不能正确的跳过依然引用了这个元数据块（现在的用户数据块）的日志，因为原来保存元数据块中的版本号信息已经被用户数据所覆盖，所以恢复进程就无法比较日志中的版本号的大小。<code>Frangipani</code> 通过要求被释放的元数据块只能用于保存新的元数据来避免这个问题。</p><p>最后，<code>Frangipani</code> 保证在任一时刻只会有一个异常恢复进程在恢复重做某个异常服务器的日志。<code>Frangipani</code> 通过对日志文件的互斥锁来实现这一保证。</p><p><code>Frangipani</code> 的日志和异常恢复机制假定当出现磁盘写异常时，单个扇区中的内容要么都是旧的，要么都是新的，而不会是两者的混合。如果某个磁盘扇区已损坏并且在读操作时返回 <code>CRC</code> 异常，那么 <code>Petal</code> 内置的副本机制通常能恢复对应的数据。如果某个扇区的副本都损坏了，或者 <code>Frangipani</code> 内部的数据结构由于软件 <code>bug</code> 造成损坏，则需要对元数据进行一致性检查以及需要一个恢复工具（例如 <code>Unix</code> 的 <code>fsck</code>）进行数据恢复。不过论文的作者写论文时还未实现这个工具。</p><p><code>Frangipani</code> 的日志并不是为了给用户提供高层次的执行语义保证。它的目的是为了提高元数据更新的性能以及发生服务器异常时通过避免执行 <code>fsck</code> 这样的恢复工具来加快异常恢复速度。因为 <code>Frangipani</code> 的日志只会记录元数据的更新，不会记录用户数据，所以站在用户的视角来说，当系统发生异常时，文件系统的状态和异常发生前并不能保证一致。论文的作者并不是声明这样的语义是理想的，不过这个行为和标准的本地 <code>Unix</code> 文件系统的行为是一样的。在本地 <code>Unix</code> 文件系统和 <code>Frangipani</code> 中，用户都可以在合适的时间点调用 <code>fsync</code> 来确保更好的数据一致性保证。</p><p><code>Frangipani</code> 所使用的日志技术最早被应用于数据库，并在之后应用到其他某些基于日志的系统中。<code>Frangipani</code> 本身不是个日志结构（<code>log-structured</code>）的文件系统；它不会将所有的数据都保存在日志中，而是将数据按约定维护在磁盘中，通过较少的日志 <code>Frangipani</code> 实现了较好的性能和异常恢复的原子性。和其他基于日志的文件系统不同，但是和例如 <code>Zebra</code> 这样的日志结构文件系统相同，<code>Frangipani</code> 也会保存多份日志。</p><h2 id="同步和缓存一致性"><a class="markdownIt-Anchor" href="#同步和缓存一致性"></a> 同步和缓存一致性</h2><p>由于会有多个 <code>Frangipani</code> 服务器修改 <code>Petal</code> 的共享数据，所以需要一个细致化的同步手段来确保各服务器读取到的数据是一致的，以及当系统负载增加或者添加新的服务器时能通过有效的并发手段来提高性能。<code>Frangipani</code> 使用多读一写的读写锁来实现必要的同步。当锁服务侦测到冲突的锁请求时，它会要求锁的持有者释放锁或者进行锁降级（写锁降级为读锁）来消除冲突。</p><p>读锁允许一个 <code>Frangipani</code> 服务器从磁盘中读取相应的数据并缓存。如果该服务器被要求释放锁，则在释放锁前必须先清空缓存。写锁允许一个 <code>Frangipani</code> 服务器读取或者修改数据并将其缓存。只有当某个服务器持有写锁时，它所缓存的数据才有可能和磁盘上保存的数据不同。因此，如果持有写锁的服务器被要求释放写锁或者降级为读锁，则必须先将修改的数据写回到磁盘。如果该服务器降级为了读锁，则依然可以保留缓存，不过如果释放了锁则必须清空缓存。</p><p>相比于释放写锁或者降级为读锁时将缓存中的数据写回到磁盘，还可以选择直接将缓存中的数据发送给请求方。不过出于简洁性考虑 <code>Frangipani</code> 并没有这么做。首先，在 <code>Frangipani</code> 的设计中，<code>Frangipani</code> 服务器之间无需通信。它们只会和 <code>Petal</code> 以及锁服务通信。第二，当某台服务器异常时，<code>Frangipani</code> 的设计保证了系统只需要处理异常服务器的日志即可。如果选择将未写入到磁盘中的数据直接发送给请求方，而接收方发生异常时，指向未持久化的数据的日志可能分散在了多台服务器中。这就给系统恢复和日志空间回收都带来了问题。</p><p><code>Frangipani</code> 将磁盘数据结构拆分为了一个个逻辑段，每个逻辑段都对应一把锁。为了避免 <code>false-sharing</code>，<code>Frangipani</code> 确保了一个磁盘扇区不会保存超过1个可共享的数据结构。将磁盘数据结构拆分为可加锁的段是为了将锁的数量控制的足够小，同时又能避免正常情况下的锁竞争，从而使得锁服务不会成为系统的瓶颈。</p><p>每个 <code>Frangipani</code> 服务器的日志都是一个可加锁的段，因为这些日志都是私有的。磁盘布局中的位图区域也切分为了一个个段，并且相互之间加了互斥锁，所以分配新文件时不会发生竞争，因为每个服务器都在自己持有的段内分配。还未分配给文件的数据块或者 <code>inode</code> 也同时被位图中的同一把锁保护，只是该位置的空间当前被标记为可用状态。最后，每个文件，文件夹，或者符号链接都是一个段；也就是说，<code>inode</code> 和其指向的数据都被同一把锁保护。这种每个文件一把锁的锁粒度对于作者所在的工作负载来说已经足够了，因为文件几乎很少会被并发的修改。而对于其他的工作负载来说则可能需要更细粒度的锁。</p><p>有些操作会要求原子的更新被多把锁保护的磁盘数据结构。<code>Frangipani</code> 通过对锁全局排序以及使用两阶段获取锁来避免死锁。首先，某台服务器先确定需要获取哪些锁。这个过程中会涉及获取或者释放某些锁，例如查找文件夹中的某些文件名。然后，服务器对锁按照 <code>inode</code> 的地址排序然后依次获取锁。同时服务器会检查在第一阶段中读取的对象是否在第二阶段发生了修改，如果发生了修改，那么该服务器会释放所有的锁然后重新执行第一阶段。否则，该服务器就可以开始执行具体的操作，在缓存中修改某些数据并记录一条日志。在缓存中的数据写回到磁盘前，该服务器都会持有相关的锁。</p><p>上述描述的缓存一致性协议类似于 <code>Echo</code>、<code>Andrew File System</code>、<code>DCE/DFS</code> 和 <code>Sprite</code> 中的客户端文件缓存协议。这里使用的避免死锁的技术和 <code>Echo</code> 类似。和 <code>Frangipani</code> 一样，<code>Oracle Parallel Server</code> 同样是将缓存中的数据写回到磁盘，而不是直接将缓存中的数据发送给下一个写锁的持有者。</p><h2 id="锁服务"><a class="markdownIt-Anchor" href="#锁服务"></a> 锁服务</h2><p><code>Frangipani</code> 只需要一小部分，通用的锁功能，并且不希望锁服务在日常操作中成为性能瓶颈，有很多种实现可以满足这些需求。在 <code>Frangipani</code> 项目中，一共尝试了三种不同的锁服务的实现，其他已有的锁服务也可以提供需要的功能，只是在其之上可能需要编写额外的代码来适配。</p><p>锁服务提供了多读一写的读写锁。这里的锁不会用完就马上释放，只要没有其他客户端请求相同的锁，这把锁就会一直被某个客户端持有（这里锁服务的客户端指的是 <code>Frangipani</code> 服务器）。</p><p>锁服务通过租约来处理客户端异常。当某个客户端请求锁服务时，它会先获取一个租约。该客户端获取的所有锁都和这个租约绑定。每个租约有一个过期时间，目前是锁创建或者延期后30秒过期。客户端在租约过期前必须先延期，否则锁服务会认为客户端发生了异常。</p><p>网络异常会妨碍 <code>Frangipani</code> 服务器延长租约，即使 <code>Frangipani</code> 服务器没有发生异常。当某个 <code>Frangipani</code> 服务器无法延长租约时，它会释放所有的锁并清空缓存。如果缓存中的数据被修改了，那么该服务器会打开某个内部标记使得后续的客户端请求都返回一个错误。相应的文件系统必须取消挂载才能删除这个异常。<code>Frangipani</code> 使用这种粗暴的方式来报告异常从而避免了异常被忽略。</p><p>第一版的锁服务实现使用了单节点中心化的服务器，所有的锁状态都保存在了内存中。这种设计对于 <code>Frangipani</code> 来说是足够的，因为 <code>Frangipani</code> 的日志中记录了足够的信息，所以即使锁服务发生异常丢失了所有的状态系统也能够恢复。不过，锁服务异常会导致严重的性能问题。</p><p>第二版的锁服务将锁的状态保存在 <code>Petal</code> 中，每个对锁状态的修改都会先写到 <code>Petal</code> 中，然后才会返回给客户端。如果锁服务的主节点异常，那么会由某个备份节点读取 <code>Petal</code> 中的锁状态然后接管异常的主节点并继续提供服务。在这个设计下，异常恢复更加透明，不过日常操作的性能会低于第一种锁实现。作者还未完全实现所有异常的自动恢复就开始了第三种锁服务的实现。</p><p>第三版的锁服务是分布式的，并且能很好的支持容错和性能。它由一组相互间协作的锁节点组成，同时每个 <code>Frangipani</code> 服务器内嵌了一个 <code>clerk</code> 模块。</p><p>锁服务将锁以表（<code>tables</code>）的形式组织，每个表以 <code>ASCII</code> 字符串的形式命名。每个表中的锁以64位的整型命名。一个 <code>Frangipani</code> 文件系统只使用一个 <code>Petal</code> 虚拟磁盘，虽然多个 <code>Frangipani</code> 文件系统可以挂载到同一个机器上。每个文件系统都绑定了一个关于锁的表。当一个 <code>Frangipani</code> 文件系统挂载时，<code>Frangipani</code> 服务器会请求内嵌的 <code>clerk</code>，然后 <code>clerk</code> 就会打开绑定的锁表。当 <code>clerk</code> 成功打开锁表时，锁服务会返回一个租约标识符，这个租约标识符会在后续通信中使用。当文件系统取消挂载时，<code>clerk</code> 就会关闭锁表。</p><p><code>clerk</code> 和锁节点间使用异步消息而不是 <code>RPC</code> 来通信，这样做能减少内存的使用并同时有着足够好的灵活性和性能。和锁相关的基础消息类型是 <code>request</code>，<code>grant</code>，<code>revoke</code> 和 <code>release</code>。<code>request</code> 和 <code>release</code> 消息是由 <code>clerk</code> 发送给锁节点，而 <code>grant</code> 和 <code>revoke</code> 消息则是由锁节点发送给 <code>clerk</code>。锁的升级和降级同样由这四种消息类型来处理。</p><p>锁服务使用了支持容错，分布式的异常监测机制来检测锁节点的异常。这个机制同时也被用于 <code>Petal</code>。该机制基于各节点间定期的心跳交换，同时使用了共识算法来容忍网络分区。</p><p>一把锁会在服务端和 <code>clerk</code> 侧都需要消耗内存。在当前的实现中，服务端会为每个锁分配112字节，每个 <code>clerk</code> 如果有进行中或者已分配的锁请求则额外还需要104字节。所以每个客户端每个锁最多使用232字节。为了避免长时间持有锁带来的内存消耗，<code>clerk</code> 会丢弃长时间（1小时）未使用的锁。</p><p>一小部分全局且不经常修改的状态信息会由 <code>Lamport</code> 的 <code>Paxos</code> 算法复制到所有的锁服务器上。锁服务复用了为 <code>Petal</code> 实现的 <code>Paxos</code> 算法。全局的状态信息包括锁服务器列表，每个锁服务器负责的锁列表，以及打开还未关闭锁表的 <code>clerk</code> 列表。这些信息用于达成共识，即在各个锁服务器间重新分配锁，当某个锁服务器发生异常时能恢复某个锁的状态，以及协助 <code>Frangipani</code> 服务器的异常恢复。从效率考虑，所有的锁被划分到100个不同的锁组中（<code>lock groups</code>），然后以组的形式分配给锁服务器，而不是以单个锁的形式。</p><p>有时候一把锁会被重新分配给其他的锁服务器，一方面是为了故障转移，另一方面是为了充分利用刚异常恢复的锁服务器，避免流量集中。当某个锁服务器被永久的添加到集群或者从集群中删除时，会发生类似的锁重分配。在这种情况下，所有的锁始终会被重分配，因为需要保证每台锁服务器持有的锁的数量是均衡的，锁重分配的次数要尽可能的少，以及每个锁都只会分配给一台锁服务器。锁的重分配也是由两阶段进行。在第一阶段，各个锁服务器丢弃保存在内部状态中的锁。第二阶段，锁服务器会和 <code>clerk</code> 通信，根据其所打开的锁表来重新分配锁。锁服务器根据 <code>clerk</code> 的锁表来重新生成锁的状态，同时通知 <code>clerk</code> 每把锁在重新分配后对应的锁服务器。</p><p>当某个 <code>Frangipani</code> 服务器异常时，在正确的恢复操作执行前，它所持有的锁不能被释放。特别的，系统需要先处理异常 <code>Frangipani</code> 服务器的日志并将未持久化的元数据更新写入到 <code>Petal</code>。当 <code>Frangipani</code> 服务器的租约到期时，锁服务会通知另一台 <code>Frangipani</code> 服务器上的 <code>clerk</code> 来执行恢复操作，并撤销原来异常服务器持有的全部锁。负责恢复的 <code>clerk</code> 会获取一把异常服务器的日志的互斥锁。这把锁同样分配了一个租约，所以当负责恢复的服务器异常时锁服务会再找一台服务器重新开始恢复任务。</p><p>一般来说，<code>Frangipani</code> 系统能够容忍网络分区，并在可能的情况下继续运行，否则就停止服务。特别的，<code>Petal</code> 可以在网络分区的情况下继续运行，只要大多数的 <code>Petal</code> 服务器依然存活并且相互之间可以通信，不过如果某些 <code>Petal</code> 虚拟磁盘在大多数的 <code>Petal</code> 服务器上没有备份的话，那么这些磁盘无法被继续访问。同样的，只要大多数的锁服务器依然存活并且相互之间可以通信，整个锁服务也依然可用。如果某个 <code>Frangipani</code> 服务器无法和锁服务通信，那么它将再也不能延长租约。此时锁服务会认为这个 <code>Frangipani</code> 服务器发生异常，然后会基于它的日志挑选一个新的 <code>Frangipani</code> 服务器发起恢复流程。如果某个 <code>Frangipani</code> 服务器无法和 <code>Petal</code> 通信，那么它将无法读取和写入虚拟磁盘。不管在哪种情况下，<code>Frangipani</code> 服务器都会拒绝后续受影响的文件系统的用户请求，直到网络分区恢复以及文件系统被重新挂载。</p><p>当 <code>Frangipani</code> 服务器的租约过期时存在一个潜在的问题。如果服务器依然存活而只是由于网络原因造成无法和锁服务通信，那么这台服务器可能依然会在租约过期后访问 <code>Petal</code>。<code>Frangipani</code> 服务器会在写入 <code>Petal</code> 前检查租约是否依然有效（并确保在未来的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>m</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{margin}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>秒内依然有效）。不过，<code>Petal</code> 并不会校验某个写入请求是否还在租约有效期内。所以，如果 <code>Frangipani</code> 服务器检查租约和写请求到达 <code>Petal</code> 的时间大于剩余租约的时间，那就会带来一个问题：当 <code>Petal</code> 收到写请求时，租约已经过期，该服务器持有的写锁已经分配给了其他服务器。<code>Frangipani</code> 为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>m</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{margin}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>选择了一个足够大的值（15秒）来确保在正常情况下上述问题不会发生，不过依然不能确保一定不会发生。</p><p>在未来 <code>Frangipani</code> 会尝试解决这个问题，论文给出了一个可能的解决方案。<code>Frangipani</code> 会给每一个 <code>Petal</code> 的写请求附加一个过期的时间戳。这个时间戳的值为生成写请求时的租约过期时间减去<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>m</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{margin}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。这样 <code>Petal</code> 就可以忽略任何时间戳小于当前时间的写请求。只要 <code>Petal</code> 和 <code>Frangipani</code> 服务器的时钟在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>m</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{margin}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>内保持同步，<code>Petal</code> 就能够可靠的拒绝租约过期的写请求。</p><p>另一种解决方案则不依赖时钟同步，但是需要将锁服务和 <code>Petal</code> 集成，并且将 <code>Frangipani</code> 服务器获取的租约标识符附加到写请求中，<code>Petal</code> 收到写请求后就可以根据租约标识符校验租约是否过期，从而拒绝过期的写请求。</p><h2 id="添加和删除服务器"><a class="markdownIt-Anchor" href="#添加和删除服务器"></a> 添加和删除服务器</h2><p>系统管理员有时需要添加或者删除 <code>Frangipani</code> 服务器。<code>Frangipani</code> 被设计成能够轻易的处理这些场景。</p><p>添加一台服务器到运行中的系统只需要一点点的系统管理工作。新添加的服务器只需要知道使用哪块 <code>Petal</code> 虚拟磁盘以及锁服务的地址即可。新添加的服务器会和锁服务通信来获取租约，然后根据租约标识符决定使用哪部分的日志空间，然后就开始提供服务。系统管理员不需要修改其他服务器的配置，其他服务器能自动适配新服务器的上线。</p><p>删除一台 <code>Frangipani</code> 服务器则更简单。可以直接关闭这台服务器。不过更可取的方式是让这台服务器先将未持久化的数据写入到 <code>Petal</code>，然后释放持有的锁，最后再停机，不过这不是强制要求的。当服务器异常停机时，如果后续该服务器持有的锁需要被使用，则系统会自动发起恢复流程，并最终使得共享磁盘的数据达成一致。同样的，系统管理员也不需要修改其他服务器的配置。</p><p>如 <code>Petal</code> 的论文所描述，<code>Petal</code> 服务器同样可以无缝的添加和删除，锁服务器也同理。</p><h2 id="备份"><a class="markdownIt-Anchor" href="#备份"></a> 备份</h2><p><code>Petal</code> 的快照功能提供了一个简便的方法来备份一份完整的 <code>Frangipani</code> 文件系统快照。<code>Petal</code> 的客户端可以在任意时刻创建一个虚拟磁盘的快照。所创建的快照的虚拟磁盘和普通的虚拟磁盘一样，只不过它是只读的。实际快照实现时采用了写时复制（<code>copy-on-write</code>）技术来提高效率。<code>Petal</code> 创建的快照是崩溃一致的（<code>crash-consistent</code>）：也就是说，快照中保存的是在 <code>Petal</code> 虚拟磁盘中的数据，<code>Frangipani</code> 服务器内存中的数据不会记录到快照中。</p><p>因此，我们可以简单的通过创建 <code>Petal</code> 快照并将其拷贝到磁带中来备份一个 <code>Frangipani</code> 文件系统。快照会包含所有的日志，所以可以将其复制到一个新的 <code>Petal</code> 虚拟磁盘中然后根据日志运行恢复程序来恢复一个 <code>Frangipani</code> 文件系统。归功于崩溃一致的特性，从快照中恢复系统后要解决的问题就简化成了和发生系统级别的停电后恢复系统所要解决的问题一样。</p><p>可以对 <code>Frangipani</code> 稍作修改来改进这个恢复机制，即创建一个系统文件级别一致的快照，从而也无需执行恢复操作。可以让备份程序先强制要求所有的 <code>Frangipani</code> 服务器进入一个栅栏，这个功能可以由锁服务提供的全局锁来实现。每个 <code>Frangipani</code> 服务器以共享的模式获取这把锁然后执行修改操作，而备份程序以互斥的方式来处理请求。当 <code>Frangipani</code> 服务器收到请求要求释放锁时，它会阻塞所有新的修改数据的文件系统调用然后进入栅栏，接着清空缓存中已修改的数据，最后释放锁。当所有的 <code>Frangipani</code> 服务器进入栅栏后，备份程序会以互斥的模式获取锁，然后创建一个 <code>Petal</code> 快照并释放锁。之后各 <code>Frangipani</code> 就可以继续以共享的模式获取锁，然后恢复服务。</p><p>在后一种方案下，一个 <code>Frangipani</code> 的快照可以无需进行恢复就直接挂载使用。用户就可以从新的磁盘卷中在线获取单个文件，或者将其以一个更方便的格式转储到磁带中而无需 <code>Frangipani</code> 参与数据恢复。新添加的卷必须以只读的格式挂载，因为底层的 <code>Petal</code> 快照是只读的。在未来作者可能扩展 <code>Petal</code> 的快照使其可写，或者在 <code>Petal</code> 之上再抽象一层来模拟写操作。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://pdos.csail.mit.edu/6.824/papers/thekkath-frangipani.pdf">Frangipani: A Scalable Distributed File System</a></li><li><a href="https://pdos.csail.mit.edu/6.824/papers/frangipani-faq.txt">FAQ for Frangipani, Thekkath, Mann, Lee, SOSP 1997</a></li><li><a href="https://kb.synology.com/en-global/DSM/tutorial/What_is_file_system_consistent_snapshot">What is the difference between crash-consistent and file-system consistent snapshots?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;这是一篇上世纪九十年代的论文，在当时的环境下，安装新工作站的需求与日俱增，而针对大量工作站的文件系统管理却费时费力。为了保存更多的文件和服务更多</summary>
      
    
    
    
    
    <category term="Paper" scheme="https://frederick-s.github.io/tags/Paper/"/>
    
    <category term="MIT 6.824" scheme="https://frederick-s.github.io/tags/MIT-6-824/"/>
    
    <category term="Distributed Systems" scheme="https://frederick-s.github.io/tags/Distributed-Systems/"/>
    
  </entry>
  
  <entry>
    <title>工程师文化和实事求是</title>
    <link href="https://frederick-s.github.io/2022/06/04/engineering-culture/"/>
    <id>https://frederick-s.github.io/2022/06/04/engineering-culture/</id>
    <published>2022-06-03T16:00:00.000Z</published>
    <updated>2022-06-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>陈皓在 <a href="https://coolshell.cn/articles/17497.html">什么是工程师文化？</a> 中谈到工程师文化由两点组成：自由和效率。不过我认为可以再加一点，那就是实事求是。实事求是要求尊重客观事实，不弄虚作假，不过现实中往往大相径庭。</p><h2 id="不尊重客观事实"><a class="markdownIt-Anchor" href="#不尊重客观事实"></a> 不尊重客观事实</h2><p>福尔摩斯里有一句话：</p><blockquote><p>Once you eliminate the impossible, whatever remains, no matter how improbable, must be the truth.</p></blockquote><p>对应了软件开发中一个烂大街的场景：在尽可能的考虑了所有的因素之后，不管完成一个工程所需要的时间是多么的不符合非执行者的预期，最终完成这个工程的时间也只会只多不少。如果无法正视客观事实，则会使得工程从开始到结束都弥漫着自我焦虑。而工程实施时往往只会拙劣的采用10个女人1个月生10个孩子的方式，最终也容易造成工程的反复返工，不过这倒能在总结大会上提供丰富的演讲素材，以及时间紧、任务重的自我感动，然后下次一定。</p><h2 id="避实就虚"><a class="markdownIt-Anchor" href="#避实就虚"></a> 避实就虚</h2><p>优秀的团队能正视问题，如果一个团队在面对问题分析时首先想的是哪些问题该提，哪些问题不该提，哪些问题提了会赢得芳心，那这种问题分析就是表演作秀，最终也继续重蹈覆辙。</p><h2 id="形式主义"><a class="markdownIt-Anchor" href="#形式主义"></a> 形式主义</h2><p>陈皓在 <a href="https://coolshell.cn/articles/17497.html">什么是工程师文化？</a> 中关于工程师文化如何落地提到引入绩效考核，不过这可能会造成形式主义和和团队间无意义的攀比。例如，如果将 <code>Code Review</code> 作为考核指标，难免会出现：快到月末了，还需要再提20个 <code>comment</code>；某部门的人均 <code>comment</code> 有 <code>xx</code> 个，本部门才 <code>yy</code> 个，每个人努努力，提到 <code>zz</code> 个。</p><h2 id="移花接木"><a class="markdownIt-Anchor" href="#移花接木"></a> 移花接木</h2><p>在成果导向的规则下，如果通过 <code>A</code>，<code>B</code>，<code>C</code> 达成了 <code>D</code>，则直接对外宣称通过 <code>A</code> 达成了 <code>D</code>。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://coolshell.cn/articles/17497.html">什么是工程师文化？</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;陈皓在 &lt;a href=&quot;https://coolshell.cn/articles/17497.html&quot;&gt;什么是工程师文化？&lt;/a&gt; 中谈到工程师文化由两点组成：自由和效率。不过我认为可以再加一点，那就是实事求是。实事求是要求尊重客观事实，不弄虚作假，不过现实中往往大相</summary>
      
    
    
    
    
    <category term="Opinions" scheme="https://frederick-s.github.io/tags/Opinions/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.824 - Lab 3 (2): 实现</title>
    <link href="https://frederick-s.github.io/2022/06/04/mit-6.824-lab3-implementation/"/>
    <id>https://frederick-s.github.io/2022/06/04/mit-6.824-lab3-implementation/</id>
    <published>2022-06-03T16:00:00.000Z</published>
    <updated>2022-06-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Lab 3</code> 需要我们实现一个基于 <code>Raft</code> 的键值数据库，支持三个操作：</p><ul><li><code>Put(key, value)</code></li><li><code>Append(key, value)</code></li><li><code>Get(key)</code></li></ul><h2 id="3a"><a class="markdownIt-Anchor" href="#3a"></a> 3A</h2><h3 id="客户端"><a class="markdownIt-Anchor" href="#客户端"></a> 客户端</h3><p>客户端要做的只有一件事，就是向某个服务端发送请求。不过由于客户端不知道哪个服务端是主节点，所以需要不断轮询各服务端发送请求。为了避免每次轮询所有服务端浪费时间，客户端可以记录每次请求成功后的服务端编号，这个服务端就是当次请求中的主节点；当客户端再次发起请求时，可以先假定之前的服务端依然是主节点，从而先向该服务端发送请求，如果请求失败并返回 <code>ErrWrongLeader</code> 异常，则再尝试下一个服务端。</p><h3 id="服务端"><a class="markdownIt-Anchor" href="#服务端"></a> 服务端</h3><p><code>Lab 3</code> 要求服务端将客户端请求成功的结果放到 <code>RPC</code> 响应中，不过 <code>Raft.Start()</code> 的执行成功不代表最终日志的应用成功，所以服务端调用 <code>Raft.Start()</code> 后需要阻塞等待，直到 <code>Raft</code> 将对应日志应用到状态机。等待/唤醒的模式可以想到使用条件变量 <code>sync.Cond</code>，不过 <code>Go</code> 中有 <code>channel</code> 这个更方便的特性来实现。</p><p>正常情况下，服务端调用 <code>Raft.Start()</code> 添加日志的顺序和之后从 <code>applyCh</code> 中收到日志的顺序一致，也就是说客户端请求到达服务端并被处理的顺序和服务端从 <code>applyCh</code> 中收到日志的顺序一致。所以，服务端可以维护一个客户端请求的队列，队列中存放的是 <code>channel</code>，每当服务端从 <code>applyCh</code> 中收到日志，就将日志发送到队首的 <code>channel</code> 中，并从队列中移除。这样阻塞等待中的 <code>RPC</code> 服务端线程就能被唤醒，并响应客户端。</p><p>不过在异常情况下，客户端请求队列和服务端从 <code>applyCh</code> 中收到日志的顺序并不是一一对应，因此服务端收到日志时需要剔除掉队列中无效的请求，并通过 <code>channel</code> 发送一个 <code>ErrWrongLeader</code> 异常，这样客户端就能换一个服务端来重试。由于通过日志索引无法唯一确定一条 <code>Raft</code> 日志，所以需要在 <code>ApplyMsg</code> 中添加 <code>CommandTerm</code> 来标识日志所属的任期，这样服务端从 <code>applyCh</code> 中收到日志后就能通过比较客户端请求队列中的日志任期和索引来判断请求是否有效。</p><p>记客户端请求队列队首日志的任期和索引为 <code>(term_client, index_client)</code>，记服务端从 <code>applyCh</code> 收到的日志的任期和索引为 <code>(term_applied, index_applied)</code>。正常情况下有 <code>term_client == term_applied</code> 以及 <code>index_client == index_applied</code>。从服务端角度来说，异常情况有两种，一种是当前服务端不再是主节点，另一种情况是当前服务端依然是主节点，不过中途发生了主从切换可能造成当前的日志和最初的不同。对于第一种情况可以直接清空客户端请求队列，虽然 <code>(term_applied, index_applied)</code> 有可能匹配部分客户端请求，不过由于当前服务端不再是主节点，下次客户端请求的时候本身就要再轮询所有的服务端，所以这里等同于是提前让客户端轮询。对于第二种情况（也考虑原来是从节点后来变成主节点的场景），可以从队首开始遍历客户端请求队列，剔除掉比 <code>(term_applied, index_applied)</code> 小的 <code>(term_client, index_client)</code> 请求，并通过 <code>channel</code> 返回异常（这里需要一个自定义异常，告诉客户端直接重试，因为当前服务端依然是主节点，所以客户端没有必要轮询）。这里的剔除掉比 <code>(term_applied, index_applied)</code> 小的 <code>(term_client, index_client)</code> 请求，指的是仅保留 <code>term_client &gt;= term_applied</code> 和 <code>index_client &gt;= index_applied</code> 的请求，因为根据 <code>Raft</code> 日志的性质，其他情况下的客户端请求都已经不可能被提交。</p><p>因此，服务端需要开启一个单独的 <code>goroutine</code>，并不断的从 <code>applyCh</code> 中获取日志，然后根据日志的指令内容更新本地的键值数据库，最后唤醒客户端请求队列中的请求。而如何实现本地键值数据库不是本实验的重点，所以简单使用了一个 <code>map</code>。</p><h3 id="客户端请求去重"><a class="markdownIt-Anchor" href="#客户端请求去重"></a> 客户端请求去重</h3><p><a href="https://pdos.csail.mit.edu/6.824/labs/lab-kvraft.html">6.824 Lab 3: Fault-tolerant Key/Value Service</a> 中提到：</p><blockquote><p>It’s OK to assume that a client will make only one call into a Clerk at a time.</p></blockquote><p>一个客户端一次只发送一个请求，加上请求阻塞的特性，任何时刻每个客户端都最多只有一个进行中的请求。为了对请求去重，每个客户端可以生成一个唯一的客户端 <code>id</code>，每次发请求时生成一个递增的请求序号，而服务端只需要维护每个客户端已提交到状态机的最大请求序号即可，这是因为当前场景下每个客户端的请求序列是个递增的序列（非严格递增，相邻数字之间可能存在重复）。所以，当服务端收到请求时，如果发现请求中的序号小于等于该客户端的最大请求序号，则说明该请求是重复的。</p><p>不过，处理重复的读请求有两种方案，一种是返回当前值，另一种是返回第一次收到读请求时的值。两种方式都可解释，本实验中直接返回当前值即可。</p><p>那么服务端收到 <code>Raft</code> 日志时如何知道这个日志对应的客户端请求序号？这个属于应用层面的数据，可以将客户端 <code>id</code> 和请求序号放到 <code>Op</code> 中，服务端收到 <code>Raft</code> 的日志后，将 <code>ApplyMsg.Command</code> 进行类型转换，转为 <code>Op</code> 即可。</p><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><h4 id="testspeed3a"><a class="markdownIt-Anchor" href="#testspeed3a"></a> TestSpeed3A</h4><p><code>TestSpeed3A</code> 要求每个心跳周期至少完成三次客户端请求，不过在做 <code>Lab 2</code> 时，<code>Raft</code> 收到日志后不会马上发起共识，而是在下一次发送心跳时批量对收到的日志发起共识。又由于 <code>TestSpeed3A</code> 会循环发起请求，每个请求阻塞，服务端只有在收到 <code>applyCh</code> 的日志后才会通知客户端，所以本质上在这个测试中服务端约等于一个心跳周期只处理一个请求。所以需要修改 <code>Raft.Start()</code>，收到日志后开启一个 <code>goroutine</code> 发起心跳。</p><h4 id="客户端请求队列无法被唤醒"><a class="markdownIt-Anchor" href="#客户端请求队列无法被唤醒"></a> 客户端请求队列无法被唤醒</h4><p>服务端收到 <code>Raft</code> 的日志后才唤醒客户端请求队列会造成客户端请求队列永远不会被唤醒，因为这强依赖于某条日志被提交，而客户端的日志不一定会被提交。例如，某个服务端收到客户端的请求，将请求放到队列中，此时服务端发生异常，其他服务端成为新的主节点，而新的主节点并没有收到客户端的日志，在没有其他客户端请求的情况下，最开始的客户端请求永远不会被唤醒。所以，这里也额外开启了一个 <code>goroutine</code>，如果当前服务端不是主节点且客户端请求队列不为空，则清空客户端请求队列，并通知 <code>ErrWrongLeader</code> 异常。</p><p>不过，这个策略也会带来一个请求重复执行的问题。当前身为主节点的服务端成功提交了某个客户端的请求，注意这里是 <code>commit</code>，而不是 <code>apply</code>，此时服务端发生异常，另一个服务端成为新的主节点，原来的服务端发现自己不是主节点并且请求队列不为空，则清空了请求队列，然后客户端发起重试，新的主节点收到了请求并成功提交，最后 <code>Raft</code> 的日志中就会有两条内容一样的日志，但是 <code>Raft</code> 并不关心两条日志的内容是否相同。所以这个去重需要在服务端处理，服务端从 <code>applyCh</code> 收到日志后，需要判断日志中对应的请求是否已被处理。造成这个问题的主要原因在于 <code>Raft</code> 处理日志的 <code>commit</code> 和 <code>apply</code> 之间存在时间差，而服务端只通过 <code>applyCh</code> 和 <code>Raft</code> 进行交互。</p><h2 id="3b"><a class="markdownIt-Anchor" href="#3b"></a> 3B</h2><p>引入快照之后，服务端从 <code>applyCh</code> 收到日志时需要判断是否是快照消息，如果是快照消息则执行快照逻辑。<code>3B</code> 整体难度低于 <code>3A</code>，快照的代码逻辑类似于 <code>Lab 2</code> 中的快照代码，不过要注意两点：</p><ol><li>快照会通过 <code>RPC</code> 发送，所以涉及快照的字段命名注意首字母大写</li><li><code>Raft</code> 收到快照 <code>RPC</code> 后，再通过 <code>applyCh</code> 发送快照，但是服务端从 <code>applyCh</code> 中收到的快照消息不一定是最新的，即快照的最远日志索引有可能会落后于服务端已经应用到状态机的最远日志索引（因为 <code>Raft</code> 层收到的快照可能只覆盖了当前日志的一部分，而 <code>Raft</code> 往 <code>applyCh</code> 中发送已应用的日志或快照间没有顺序关系，所以对于服务端来说已经应用到状态机的日志索引可能会大于快照中的日志索引。）。如果快照不是最新的，服务端直接忽略即可，避免覆盖当前的状态机。如何知道当前快照不是最新的？服务端可以记录已提交到本地状态机的最大 <code>ApplyMsg.CommandIndex</code>，收到快照消息后将其和快照消息中的 <code>ApplyMsg.SnapshotIndex</code> 比较即可</li></ol><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://pdos.csail.mit.edu/6.824/labs/lab-kvraft.html">6.824 Lab 3: Fault-tolerant Key/Value Service</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Lab 3&lt;/code&gt; 需要我们实现一个基于 &lt;code&gt;Raft&lt;/code&gt; 的键值数据库，支持三个操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Put(key, value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Append(key, value</summary>
      
    
    
    
    
    <category term="MIT 6.824" scheme="https://frederick-s.github.io/tags/MIT-6-824/"/>
    
    <category term="Distributed Systems" scheme="https://frederick-s.github.io/tags/Distributed-Systems/"/>
    
    <category term="Go" scheme="https://frederick-s.github.io/tags/Go/"/>
    
    <category term="Raft" scheme="https://frederick-s.github.io/tags/Raft/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.824 - Lab 3 (1): Students&#39; Guide to Raft（续）</title>
    <link href="https://frederick-s.github.io/2022/05/30/mit-6.824-lab3-students-guide-to-raft-part-2/"/>
    <id>https://frederick-s.github.io/2022/05/30/mit-6.824-lab3-students-guide-to-raft-part-2/</id>
    <published>2022-05-29T16:00:00.000Z</published>
    <updated>2022-05-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://thesquareplanet.com/blog/students-guide-to-raft/">Students’ Guide to Raft</a> 是 <a href="https://pdos.csail.mit.edu/6.824/">MIT 6.824: Distributed Systems</a> 之前的助教写给学生看的实验生存指南。在 <a href="/2022/05/06/mit-6.824-lab2-students-guide-to-raft/">MIT 6.824 - Lab 2 (1): Students’ Guide to Raft</a> 中介绍了关于 <code>Lab 2</code> 的部分，本文将继续介绍关于 <code>Lab 3</code> 的部分。</p><p>在 <code>Lab 3</code> 中，我们需要实现一个基于 <code>Raft</code> 的 <code>Key-Value</code> 数据库，本文描述了某些对实现可能有帮助的细节。</p><h2 id="提交客户端操作"><a class="markdownIt-Anchor" href="#提交客户端操作"></a> 提交客户端操作</h2><p>实现客户端请求时可能会先直接发一个请求给客户端所认为的主节点，然后对应的服务端等待 <code>Raft</code> 应用日志，接着服务端执行客户端的请求逻辑，最后再把结果返回给客户端。这种方式适合单客户端的系统，不过不适合多客户端并发的系统。在多客户端请求下，每个客户端请求都有可能修改系统状态，即使各 <code>Raft</code> 节点的日志保持一致，由于各客户端请求间可能相互交替执行，服务端本地状态可能和 <code>Raft</code> 节点的最新日志不一致，除非使用全局的锁隔离各客户端请求，不过系统会退化为串行程序。</p><p>文中建议将服务端当做状态机处理，每个客户端的请求本质上都是将状态机从一个状态转变为另一个状态。服务端中有一个专门的线程来处理客户端请求，该线程每次获取一个客户端请求，然后将其提交给 <code>Raft</code>，之后收到 <code>Raft</code> 应用日志的通知后，按顺序将客户端命令应用到服务端的本地状态机中，这里虽然看起来也是串行处理客户端请求，不过由于 <code>Raft.Start()</code> 方法会立即返回，当有大量请求时，<code>Raft</code> 在实现时会批量发送日志。这个线程是整个服务端中唯一能修改本地状态机的地方，所以服务端的 <code>RPC</code> 就简化为了向任务队列中提交任务，并且当 <code>applyCh</code> 接收到可以执行的日志时，将日志所对应的命令应用到本地状态机中，然后响应客户端。</p><p>不过，这也带来了一个问题：什么时候知道某个客户端请求执行完成了？这在一切正常的情况下非常简单，因为我们是按序将客户端请求提交给 <code>Raft</code>，所以最后从 <code>applyCh</code> 中出来的日志的顺序就是提交客户端请求的顺序。不过，当前客户端所通信的服务端有可能在中途不再是主节点，所以客户端所发送的日志有可能被丢弃，此时客户端需要能够知道发生了异常，然后尝试换一个服务端。</p><p>一个简单的方法是记录提交客户端请求时 <code>Raft</code> 返回的日志索引，然后从 <code>applyCh</code> 收到对应索引的日志时，判断该条日志是否对应最初的客户端请求（可以向 <code>ApplyMsg.Command</code> 添加额外的信息来标识是否是当初的请求）。如果不是同一条请求，则说明发生了异常。</p><h2 id="识别重复请求"><a class="markdownIt-Anchor" href="#识别重复请求"></a> 识别重复请求</h2><p>因为客户端异常重试的机制存在，所以服务端需要能识别出重复的客户端请求：例如某个客户端发送 <code>APPEND</code> 请求，当前服务端成功执行但是客户端没有收到响应，客户端会选择一个新的服务端发送请求，新的服务端需要确保 <code>APPEND</code> 请求不会被执行两次。因此，每个客户端请求需要一个唯一的标识，使得服务端能够识别已经执行的请求。另外，由于客户端会选择不同的服务端发送请求，各服务端需要对已执行的客户端请求达成共识。</p><p>有很多方法来为客户端请求生成唯一的标识符。一种简单并且相对有效的方法是先给每个客户端分配一个唯一的标识符，然后给每一个请求附带一个递增的序列号。如果某个客户端重新发送请求，则会复用之前的请求序列号。各服务端需要维护每个客户端最新的请求序列号，如果服务端发现客户端的请求序列号已处理，则直接忽略该请求。</p><h2 id="难以定位的边界条件"><a class="markdownIt-Anchor" href="#难以定位的边界条件"></a> 难以定位的边界条件</h2><p>如果按照上述的方式实现，有可能会遇到两个难以定位的问题。</p><h3 id="重复出现的日志索引"><a class="markdownIt-Anchor" href="#重复出现的日志索引"></a> 重复出现的日志索引</h3><p><code>Raft.Start()</code> 会返回所添加的日志的索引，不过在实际实现时可能会认为这个索引不会重复返回，或者遇到重复的索引时会认为前一个相同索引的日志所对应的请求已经执行失败。不过实际上这两种看法都不正确，即使没有个任何一个服务端发生异常。</p><p>假设有 <code>S1</code> 到 <code>S5</code> 五个节点，一开始 <code>S1</code> 是主节点，并且没有日志，然后系统发生以下交互：</p><ol><li><code>S1</code> 收到两个客户端请求 <code>C1</code> 和 <code>C2</code></li><li><code>S1</code> 分别返回日志索引1和2给 <code>C1</code> 和 <code>C2</code></li><li><code>S1</code> 发送包含了 <code>C1</code> 和 <code>C2</code> 的 <code>AppendEntries</code> 请求给其他从节点，其中 <code>S2</code> 收到请求，其余节点均未收到</li><li><code>S3</code> 成为候选节点</li><li><code>S1</code> 和 <code>S2</code> 不会投票给 <code>S3</code>，但是 <code>S4</code> 和 <code>S5</code> 会，所以 <code>S3</code> 成为新的主节点</li><li><code>S3</code> 收到新的客户端请求 <code>C3</code></li><li><code>S3</code> 调用 <code>Start()</code> 方法并返回日志索引1给 <code>C3</code></li><li><code>S3</code> 发送包含 <code>C3</code> 的 <code>AppendEntries</code> 请求给 <code>S1</code>，<code>S1</code> 丢弃 <code>C1</code> 和 <code>C2</code> 的日志后添加 <code>C3</code></li><li><code>S3</code> 在给其他从节点发送 <code>AppendEntries</code> 请求前发生异常</li><li><code>S1</code> 成为候选节点，由于它的日志最新，所以再次成为主节点</li><li><code>S1</code> 收到新的客户端请求 <code>C4</code></li><li><code>S1</code> 调用 <code>Start()</code> 方法并返回日志索引2给 <code>C4</code>（在之前的步骤中，日志索引2也返回给了 <code>C2</code>）</li><li><code>S1</code> 在给其他从节点发送 <code>AppendEntries</code> 请求前发生异常，此时 <code>S2</code> 成为候选节点</li><li><code>S1</code> 和 <code>S3</code> 不会投票给 <code>S2</code>，但是 <code>S4</code> 和 <code>S5</code> 会，所以 <code>S2</code> 成为新的主节点</li><li><code>S2</code> 收到新的客户端请求 <code>C5</code></li><li><code>S2</code> 调用 <code>Start()</code> 方法并返回日志索引3给 <code>C5</code></li><li><code>S2</code> 成功将 <code>AppendEntries</code> 请求发送给其他所有从节点，在后续的心跳中，<code>leaderCommit = 3</code></li></ol><p>最终 <code>S2</code> 的日志为 <code>[C1, C2, C5]</code>，此时所有节点在索引位置2处的日志为 <code>C2</code>，这就为开头的两个观点提供了反例：<code>Start()</code> 方法可能返回重复的日志索引，以及遇到重复的索引时不代表前一个相同索引的日志所对应的请求已经执行失败。</p><h3 id="四方死锁"><a class="markdownIt-Anchor" href="#四方死锁"></a> 四方死锁</h3><p>课程的另一个助教 <a href="https://stebalien.com/">Steven Allen</a> 发现在实现 <code>Lab 3</code> 时很容易遇到一个四方死锁问题。</p><p>不管具体的 <code>Raft</code> 代码如何实现，一般来说都会有一个类似于 <code>Raft.Start()</code> 的方法来使得应用程序添加日志，以及很有可能有一个单独的线程将位于 <code>[lastApplied + 1, commitIndex]</code> 范围内的日志通过 <code>apply()</code> 方法发送给应用程序（<a href="https://thesquareplanet.com/blog/students-guide-to-raft/">Students’ Guide to Raft</a> 这篇文章写于2016年，在最新的课程中 <code>Raft</code> 通过 <code>applyCh</code> 来发送日志）。这两个方法很可能都需要持有锁 <code>a</code>。而在应用程序中，很可能会在某个 <code>RPC</code> 中调用 <code>Raft.Start()</code> 方法，然后同样可能有个线程会等待 <code>Raft</code> 的日志应用通知，当这个线程收到通知后，就可以响应客户端。由于这两个方法需要通信（例如，<code>RPC</code> 方法需要知道什么时候客户端请求执行完成），所以很可能也都需要持有锁 <code>b</code>。</p><p>上述的方法用 <code>Go</code> 描述如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span></span> RPC(args <span class="keyword">interface</span>&#123;&#125;, reply <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    a.mutex.Lock()</span><br><span class="line">    i := a.raft.Start(args)</span><br><span class="line">    <span class="comment">// update some data structure so that apply knows to poke us later</span></span><br><span class="line">    a.mutex.Unlock()</span><br><span class="line">    <span class="comment">// wait for apply to poke us</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Raft)</span></span> Start(cmd <span class="keyword">interface</span>&#123;&#125;) <span class="type">int</span> &#123;</span><br><span class="line">    r.mutex.Lock()</span><br><span class="line">    <span class="comment">// do things to start agreement on this new command</span></span><br><span class="line">    <span class="comment">// store index in the log where cmd was placed</span></span><br><span class="line">    r.mutex.Unlock()</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span></span> apply(index <span class="type">int</span>, cmd <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">    a.mutex.Lock()</span><br><span class="line">    <span class="keyword">switch</span> cmd := cmd.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> GetArgs:</span><br><span class="line">        <span class="comment">// do the get</span></span><br><span class="line"><span class="comment">// see who was listening for this index</span></span><br><span class="line"><span class="comment">// poke them all with the result of the operation</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    a.mutex.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Raft)</span></span> AppendEntries(...) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    r.mutex.Lock()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">for</span> r.lastApplied &lt; r.commitIndex &#123;</span><br><span class="line">      r.lastApplied++</span><br><span class="line">      r.app.apply(r.lastApplied, r.log[r.lastApplied])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    r.mutex.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设此时系统处于以下状态：</p><ul><li><code>App.RPC</code> 获取锁 <code>a.mutex</code> 然后调用 <code>Raft.Start</code></li><li><code>Raft.Start</code> 正在等待锁 <code>r.mutex</code></li><li><code>Raft.AppendEntries</code> 持有锁 <code>r.mutex</code>，然后调用 <code>App.apply</code></li></ul><p>此时就发生了死锁，因为：</p><ul><li><code>Raft.AppendEntries</code> 在 <code>App.apply</code> 返回前无法释放锁 <code>r.mutex</code></li><li><code>App.apply</code> 在获取锁 <code>a.mutex</code> 前无法返回</li><li><code>a.mutex</code> 在 <code>App.RPC</code> 返回前无法被释放</li><li><code>App.RPC</code> 在 <code>Raft.Start</code> 返回前无法返回</li><li><code>Raft.Start</code> 在获取锁 <code>r.mutex</code> 前无法返回</li><li><code>Raft.Start</code> 需要等待 <code>Raft.AppendEntries</code> 释放锁 <code>r.mutex</code></li></ul><p>有几种方法来避免死锁。其中最简单的就是在 <code>App.RPC</code> 中，调用 <code>a.raft.Start</code> 之后再尝试获取锁。不过这可能会带来个问题，在 <code>a.raft.Start(args)</code> 和 <code>a.mutex.Lock()</code> 执行之间可能触发 <code>app.Apply</code>，造成错失日志通知。所以另一种方法是从 <code>Raft.AppendEntries</code> 中分离出 <code>r.app.apply</code>，由一个单独的线程来调用 <code>r.app.apply</code>，这就保证了服务端不会错过日志的通知，同时又避免了死锁。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://thesquareplanet.com/blog/students-guide-to-raft/">Students’ Guide to Raft</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://thesquareplanet.com/blog/students-guide-to-raft/&quot;&gt;Students’ Guide to Raft&lt;/a&gt; 是 &lt;a href=&quot;https://pdos.csail.mit.edu/6.82</summary>
      
    
    
    
    
    <category term="MIT 6.824" scheme="https://frederick-s.github.io/tags/MIT-6-824/"/>
    
    <category term="Distributed Systems" scheme="https://frederick-s.github.io/tags/Distributed-Systems/"/>
    
    <category term="Go" scheme="https://frederick-s.github.io/tags/Go/"/>
    
    <category term="Raft" scheme="https://frederick-s.github.io/tags/Raft/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.824 - Chain Replication for Supporting High Throughput and Availability</title>
    <link href="https://frederick-s.github.io/2022/05/25/mit-6.824-chain-replication/"/>
    <id>https://frederick-s.github.io/2022/05/25/mit-6.824-chain-replication/</id>
    <published>2022-05-24T16:00:00.000Z</published>
    <updated>2022-05-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>一个存储系统一般来说会实现一些接口使得客户端能够存储，获取，或者修改数据。文件系统和数据库系统是最广为人知的例子。对于文件系统来说，对单个文件的操作（读和写）是原子的；对于数据库系统来说，每个操作（事务）可能会访问多个对象，并且是可串行化的。</p><p>本文关注的存储系统介于文件系统和数据库系统之间。特别的，本文关注的存储系统，在这之后称之为存储服务，有以下功能：</p><ul><li>存储对象</li><li>支持查询操作，能够返回单个对象的衍生数据</li><li>支持更新操作，能原子的基于单个对象之前的状态根据某些预编程的计算（可能是非确定性的）来修改对象的状态</li></ul><p>文件系统的写操作是上述存储服务的更新操作的一个特例，而上述存储服务的更新操作又是数据库事务的一个特例。</p><p>越来越多的在线零售商（例如 <code>Amazon.com</code>），搜索引擎（例如 <code>Google</code> 和 <code>FAST</code>），以及很多信息密集型服务通过将大型存储系统使用网络互联来提供服务。相对于文件系统和数据库系统来说，存储系统对于这些应用来说是较为适合的方案，因为数据库系统成本和代价过大，而文件系统则缺少丰富的操作语义。</p><p>构建大型存储服务的一个挑战是如何伴随着异常和配置更改（异常组件能被检测到并被替换）的同时维持系统的高可用和高吞吐。</p><p>一致性保证对于存储服务来说同样很重要。即使不重要，如果有了强一致性的保证，则能简化基于存储服务的应用程序构建，强一致性保证了：</p><ol><li>对单个对象的读写操作会按照某个顺序执行</li><li>读操作一定能读取到之前的更新操作的结果</li></ol><p>强一致性保证经常被认为和高吞吐、高可用是冲突的。系统设计者一般不会牺牲系统的吞吐或者可用性，而是牺牲强一致性保证。<code>The Google File System</code>（<code>GFS</code>）就体现了这样的思想。实际上，大型存储服务的强一致性保证和高吞吐、高可用并不是冲突的。本文介绍的 <code>chain replication</code> 方式在对 <code>fail-stop</code> 类型异常容错的同时，能同时支持高吞吐，高可用和强一致性。</p><h2 id="存储服务接口"><a class="markdownIt-Anchor" href="#存储服务接口"></a> 存储服务接口</h2><p>客户端会向存储系统发起查询和更新操作的请求。虽然能做到每一个到达存储服务的请求都能保证被执行，不过在论文 <a href="https://dl.acm.org/doi/10.1145/357401.357402">End-to-end arguments in system design</a> 中提到这样做意义不大。存储服务可以简单的只处理能到达的请求，并在请求完成时响应客户端，这样就不用区分对待请求丢失和响应丢失这两种情况：客户端可以在一段时间没有收到响应后重新发起请求。</p><p>本文描述了两种接口：</p><ul><li><code>query(objId, opts)</code> 会返回 <code>objId</code> 对应的对象的衍生数据；<code>opts</code> 指定了需要返回对象中的哪部分数据。<code>objId</code> 所对应对象的值不会被修改。</li><li><code>update(objId, newVal, opts)</code> 的返回值取决于 <code>opts</code>，一般来说，返回值 <code>V</code> 会基于 <code>objId</code> 对应的对象的当前值和（或）新值 <code>newVal</code> 根据某些预编程的非确定性计算求得；<code>V</code> 会成为 <code>objId</code> 对应的对象的新值。</li></ul><p>查询操作是幂等的，但是更新操作不一定幂等。当客户端重新发起某个非确定性的更新操作时，必须确保上一次的请求并没有被执行。例如，客户端在重新发起更新操作前可以先执行一个查询操作，来确认该对象的值是否已经被更新。</p><p>如果某个请求没有响应，那么并不能区分是因为客户端的请求在到达存储服务前丢失还是客户端的请求被存储服务所忽略。这样当存储服务经历短暂的异常而丢弃了客户端的请求时，客户端可以简单的重新发起请求，而无需对这一异常场景单独处理。当然出于客户端性能的考虑，会尽可能降低系统异常的频率和持续时间。</p><p>在链式复制（<code>chain replication</code>）模式下，系统异常的时间远小于移除一个异常的节点或者增加一个新节点的时间。所以，遇到系统异常，恢复和其他配置变更时，对客户端请求的影响能降低到最小。而其他大多数的副本管理协议（<code>replica-management protocols</code>）要么会阻塞某些操作，要么在异常后或者配置变更期间牺牲一致性保证。</p><p>通过客户端视角下对象的状态以及查询和更新操作下客户端状态的转换，本文定义了所描述的存储系统的功能。下图通过伪代码的方式描述了该存储系统的功能：</p><p><img src="/images/chain-replication-1.png" alt="alt" /></p><p>上图通过两个变量定义了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">objID</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span> 所对应对象的状态：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">objID</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span> 所对应对象已执行的更新操作，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 表示待处理的请求。</p><p>上图也同时列出了可能的状态转换。<code>T1</code> 声明了新到达的请求会被添加到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。<code>T2</code> 声明了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 中的请求被系统忽略时会从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 中移除，不过这种情况不会频繁发生。<code>T3</code> 展示了高层次的请求处理过程：首先请求 <code>r</code> 会从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 中移除；然后查询操作会生成相应的响应，而更新操作在生成响应之外还会将请求 <code>r</code> 添加到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 中。</p><h2 id="链式复制协议"><a class="markdownIt-Anchor" href="#链式复制协议"></a> 链式复制协议</h2><p>本文描述的服务器假定具有 <code>fail-stop</code> 特性：</p><ul><li>每台服务器发生异常时会停机，而不是继续执行错误的状态转换</li><li>服务器的异常能够被系统检测</li></ul><p>对于有 <code>t</code> 个副本的对象来说，可以容忍 <code>t - 1</code> 个副本异常而不影响可用性。所以存储对象的可用性就取决于所有持有该对象副本的服务器都发生了异常的概率。因此，本文假定最多有 <code>t - 1</code> 个服务器会同时发生异常。</p><p><img src="/images/chain-replication-2.png" alt="alt" /></p><p>如上图所示，在链式复制模式下，各节点以一条链的形式来复制对象。链中的第一个节点被称为头节点，最后一个节点被称为尾节点，系统以如下的方式处理请求：</p><ul><li>生成响应：每个请求的响应都只由尾节点生成并发送给客户端。</li><li>查询处理：每个查询请求都只由尾节点处理，并根据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">objID</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span> 查询尾节点本地的数据。</li><li>更新处理：每个更新请求都交由头节点处理。首先头节点根据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">objID</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span> 更新本地的数据，然后将更新请求以 <code>FIFO</code> 的顺序交由后继节点处理，以此类推，一直传递到尾节点处理。</li></ul><p>在上述流程下，系统能保证强一致性，因为查询操作只由尾节点处理，而直到尾节点处理更新操作前，该更新结果都不会暴露给客户端，一旦尾节点更新完成，则后续的查询操作就能读到最新的请求。另外，各节点间 <code>FIFO</code> 的请求传递顺序也保证了某个对象更新的全局顺序性。</p><p>因为查询操作只涉及单个节点，所以查询操作是一个轻量级的操作。对于更新操作来说，前 <code>t - 1</code> 个节点的更新操作和最后一个节点生成响应没有直接关联，属于冗余操作，不过也正是这种冗余操作提高了系统的容错性。</p><p>如果更新操作不是单纯的直接写入而是需要涉及一系列计算，则该计算只会在头节点计算一次，后续节点的更新可以直接复用头节点计算的结果然后直接写入。这也表明系统可以接受非确定性的更新请求，因为非确定性计算只会在头节点计算一次。</p><h3 id="协议细节"><a class="markdownIt-Anchor" href="#协议细节"></a> 协议细节</h3><p>客户端不会直接操作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，所以可以以适合的方式来实现它们。当使用链式复制来实现 <code>Fugure 1</code> 中的规范时：</p><ul><li>使用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>T</mi></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> 来表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，表示尾节点所存储的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 表示链中任一节点收到但还未被尾节点处理的客户端请求集合。</li></ul><p>根据规范描述的如何实现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>（假设此时不会发生异常），可以发现唯一能影响 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 的系统状态转换为：</p><ol><li>链中的某个节点收到了来自客户端的请求（影响 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>）</li><li>尾节点处理客户端请求（影响 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>），这里应该是处理更新请求</li></ol><p>由于这里假设此时系统不会发生异常，所以上述两种情况已经能够覆盖 <code>Fiture 1</code> 中的状态转换。然后具体来看这两种情况：</p><ul><li>链收到来自客户端的请求：客户端将请求发送给头节点（更新）或者尾节点（查询）。在请求未被尾节点处理前，请求 <code>r</code> 会被先添加到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 中，并符合 <code>T1</code> 的转换。</li><li>尾节点处理请求：处理请求时会先从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 中移除请求 <code>r</code>，也就是 <code>T3</code> 的第一步。尾节点处理完后会将请求 <code>r</code> 添加到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 中，而在本文的定义下为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>T</mi></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>。</li></ul><h4 id="处理节点异常"><a class="markdownIt-Anchor" href="#处理节点异常"></a> 处理节点异常</h4><p>如果发现链中某个节点异常（根据 <code>fail-stop</code> 的假设，所有该种类型的异常都能被监测到），则链需要更新配置来剔除异常的节点。针对此，需要引入一个主节点来处理：</p><ul><li>监测节点异常</li><li>通知链中的每个节点在删除异常节点后的新链中的前继和后继节点</li><li>通知客户端新链中的头节点和尾节点</li></ul><p>在本文接下来的内容中，本文假设主节点是个永远不会发生异常的单进程。这虽然简化了描述但显然不是一个现实的假设；在作者的原型实现中，主节点有多个副本，并使用 <code>Paxos</code> 协议来协调各节点，所以对外来说整个系统就有了一个不会发生异常的主节点。</p><p>主节点能监测三种类型的异常：</p><ol><li>头节点异常</li><li>尾节点异常</li><li>中间节点异常</li></ol><p>这三种异常的处理方式取决于更新操作如何在链中传递。</p><p>记链的头节点为 <code>H</code>，则下一个节点为 <code>H + 1</code>，以此类推。再记尾节点为 <code>T</code>，定义下述关系表示节点 <code>i</code> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>i</mi></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2438799999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> 是节点 <code>j</code> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>j</mi></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.379988em;vertical-align:-0.4374159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.942572em;"><span style="top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4374159999999999em;"><span></span></span></span></span></span></span></span></span></span> 的前缀：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>i</mi></msubsup><mo>⪯</mo><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>j</mi></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^i \preceq Hist_{objID}^j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2577720000000001em;vertical-align:-0.383108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⪯</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.379988em;vertical-align:-0.4374159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.942572em;"><span style="top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4374159999999999em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>因为更新操作以 <code>FIFO</code> 的顺序从一个节点传给下一个节点，所以每个节点收到的更新序列是前一个节点收到的更新序列的前缀。所以有：</p><ul><li><code>Update Propagation Invariant</code>：对于满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>≤</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i \leq j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> 的节点 <code>i</code> 和 <code>j</code>（即 <code>i</code> 在链中是 <code>j</code> 的前继节点），有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>j</mi></msubsup><mo>⪯</mo><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>i</mi></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^j \preceq Hist_{objID}^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.379988em;vertical-align:-0.4374159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.942572em;"><span style="top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4374159999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⪯</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2438799999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>。</li></ul><h5 id="头节点异常"><a class="markdownIt-Anchor" href="#头节点异常"></a> 头节点异常</h5><p>头节点异常时，系统会从链中移除头节点，并将头节点的下一个节点作为新的头节点。因为系统最多容忍 <code>t - 1</code> 个节点异常，所以必然存在一个新的头节点。</p><p>由于删除头节点属于系统转换，所以需要证明这等同于一个空操作或者满足 <code>Figure 1</code> 中的 <code>T1</code>，<code>T2</code> 和（或）<code>T3</code>。修改链中的节点可能会改变 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 的值，因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 表示链中任一节点收到但未被尾节点处理的请求，所以从链中删除头节点 <code>H</code> 会一并删除 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 中被 <code>H</code> 接收但还没有传递给下一个节点的请求。而从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 中删除请求符合 <code>Figure 1</code> 中的 <code>T2</code>，所以从链中删除头节点 <code>H</code> 符合 <code>Figure 1</code> 中的规范。</p><h5 id="尾节点异常"><a class="markdownIt-Anchor" href="#尾节点异常"></a> 尾节点异常</h5><p>尾节点异常时，系统会从链中移除尾节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>，并将尾节点的前一个节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">T^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span> 作为新的尾节点。和前面描述的一样，因为系统最多容忍 <code>t - 1</code> 个节点异常，所以必然存在一个新的尾节点。</p><p>删除尾节点会同时影响 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，不过也能满足 <code>T3</code>：因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>T</mi></msubsup><mo>⪯</mo><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><msup><mi>T</mi><mo>−</mo></msup></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^T \preceq Hist_{objID}^{T^-}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⪯</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.375581em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.956365em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8476642857142858em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>（根据 <code>Update Propagation Invariant</code> 可得，因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mo>−</mo></msup><mo>&lt;</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">T^- \lt T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.810431em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>），对于新的尾节点来说，它未处理的请求相比于旧的尾节点少，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><msub><mi>g</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Pending_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 序列的大小会减少。另外，根据 <code>T3</code> 的要求，已完成的请求需要追加到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 中，在更新了尾节点后，某些未被 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span> 完成的请求可能已被 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">T^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span> 完成，所以此时以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><msup><mi>T</mi><mo>−</mo></msup></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^{T^-}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.375581em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.956365em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8476642857142858em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> 来表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</p><h5 id="中间节点异常"><a class="markdownIt-Anchor" href="#中间节点异常"></a> 中间节点异常</h5><p>中间节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 异常时，系统会从链中移除节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>。主节点会首先通知 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 的后继节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 的前继节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">S^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span>，告诉它们新的前继和后继节点。不过这有可能会违反 <code>Update Propagation Invariant</code>，因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 收到的某些请求可能还没有转发给 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>（这些请求必然在任一 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 节点前面的节点 <code>i</code> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>i</mi></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2438799999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> 中）。最适合将这些请求发送给 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 的就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">S^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span>，不过需要些额外的协作。</p><p>记 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span> 表示一个请求集合，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>&lt;</mo><mi>U</mi></msub></mrow><annotation encoding="application/x-tex">&lt;_U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mrel"><span class="mrel">&lt;</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示该集合中所有请求的顺序。如果下述条件满足，则认为请求序列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><mi>r</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\vphantom{M}r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>U</mi><mo separator="true">,</mo><msub><mo>&lt;</mo><mi>U</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(U, &lt;_U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel">&lt;</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span></span></span></span> 一致：</p><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><mi>r</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\vphantom{M}r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 中的所有请求都在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span> 中</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><mi>r</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\vphantom{M}r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 中的所有请求以符合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>&lt;</mo><mi>U</mi></msub></mrow><annotation encoding="application/x-tex">&lt;_U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mrel"><span class="mrel">&lt;</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的顺序升序排序</li></ol><p>最后，对于和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>U</mi><mo separator="true">,</mo><msub><mo>&lt;</mo><mi>U</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(U, &lt;_U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel">&lt;</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span></span></span></span> 一致的请求序列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><mi>r</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\vphantom{M}r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><msup><mi>r</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\vphantom{M}r^{&#x27;}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9669800000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9669800000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.76698em;"><span style="top:-2.789em;margin-right:0.05em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.88698em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>，记 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><mi>r</mi></mrow><mo stretchy="true">‾</mo></mover><mo>⊕</mo><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><msup><mi>r</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\vphantom{M}r} \oplus \overline{\vphantom{M}r^{&#x27;}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9669800000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9669800000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.76698em;"><span style="top:-2.789em;margin-right:0.05em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.88698em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 表示以出现在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><mi>r</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\vphantom{M}r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 中或者 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><msup><mi>r</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\vphantom{M}r^{&#x27;}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9669800000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9669800000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.76698em;"><span style="top:-2.789em;margin-right:0.05em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.88698em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 中的请求组成的请求序列，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><mi>r</mi></mrow><mo stretchy="true">‾</mo></mover><mo>⊕</mo><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><msup><mi>r</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\vphantom{M}r} \oplus \overline{\vphantom{M}r^{&#x27;}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9669800000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9669800000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.76698em;"><span style="top:-2.789em;margin-right:0.05em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.88698em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 也和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>U</mi><mo separator="true">,</mo><msub><mo>&lt;</mo><mi>U</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(U, &lt;_U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel">&lt;</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span></span></span></span> 一致（所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><mi>r</mi></mrow><mo stretchy="true">‾</mo></mover><mo>⊕</mo><mover accent="true"><mrow><mpadded width="0px"><mphantom><mi>M</mi></mphantom></mpadded><msup><mi>r</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\vphantom{M}r} \oplus \overline{\vphantom{M}r^{&#x27;}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9669800000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9669800000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord rlap"><span class="inner"><span class="mord" style="color:transparent;"><span class="mord mathnormal" style="margin-right:0.10903em;color:transparent;">M</span></span></span><span class="fix"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.76698em;"><span style="top:-2.789em;margin-right:0.05em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.88698em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 中的请求以符合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>&lt;</mo><mi>U</mi></msub></mrow><annotation encoding="application/x-tex">&lt;_U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mrel"><span class="mrel">&lt;</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的顺序升序排序）。</p><p>当节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">S^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span> 的后继节点指向节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 时，首先将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><msup><mi>S</mi><mo>−</mo></msup></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^{S^-}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.375581em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.956365em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8476642857142858em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> 中存在但是可能没有发送给节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 的请求通过 <code>FIFO</code> 通道发送给节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>；只有当这些请求都发送给了节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 之后，节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">S^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span> 才能将新来的请求发送给节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>。这样就保证了 <code>Update Propagation Invariant</code>。</p><p>每个节点 <code>i</code> 维护了一个已转发给后继节点但可能还没有被尾节点处理的请求列表，记 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Sent_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Sent_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的增删非常简单：每当节点 <code>i</code> 将某个请求 <code>r</code> 转发给后继节点时，就将 <code>r</code> 加入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Sent_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>；当尾节点处理完某个请求 <code>r</code> 时，它就会给前继节点发送一个 <code>ack(r)</code> 请求，表示请求 <code>r</code> 已处理完毕。当前继节点收到 <code>ack(r)</code> 请求时，就将 <code>r</code> 从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Sent_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 中移除，并同样给它的前继节点发送一个 <code>ack(r)</code> 请求。</p><p>如果尾节点收到了一个请求，那么这个请求必然被所有的前继节点收到，因此有：</p><ul><li><code>Inprocess Request Invariant</code>：如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>≤</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i \le j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>i</mi></msubsup><mo>=</mo><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>j</mi></msubsup><mo>⊕</mo><mi>S</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}^i = Hist_{objID}^j \oplus Sent_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2438799999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.379988em;vertical-align:-0.4374159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.942572em;"><span style="top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4374159999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li></ul><p>所以，当主节点通知节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">S^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span> 新的后继节点是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 时，首先节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">S^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span> 将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><msup><mi>S</mi><mo>−</mo></msup></msub></mrow><annotation encoding="application/x-tex">Sent_{S^-}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.341865em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 中的请求发送给节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>，而已经存在于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><msup><mi>S</mi><mo>+</mo></msup></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^{S^+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.375581em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.956365em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8476642857142858em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> 中的请求则无需发送，这就保证了 <code>Update Propagation Invariant</code>。</p><p><img src="/images/chain-replication-3.png" alt="alt" /></p><p>上图描述了中间节点发生异常时的流程。主节点发送消息1告诉节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 新的前继节点，节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 收到消息后发送消息2告知主节点已确认收到配置变更消息，同时也告知了主节点最后收到的更新消息序列号 <code>sn</code>；然后主节点发送消息3给节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">S^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span> 新的后继节点以及节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 最后收到的更新消息序列号 <code>sn</code>，节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">S^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span> 就能计算出需要将哪些更新请求发送给节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>；最后消息4就是节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">S^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span> 发送给节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">S^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 的更新请求。</p><h5 id="扩展链"><a class="markdownIt-Anchor" href="#扩展链"></a> 扩展链</h5><p>系统会将异常的节点从链中移除。不过链越短则能容忍的节点异常也就越少，最终由于节点数过少从而影响了对象存储的可用性。解决方法就是当链的长度减少到一定程度时，向链中增加新的节点。鉴于节点异常的概率不是很高，以及往链中添加一个节点不需要太长时间，链的长度基本能维持在期望的 <code>t</code> 个节点的水平（因此 <code>t - 1</code> 个节点都发生了异常才会造成可用性问题）。</p><p>理论上可以往链的任意位置插入一个新节点。不过，往链的结尾插入一个新的节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">T^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 是最简单的。对于一个新的尾节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">T^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>，它的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><msup><mi>T</mi><mo>+</mo></msup></msub></mrow><annotation encoding="application/x-tex">Sent_{T^+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.341865em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 永远是个空列表，所以初始化 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><msup><mi>T</mi><mo>+</mo></msup></msub></mrow><annotation encoding="application/x-tex">Sent_{T^+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.341865em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 很简单。剩下的就是要初始化 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><msup><mi>T</mi><mo>+</mo></msup></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^{T^+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.375581em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.956365em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8476642857142858em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> 来满足 <code>Update Propagation Invariant</code>。</p><p>可以让当前的尾节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span> 发送自己的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>T</mi></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> 给节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">T^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 来完成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><msup><mi>T</mi><mo>+</mo></msup></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^{T^+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.375581em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.956365em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8476642857142858em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> 的初始化。这个过程（如果数据太大可能会需要一段时间）可以和节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span> 处理来自客户端的查询请求和来自前继节点的更新请求并行执行，只要每一个更新请求都追加到列表 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">Sent_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 中。因为整个过程中满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><msup><mi>T</mi><mo>+</mo></msup></msubsup><mo>⪯</mo><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>T</mi></msubsup></mrow><annotation encoding="application/x-tex">Hist_{objID}^{T^+} \preceq Hist_{objID}^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.375581em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.956365em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8476642857142858em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⪯</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>，所以也满足 <code>Update Propagation Invariant</code>。因此，只要满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><mi>T</mi></msubsup><mo>=</mo><mi>H</mi><mi>i</mi><mi>s</mi><msubsup><mi>t</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>I</mi><mi>D</mi></mrow><msup><mi>T</mi><mo>+</mo></msup></msubsup><mo>⊕</mo><mi>S</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">Hist_{objID}^T = Hist_{objID}^{T^+} \oplus Sent_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.375581em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.956365em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8476642857142858em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则也满足 <code>Inprocess Request Invariant</code>，节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">T^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 就可以成为新的尾节点：</p><ul><li>节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span> 被通知不再是尾节点。节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span> 就可以丢弃来自客户端的查询请求，不过更合适的策略是将这些查询请求转发给新的尾节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">T^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>。</li><li>节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span> 将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">Sent_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 中的请求按序发送给节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">T^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>。</li><li>主节点被通知新的尾节点是节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">T^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>。</li><li>所有客户端被通知新的查询请求需要发送给节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">T^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>。</li></ul><h2 id="主从复制协议"><a class="markdownIt-Anchor" href="#主从复制协议"></a> 主从复制协议</h2><p>链式复制也是主从复制协议的一种，而主从复制协议本身也是复制状态机的一种。在主从复制协议下，系统会指定一个节点为主节点，并且：</p><ul><li>主节点强制按序执行客户端请求（因此保证了强一致性）</li><li>主节点按序将客户端请求或结果更新发送给从节点</li><li>主节点会等待所有非异常从节点的请求确认</li><li>主节点收到从节点的请求确认后，再响应客户端</li></ul><p>如果主节点发生异常，某个从节点会被提升为主节点。</p><p>在链式复制模式下，保证请求的顺序性的主节点的角色由两个节点承担。头节点负责处理更新请求，尾节点负责处理查询请求。这种分工一方面拆分了任务，另一方面降低了处理查询请求的延迟和负载，因为只会有一个节点处理查询请求（对单个对象来说），而且这个查询请求不会依赖链中的其他操作。而在主从复制模式下，主节点必须先收到从节点之前更新请求的确认，才能响应客户端的查询请求。</p><p>不管是链式复制还是主从复制，更新请求都需要发送给所有的节点，否则副本间可能会出现数据不一致。链式复制以串行的方式分发更新请求，相比于主从复制的并行更新有着更高的延迟。在并行更新下，整个过程的时间就取决于最慢的从节点更新完成的时间；在串行更新下，整个过程的时间等同于所有节点更新完成的时间之和。</p><p>当系统发生异常时，其中一个关注的点是客户端感知到的系统异常会持续多久，在这期间系统检测到了异常并需要重新调整集群配置；另一个关注点是由于节点异常所带来的延迟增长。</p><p>当某个节点发生异常到这个异常被监测到的时间是主要耗时的地方，不过这个时间对于链式复制和主从复制来说都是一样的。所以，剩下的就是要比较两种方式下异常恢复所需要的时间；相比于 <code>CPU</code> 计算延迟，消息延迟在异常恢复时间中被认为是占据主导地位。</p><p>对于链式复制，有三种异常需要考虑：头节点异常，中间节点异常，尾节点异常：</p><ul><li>头节点异常：客户端的查询请求不受影响。更新请求暂不可用，整体恢复时间受限于两个消息的处理，一个是主节点广播通知新的头节点和它的后继节点；二是主节点广播通知客户端新的头节点。</li><li>中间节点异常：客户端的查询请求不受影响。更新请求可能会延迟不过不会丢失，异常节点后的节点还能正常处理已收到的更新请求，而异常节点前的更新请求可能会延迟。整个过程的延迟取决于 <code>Figure 3</code> 中的四个消息的处理时间。</li><li>尾节点异常：客户端的查询和更新请求都不可用。整个过程的延迟取决于两个消息的处理，一个是主节点通知新的尾节点，另一个是主节点通知所有客户端新的尾节点。</li></ul><p>在主从复制模式下，需要考虑两种异常：主节点异常和从节点异常。查询请求和更新请求需要处理的情况都一样：</p><ul><li>主节点异常：整个过程的延迟取决于5个消息的处理。系统监测到主节点发生异常，然后广播通知所有的从节点，要求各从节点返回已处理的更新请求数量并告知从节点暂停处理请求。每个从节点发送响应给系统。系统收到所有的响应后，选举一个新的主节点，并将主节点的信息广播给所有的从节点。只有处理了最多数量的更新请求的从节点才有可能被选为主节点，之后新的主节点需要给其他从节点补发缺失的更新请求。最后，系统再通知所有客户端新的主节点信息。</li><li>从节点异常：客户端的查询请求不受影响，只要当前没有进行中的更新请求。如果有进行中的更新请求，则整个过程的延迟取决于一个消息的处理，系统需要通知主节点某个从节点异常，主节点就知道无须等待这个异常的节点对更新请求的确认。</li></ul><p>所以异常情况下，链式复制的最差情况（尾节点异常）不会比主从复制的最差情况（主节点异常）还差；而链式复制的最好情况（中间节点异常）则好于主从复制的最好情况（从节点异常）。如果系统异常时的持续时间是设计存储服务的首要设计目标，那么需要结合请求的类型（查询请求多还是更新请求多）以及不同系统异常发生的概率来决定选择链式复制还是主从复制。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://pdos.csail.mit.edu/6.824/papers/cr-osdi04.pdf">Chain Replication for Supporting High Throughput and Availability</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;一个存储系统一般来说会实现一些接口使得客户端能够存储，获取，或者修改数据。文件系统和数据库系统是最广为人知的例子。对于文件系统来说，对单个文件的</summary>
      
    
    
    
    
    <category term="Paper" scheme="https://frederick-s.github.io/tags/Paper/"/>
    
    <category term="MIT 6.824" scheme="https://frederick-s.github.io/tags/MIT-6-824/"/>
    
    <category term="Distributed Systems" scheme="https://frederick-s.github.io/tags/Distributed-Systems/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.824 - ZooKeeper: Wait-free coordination for Internet-scale systems</title>
    <link href="https://frederick-s.github.io/2022/05/19/mit-6.824-zookeeper/"/>
    <id>https://frederick-s.github.io/2022/05/19/mit-6.824-zookeeper/</id>
    <published>2022-05-18T16:00:00.000Z</published>
    <updated>2022-05-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>大型分布式系统需要各式各样的协同。配置就是其中一种最基础的形式，在其最简单的形式中，配置只是一系列供系统使用的参数，而对于更复杂的系统来说，配置还可以动态更新。群组成员关系和选主同样在分布式系统中很常见：通常各进程需要知道哪些进程还存活，以及哪些进程在负责统一管理。另外，分布式锁作为一种强大的协调原语能够对临界资源提供互斥访问保护。</p><p>一种实现协同的方式是为每一个不同的协同需求开发一个服务。例如，<code>Amazon Simple Queue Service</code> 专注于消息队列。同时也存在专门为了选主和配置所开发的服务。针对较强的原语开发的服务能够用于实现较弱一级的原语。例如，<code>Chubby</code> 是一个强同步性保证的锁服务。则可以借助锁来实现选主，群组成员关系等服务。</p><p>相较于在服务端实现特定的协同原语，<code>ZooKeeper</code> 的作者选择暴露某些 <code>API</code> 来让应用开发者自行实现需要的原语。这种设计选择需要实现一个协同内核（<code>coordination kernel</code>）使得新原语的开发不需要修改核心服务端代码。这种方式能够适配应用程序对不同协同形式的需求，而不是让开发者受限于某几个固定的原语。</p><p>在设计 <code>ZooKeeper</code> 的 <code>API</code> 时，设计者移除了阻塞原语，例如锁。一个协同服务的阻塞原语会导致某些问题，缓慢或出错的客户端会拖慢快速的客户端的性能。如果服务处理请求时需要依赖响应以及负责客户端的异常检测，那么服务的实现会变得更为复杂。因此，<code>ZooKeeper</code> 实现了一套 <code>API</code> 能够操作以类似文件系统的方式组织的无等待（<code>wait-free</code>）对象。实际上，<code>ZooKeeper</code> 的 <code>API</code> 类似于其他任何的文件系统，以及和去除了加锁（<code>lock</code>），打开（<code>open</code>），关闭（<code>close</code>）这些方法的 <code>Chubby</code> 类似。实现了无等待对象的 <code>ZooKeeper</code> 显著有别于其他基于阻塞原语（例如锁）的系统。</p><p>虽然无等待这一特性对于性能和容错很重要，但是对于协同来说来不够。<code>ZooKeeper</code> 还需要对各操作提供其他保证。对客户端 <code>FIFO</code> 的操作保证和线性化写入的保证确保了服务的高效实现，同时也能够满足应用程序实现自定义协同原语的需求。实际上，利用 <code>ZooKeeper</code> 的 <code>API</code> 可以实现任意节点数量的共识算法。</p><p><code>ZooKeeper</code> 服务通过服务器间的复制来实现高可用和性能。它的高性能使得大量客户端进程能通过协同内核来管理方方面面的协同需求。通过一种简单的管道架构来实现 <code>ZooKeeper</code> 使得服务在承受几百或上千的请求的同时依然保持着低延迟。这种管道方式天然的支持对同一个客户端的请求以 <code>FIFO</code> 的方式执行。对客户端请求的 <code>FIFO</code> 顺序执行的保证使得客户端能异步的提交请求。异步提交也使得客户端同一时间有多个操作。这个特性很有用，例如当某个客户端成为主节点后，它需要操作元数据然后更新。如果缺少了多操作同时进行的特性，那么这个主节点初始化的时间可能达到秒级的数量级而不是亚秒级。</p><p>为了满足写入的线性化保证，<code>ZooKeeper</code> 实现了一个基于主节点的原子广播协议，即 <code>Zab</code>。典型的 <code>ZooKeeper</code> 应用属于读密集型应用，所以需要保证读操作的扩展性。<code>ZooKeeper</code> 的读操作由当前服务器完成，不涉及和其他服务器的交互，也不会使用 <code>Zab</code> 来保证读取的顺序性。</p><p>在客户端缓存数据是提高读性能的重要手段。例如，客户端可以缓存当前主节点的信息而不是每次请求 <code>ZooKeeper</code>。<code>ZooKeeper</code> 同时提供了监听机制来协助客户端缓存数据而无需直接管理客户端的缓存。借助这个机制，客户端可以对某个数据进行更新监听，从而在数据更新时收到通知。而 <code>Chubby</code> 会直接管理客户端的缓存，它会阻塞某个数据的更新直到所有缓存了该数据的客户端都清除了缓存。在这个设计下，如果某个客户端运行缓慢或者出错，则会拖慢数据的更新。<code>Chubby</code> 使用租约来避免某个客户端永久的阻塞系统。不过，租约只是确保了运行缓慢或者出错的客户端对性能的影响的上限，而 <code>ZooKeeper</code> 的监听机制则是完全的避免了这个问题。</p><p>本文主要介绍了 <code>ZooKeeper</code> 的设计和实现。借助 <code>ZooKeeper</code>，我们可以实现应用程序所需要的所有协同原语，即使只有写入是线性化保证的。为了验证这个设计，本文介绍了如何使用 <code>ZooKeeper</code> 来实现某些协同原语。</p><p>本文的关键点如下：</p><ul><li>协同内核（<code>Coordination kernel</code>）：本文提出了一种供分布式系统使用的无等待、宽松一致性保证的协同服务。特别的，本文描述了一种协同内核的设计和实现，并且已经在很多重要的应用程序中使用来实现各种各样的协同服务。</li><li>协同示例（<code>Coordination recipes</code>）：本文描述了如何使用 <code>ZooKeeper</code> 来实现高层次的协同原语，包括在分布式应用中经常用到的阻塞和强一致性的原语。</li><li>使用协同的经验（<code>Experience with Coordination</code>）：本文分享了使用 <code>ZooKeeper</code> 的方式以及评估了其性能。</li></ul><h2 id="zookeeper-服务"><a class="markdownIt-Anchor" href="#zookeeper-服务"></a> ZooKeeper 服务</h2><p>客户端通过 <code>ZooKeeper</code> 提供的客户端类库来向 <code>ZooKeeper</code> 提交请求。除了向客户端暴露 <code>ZooKeeper</code> 提供的 <code>API</code> 外，客户端类库还负责维护客户端和 <code>ZooKeeper</code> 服务器间的连接。</p><p>本节会首先从高层次来介绍 <code>ZooKeeper</code> 服务，然后再讨论客户端和 <code>ZooKeeper</code> 交互的 <code>API</code>。</p><p>术语：本文使用客户端（<code>client</code>）来表示使用 <code>ZooKeeper</code> 服务的一个用户；使用服务端（<code>server</code>）来表示 <code>ZooKeeper</code> 的服务提供者；使用 <code>znode</code> 来表示 <code>ZooKeeper</code> 的一个内存数据节点，这些数据节点以层次化的命名空间的形式所组织，即 <code>data tree</code>。同时，本文使用更新（<code>update</code>）和写入（<code>write</code>）来表示任何修改 <code>data tree</code> 状态的操作。客户端和 <code>ZooKeeper</code> 通过建立 <code>session</code> 进行连接，并且通过 <code>session handle</code> 发送请求。</p><h3 id="服务概览"><a class="markdownIt-Anchor" href="#服务概览"></a> 服务概览</h3><p><code>ZooKeeper</code> 将数据抽象成数据节点（<code>znodes</code>）后供客户端访问，所有数据节点以层次化的命名空间进行组织。<code>znodes</code> 是客户端可通过 <code>ZooKeeper</code> 的 <code>API</code> 操作的数据对象。层次化的命名空间通常被用于文件系统。因为用户已经习惯了这种抽象，所以 <code>ZooKeeper</code> 很自然的以这种方式来管理数据，另外这也能更好的管理应用程序的元数据。<code>ZooKeeper</code> 使用和标准 <code>UNIX</code> 文件系统命名一样的方式来表示一个 <code>znode</code>。例如，<code>A/B/C</code> 表示 <code>znode</code> <code>C</code> 的路径，并且 <code>C</code> 的父节点是 <code>B</code>，<code>B</code> 的父节点是 <code>A</code>。每个 <code>znode</code> 都会保存数据，而且除了临时节点之外的所有节点都可以有子节点。</p><p>客户端可以创建两种类型的 <code>znode</code>：</p><ul><li>常规（<code>Regular</code>）：客户端可以显式的创建和删除常规节点。</li><li>临时（<code>Ephemeral</code>）：客户端创建临时节点后，可以显式的删除，或者当客户端和 <code>ZooKeeper</code> 的 <code>session</code> 结束后（客户端主动断开连接或者由于异常失去连接）由系统自动删除。</li></ul><p>另外，客户端在创建一个 <code>znode</code> 时可以设置一个顺序标记。设置了顺序标记所创建的节点会在节点名称后追加一个单调递增的序号。如果 <code>n</code> 是一个新的 <code>znode</code>，<code>p</code> 是 <code>n</code> 的父节点，那么 <code>n</code> 的序号一定不会比在 <code>n</code> 之前所创建的 <code>p</code> 的子节点的序号小。</p><p><code>ZooKeeper</code> 实现了监听器使得客户端能及时的收到数据修改的通知而无需轮询。当客户端发起一个读操作并设置监听时，这个读操作会和普通的读操作一样正常返回，不过当数据更新时，系统能通知客户端。监听器在单次 <code>session</code> 内只会被触发一次，一旦监听器被触发或者 <code>session</code> 关闭，该监听器就会被注销。监听器被触发表示监听的数据发生了修改，但是不会告知被修改后的值。例如，如果一个客户端在 <code>&quot;/foo&quot;</code> 被修改了两次之前执行了 <code>getData(&quot;/foo&quot;, true)</code>，那么客户端会收到一次通知表示 <code>&quot;/foo&quot;</code> 指向的数据被修改了。一些 <code>session</code> 级别的事件，例如连接丢失，也能通过监听回调通知给客户端，那么客户端就会知道监听通知可能会延迟。</p><h4 id="数据模型"><a class="markdownIt-Anchor" href="#数据模型"></a> 数据模型</h4><p><code>ZooKeeper</code> 的数据模型基本上等同于简化版 <code>API</code> 的文件系统，只能一次性读取或者写入全部数据；或者等同于是一个以层次结构组织键的键值表。层次结构的命名空间能够为不同的应用程序分配子命名空间，同时也方便为不同的子命名空间分配访问权限。同时 <code>ZooKeeper</code> 在客户端这层提供了文件夹的概念，能够用于构建高层次的原语。</p><p>和文件系统中的文件不同，<code>znodes</code> 的设计目的并不是为了通用数据存储。相反，<code>znodes</code> 是作为客户端应用程序的抽象，典型场景是用于保存协同目的的元数据。在下图中有两个子树，其中一个用于应用程序1（<code>/app1</code>），另一个用于应用程序2（<code>/app2</code>）。应用程序1对应的子树实现了一个简单的群组成员关系协议：每个客户端 <code>p_i</code> 在 <code>/app1</code> 下会创建一个 <code>znode</code> <code>p_i</code>，只要客户端还存活，对应的节点就会存在，那么，根据 <code>/app1</code> 下的节点数量就能知道当前应用程序有多少个存活的进程能提供服务。</p><p><img src="/images/zookeeper-1.png" alt="alt" /></p><p>虽然 <code>znodes</code> 的设计目的不是为了通用数据存储，不过 <code>ZooKeeper</code> 也允许客户端在 <code>znode</code> 中保存数据，例如分布式计算需要用到的元数据或者配置信息。例如，在一个基于选主的应用中，一个刚启动的应用程序节点需要知道当前的主节点是谁。为了实现这个目的，可以让当前主节点将主节点的信息写入到某个约定的 <code>znode</code> 路径中。此外，<code>znode</code> 本身也提供了时间戳和版本号这样的元数据，使得客户端能够监控 <code>znodes</code> 的数据变化，从而根据 <code>znode</code> 的数据版本进行数据更新。</p><h4 id="会话"><a class="markdownIt-Anchor" href="#会话"></a> 会话</h4><p>一个客户端连接到 <code>ZooKeeper</code> 时会初始化一个 <code>session</code>。每一个 <code>session</code> 伴随着一个超时时间。如果在一个超时时间之内 <code>ZooKeeper</code> 没有收到来自客户端的任何请求，那么 <code>ZooKeeper</code> 就会认为这个客户端发生了异常。客户端可以主动通过关闭 <code>session handle</code> 来结束一个 <code>session</code> 或者 <code>ZooKeeper</code> 监测到客户端发生异常而自动关闭 <code>session</code>。在一个 <code>session</code> 内，客户端所观察到的系统状态变化和其提交的操作一一顺序对应。在一个 <code>session</code> 内，如果当前客户端连接的 <code>ZooKeeper</code> 节点发生异常，<code>ZooKeeper</code> 客户端类库能无缝的将其连接到一台新的 <code>ZooKeeper</code> 节点上，从而在各节点间完成持久化。</p><h3 id="客户端-api"><a class="markdownIt-Anchor" href="#客户端-api"></a> 客户端 API</h3><p><code>ZooKeeper</code> 提供了以下的核心 <code>API</code>：</p><ul><li><code>create(path, data, flags)</code>：创建一个路径为 <code>path</code> 的 <code>znode</code>，并将数据 <code>data[]</code> 保存其中，然后返回新建的 <code>znode</code> 的名称。<code>flags</code> 用于指定 <code>znode</code> 的类型：常规节点，临时节点，以及设置顺序标记。</li><li><code>delete(path, version)</code>：如果指定路径 <code>path</code> 下的 <code>znode</code> 的版本号和 <code>version</code> 匹配，则删除该节点。</li><li><code>exists(path, watch)</code>：如果指定路径 <code>path</code> 下的 <code>znode</code> 存在则返回 <code>true</code>，否则返回 <code>false</code>。如果 <code>watch</code> 为 <code>true</code>，则当 <code>znode</code> 的数据发生变化时，客户端会收到通知。</li><li><code>getData(path, watch)</code>：获取指定路径 <code>path</code> 下的 <code>znode</code> 的数据和元数据，例如版本信息。<code>watch</code> 的功能和 <code>exists()</code> 中的 <code>watch</code> 的功能一致，只不过如果当前节点不存在，则 <code>watch</code> 不会生效。</li><li><code>setData(path, data, version)</code>：如果指定路径 <code>path</code> 下的 <code>znode</code> 的版本号和 <code>version</code> 匹配，则将数据 <code>data[]</code> 写入到该节点。</li><li><code>getChildren(path, watch)</code>：返回指定路径 <code>path</code> 下的 <code>znode</code> 的子节点的名称。</li><li><code>sync(path)</code>：阻塞等待直到在操作开始时所有进行中的更新操作都同步到了当前客户端所连接的服务端。<code>path</code> 参数当前未使用。</li></ul><p><code>ZooKeeper</code> 通过 <code>API</code> 为每个方法提供了同步和异步两个版本。当应用程序希望执行单一 <code>ZooKeeper</code> 操作而且没有其他并发任务要执行时，可以选择调用同步方法。而如果应用程序希望同时执行多个 <code>ZooKeeper</code> 操作以及有其他任务需要并发执行时，可以选择调用异步方法。<code>ZooKeeper</code> 客户端类库保证了异步方法的回调顺序和提交请求的顺序一致。</p><p><code>ZooKeeper</code> 不直接通过 <code>handles</code> 来访问 <code>znodes</code>。每个客户端请求会带上所要操作的 <code>znode</code> 的全路径。这不仅简化了 <code>API</code>（没有 <code>open()</code> 或者 <code>close()</code> 方法），同时服务端也不需要维护额外的状态。</p><p>客户端对 <code>ZooKeeper</code> 每个更新操作都会带上一个期望的版本号，这就能实现按条件更新。如果当前 <code>znode</code> 的版本号和期望的版本号不一致，那么此次更新就会失败并返回版本不匹配错误。如果传入的版本号是-1，则表示不进行版本号校验。</p><h3 id="zookeeper-的保证"><a class="markdownIt-Anchor" href="#zookeeper-的保证"></a> ZooKeeper 的保证</h3><p><code>ZooKeeper</code> 有两个基本的顺序保证：</p><ul><li>线性化写入（<code>Linearizable writes</code>）：所有对 <code>ZooKeeper</code> 的状态修改都会按序串行化执行。</li><li>先来先执行的客户端顺序（<code>FIFO client order</code>）：来自同一个客户端的所有请求会按照请求发送的顺序执行。</li></ul><p><code>ZooKeeper</code> 提出的线性化和 <code>Herlihy</code> 提出的线性化有所不同，<code>ZooKeeper</code> 的作者称之为 <code>A-linearizability</code>（<code>asynchronous linearizability</code>）。在 <code>Herlihy</code> 的线性化定义下，一个客户端只能有一个进行中的操作（一个客户端对应一个线程）。而在 <code>ZooKeeper</code> 中，一个客户端允许有多个进行中的操作，那么从设计上可以选择对多个进行中的任务不保证执行顺序，或者保证 <code>FIFO</code> 顺序。<code>ZooKeeper</code> 选择了后者。如果一系列操作的结果适用于 <code>linearizable</code> 的对象，那么也同时适用于 <code>A-linerizalbe</code> 的对象，因为 <code>A-linearizability</code> 本身就满足线性化。因为只有更新操作需要满足 <code>A-linerizalbe</code>，所以 <code>ZooKeeper</code> 的读操作可以直接通过本地副本执行。进一步使得添加新的服务器时能实现对服务的线性扩展。</p><p>下面将通过一个场景示例来说明上述两个保证是如何交互的。某个系统需要选举一个主节点来分配任务给其他工作节点执行。每当新选举了一个主节点，它需要更新大量的配置参数并且当更新完成时通知其他的工作节点。这就带来了两个重要的需求：</p><ul><li>当主节点在更新配置参数时，其他工作节点不能使用还未更新完成的配置参数。</li><li>如果主节点在配置参数更新完成前发生异常，其他工作节点也不能使用未更新完成的配置参数。</li></ul><p>类似 <code>Chubby</code> 提供的分布式锁能满足第一个需求，但是不足以满足第二个需求，因为当其他工作节点获取锁读取配置参数时，它并不能知道配置参数是否已更新完成。在 <code>ZooKeeper</code> 中，主节点可以在某个约定的路径创建一个 <code>ready</code> 节点，只有在 <code>ready</code> 节点存在的情况下，其他工作节点才可以认为配置参数已更新完成。在更新配置参数前，主节点会先删除 <code>ready</code> 节点，然后更新配置参数，最后再创建 <code>ready</code> 节点。所有这些操作都可以以管道的方式进行并异步提交请求，从而使得配置参数能快速更新。虽然一次更新操作的耗时是2毫秒的数量级，但是如果主节点需要阻塞的依次更新5000个配置参数的话则一共需要10秒才能完成；通过异步提交更新，所有的请求能在一秒内完成。因为 <code>ZooKeeper</code> 的顺序性保证，如果某个工作节点发现 <code>ready</code> 节点存在，那么就说明配置参数也必然更新完成了，因为 <code>ready</code> 节点的创建晚于配置参数的更新。如果主节点在配置参数更新完成前发生异常，那么也就不会创建 <code>ready</code> 节点，其他工作节点就知道配置参数更新未完成。</p><p>不过上述方案还存在一个问题：如果某个工作节点此时看见 <code>ready</code> 节点存在，但是同时主节点删除了 <code>ready</code> 节点然后开始更新配置参数，那么工作节点就会读取到正在更新的配置参数。这个问题通过监听通知的顺序性保证来解决：如果客户端对某个节点 <code>A</code> 开启了监听，此时系统先对节点 <code>A</code> 进行了修改，然后对另一个节点 <code>B</code> 进行了修改，此时客户端发起了对节点 <code>B</code> 的读请求，那么 <code>ZooKeeper</code> 会保证客户端先收到节点 <code>A</code> 修改的异步通知。所以，如果客户端在判断 <code>ready</code> 节点是否存在时开启了监听，那么它就会在读取到修改中的配置参数前先收到 <code>ready</code> 节点修改的通知，从而可以中断配置参数的读取。</p><p>如果客户端之间还有除了 <code>ZooKeeper</code> 之外的通信方式也会引发另一个问题。例如，两个客户端 <code>A</code> 和 <code>B</code> 通过 <code>ZooKeeper</code> 共享配置，然后通过其他某种方式通信。如果 <code>A</code> 修改了 <code>ZooKeeper</code> 中的配置然后告诉 <code>B</code>，那么 <code>B</code> 收到通知后读取 <code>ZooKeeper</code> 就期望能获取到修改后的配置。不过如果 <code>B</code> 连接的 <code>ZooKeeper</code> 副本落后于主节点，那么 <code>B</code> 可能无法读取到最新的配置。而采用写入 <code>ready</code> 节点再读取的方式能保证 <code>B</code> 读取到最新的配置。<code>ZooKeeper</code> 提供了 <code>sync</code> 方法来更高效的解决这个问题：如果 <code>sync</code> 请求之后有一个读请求，则 <code>ZooKeeper</code> 会暂缓这个读请求。<code>sync</code> 会同步在这之前进行中的写请求，而无需等待当前所有的待写入操作完成。这个原语类似于 <code>ISIS</code> 中的 <code>flush</code> 原语。</p><p><code>ZooKeeper</code> 同时也有存活性（<code>liveness</code>）和持久性（<code>durability</code>）的保证：只要 <code>ZooKeeper</code> 集群中过半数的机器存活，那么访问 <code>ZooKeeper</code> 服务就没有问题；如果 <code>ZooKeeper</code> 成功响应了某个修改请求，只要过半数的机器在异常后最终能恢复，那么不管经历了多少次系统异常这个更新都不会丢失。</p><h3 id="原语示例"><a class="markdownIt-Anchor" href="#原语示例"></a> 原语示例</h3><p>本节描述了如何利用 <code>ZooKeeper</code> 的 <code>API</code> 来构建更强大的原语。对于 <code>ZooKeeper</code> 来说，它并不知晓这些原语的存在，因为这些原语是由客户端通过 <code>API</code> 自行实现的。一些通用的原语例如群组成员关系和配置管理都是无等待原语。对于其他原语如 <code>rendezvous</code>，客户端则需要等待某个事件发生。虽然 <code>ZooKeeper</code> 是无等待服务，客户端也同样可以实现阻塞的原语。<code>ZooKeeper</code> 的顺序保证可以高效的审视系统的状态，而监听机制则实现了高效的等待。</p><h4 id="配置管理configuration-management"><a class="markdownIt-Anchor" href="#配置管理configuration-management"></a> 配置管理（Configuration Management）</h4><p><code>ZooKeeper</code> 可以用于分布式系统中实现动态配置管理。在最简单的形式中，配置信息保存在一个 <code>znode</code> 中，例如 <code>z_c</code>。应用启动时会读取 <code>z_c</code> 的数据并设置监听状态。如果 <code>z_c</code> 的数据更新了，那么应用就会收到通知，然后就可以读取最新的配置，并继续设置监听状态。</p><p>在这个例子以及其他大多数使用监听器的例子中，监听器确保了应用能获取到最新的数据。例如，如果某个监听 <code>z_c</code> 的应用收到了 <code>z_c</code> 的修改通知，而在这个应用读取 <code>z_c</code> 之前，<code>z_c</code> 又被修改了3次，那么这个应用不会再收到通知。这并不会影响应用的行为，因为 <code>ZooKeeper</code> 的变更通知不会返回更新后的数据，应用需要再次读取才能获得节点最新的数据，只通知一次已经使得应用知道当前节点的数据已经过期，没有必要重复通知。</p><h4 id="rendezvous"><a class="markdownIt-Anchor" href="#rendezvous"></a> Rendezvous</h4><p>有时候在分布式系统中并不能清晰的预知系统的最终配置是什么。例如，某个客户端可能会希望启动一个主节点和几个工作节点，不过由于节点的启动是由某个调度器执行，客户端并不能事先知道某些需要的信息，例如工作节点需要连接的主节点的地址和端口号。这个问题可以由客户端通过 <code>ZooKeeper</code> 创建一个 <code>rendezvous</code> 节点 <code>z_r</code> 来解决。客户端将 <code>z_r</code> 的全路径作为启动参数传给主节点和工作节点。当主节点启动后，它就将自己的地址和端口号写入到 <code>z_r</code> 中。当工作节点启动后，它就能从 <code>z_r</code> 中读取主节点的地址和端口号，并设置节点的监听状态。如果工作节点启动时主节点还未写入数据到 <code>z_r</code>，那么工作节点就会等待数据写入的通知。如果 <code>z_r</code> 是临时节点，那么创建 <code>z_r</code> 节点的客户端下线后，主节点和工作节点就能收到节点删除通知，并在完成资源清理后退出。</p><h4 id="群组成员关系group-membership"><a class="markdownIt-Anchor" href="#群组成员关系group-membership"></a> 群组成员关系（Group Membership）</h4><p>客户端可以利用临时节点的特性来实现群组成员关系管理。这里利用了可以通过监听临时节点来观测创建该节点的 <code>session</code> 状态的特性。首先创建一个节点 <code>z_g</code> 来表示群组。当群组中的某个进程启动时，它会在 <code>z_g</code> 下创建一个临时的子节点。如果每个进程都有唯一的命名或标识，那么这个命名或标识就可以作为 <code>ZooKeeper</code> 节点的名称；否则就可以在创建节点时设置 <code>SEQUENTIAL</code> 标记让 <code>ZooKeeper</code> 自动在节点名称后追加一个单调递增的数字，以保证名称的唯一性。各进程可以将进程相关的信息放到临时节点中，例如当前进程的地址和端口号。</p><p>当进程在节点 <code>z_g</code> 下创建完临时进程后就可以正常启动。它不需要做其他任何事。如果这个进程发生异常或者主动结束，那么它所创建的临时节点也会自动被删除。</p><p>各进程可以简单的通过查询 <code>z_g</code> 的所有子节点来获取当前群组成员的信息。如果某个进程想要监控群组成员的变化，那么它可以设置监听标记（通过 <code>getChildren(path, watch)</code> 方法设置 <code>watch</code>），然后在收到通知时更新群组信息。</p><h4 id="简单锁simple-locks"><a class="markdownIt-Anchor" href="#简单锁simple-locks"></a> 简单锁（Simple Locks）</h4><p>虽然 <code>ZooKeeper</code> 不是一个锁服务，但也可以用来实现锁。使用 <code>ZooKeeper</code> 的应用通常使用同步原语来适配其需求。本节通过使用 <code>ZooKeeper</code> 实现锁来展示可以通过 <code>ZooKeeper</code> 来实现各种各样的通用同步原语。</p><p>最简单的锁实现借助于 <code>lock files</code>。使用一个 <code>znode</code> 来表示一把锁。为了获取锁，客户端会尝试以 <code>EPHEMERAL</code> 标记创建一个临时节点。如果创建成功，那么这个客户端就获得了锁。否则，客户端就会去读取这个 <code>znode</code> 并设置监听状态，从而当这个临时节点被删除时能收到通知。当持有锁的客户端发生异常或者主动删除该节点时，则代表释放了锁。其他监听的客户端就会收到通知并尝试重新创建临时节点来获取锁。</p><p>虽然这种方式能实现锁，不过也存在几个问题。首先，它会造成羊群效应（<code>herd effect</code>）。如果有大量的客户端在等待释放锁，那么当锁被释放时，这些客户端都会被通知然后都会尝试获取锁，而实际上只会有一个客户端能获得锁。第二，这种方式只实现了互斥锁。下面两种原语展示了如何解决这两个问题。</p><h4 id="没有羊群效应的简单锁simple-locks-without-herd-effect"><a class="markdownIt-Anchor" href="#没有羊群效应的简单锁simple-locks-without-herd-effect"></a> 没有羊群效应的简单锁（Simple Locks without Herd Effect）</h4><p>首先定义节点 <code>l</code> 来实现锁。然后，将所有希望获取锁的客户端按照请求顺序排序，之后这些客户端就能按照请求的顺序获取锁。客户端希望获取锁时需要执行下面的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Lock</span><br><span class="line">1 n = create(l + &quot;/lock-&quot;, EPHEMERAL|SEQUENTIAL)</span><br><span class="line">2 C = getChildren(l, false)</span><br><span class="line">3 if n is lowest znode in C, exit</span><br><span class="line">4 p = znode in C ordered just before n</span><br><span class="line">5 if exists(p, true) wait for watch event</span><br><span class="line">6 goto 2</span><br><span class="line"></span><br><span class="line">Unlock</span><br><span class="line">1 delete(n)</span><br></pre></td></tr></table></figure><p>第一行 <code>SEQUENTIAL</code> 的标记用来将所有希望获取锁的客户端进行排序。每个客户端首先在节点 <code>l</code> 下创建一个临时顺序的子节点，然后获取 <code>l</code> 的所有子节点。之后在第三行判断自己创建的节点是否在所有子节点中有着最小的序号，如果是，则表示当前客户端获得了锁。如果不是，说明有其他序号更小的子节点存在，当前客户端需要排在这之后获取锁。然后客户端会尝试判断排在当前序号前的子节点是否存在，如果存在则设置监听状态等待前一个节点删除的通知，如果不存在，则继续回到第二行执行。每个客户端只监听排在自己前面的子节点避免了羊群效应，因为任何一个子节点删除的通知只会发给其中的一个客户端。每当客户端收到前面节点删除的通知时，需要再次获取 <code>l</code> 的所有子节点来判断自己是否是最小子节点（因为排在前面的子节点并不一定持有锁，可能是更前面的子节点持有锁。这里能否直接复用第一次请求 <code>getChildren</code> 的信息？实现起来会较麻烦些，因为需要挨个判断排在前面的子节点是否还存在，不如直接拉取一份最新的子节点信息）。</p><p>释放锁就是简单的删除对应的临时节点 <code>n</code>。而通过 <code>EPHEMERAL</code> 创建节点能保证进程异常时自动释放锁或者放弃对锁的获取请求。</p><p>这种锁实现有以下几个优势：</p><ol><li>一个节点的删除只会唤醒一个客户端，因为每个节点都只会被一个客户端监听，所以也不会有羊群效应。</li><li>锁的获取和释放不依赖轮询或超时。</li><li>使用这种方式创建锁使得可以通过查看 <code>ZooKeeper</code> 中的数据来监测锁竞争的数量，以及调试锁相关的问题。</li></ol><h4 id="读写锁readwrite-locks"><a class="markdownIt-Anchor" href="#读写锁readwrite-locks"></a> 读写锁（Read/Write Locks）</h4><p>在前面锁的基础上稍加修改就能实现一个读写锁。释放锁的操作和前面的相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Write Lock</span><br><span class="line">1 n = create(l + &quot;/write-&quot;, EPHEMERAL|SEQUENTIAL)</span><br><span class="line">2 C = getChildren(l, false)</span><br><span class="line">3 if n is lowest znode in C, exit</span><br><span class="line">4 p = znode in C ordered just before n</span><br><span class="line">5 if exists(p, true) wait for watch event</span><br><span class="line">6 goto 2</span><br><span class="line"></span><br><span class="line">Read Lock</span><br><span class="line">1 n = create(l + &quot;/read-&quot;, EPHEMERAL|SEQUENTIAL)</span><br><span class="line">2 C = getChildren(l, false)</span><br><span class="line">3 if no write znodes lower than n in C, exit</span><br><span class="line">4 p = write znode in C ordered just before n</span><br><span class="line">5 if exists(p, true) wait for watch event</span><br><span class="line">6 goto 3</span><br></pre></td></tr></table></figure><p>写锁是互斥锁，这里的实现和前面的锁的实现一模一样，只是改变了创建节点的名称。而由于读锁之间没有互斥，所以获取读锁时只需要检查有没有序号更小的写锁即可。另外，读锁实现时最后的 <code>goto</code> 直接跳到了第三行而没有到第二行，这个在 <a href="https://pdos.csail.mit.edu/6.824/papers/zookeeper-faq.txt">ZooKeeper FAQ</a> 中也提到可能是个笔误。这里看起来会有羊群效应，即存在大量的客户端会监听某个写锁，当写锁被删除时这些客户端都会收到通知，不过这本身就是预期的行为，因为读锁之间没有互斥，写锁释放后就应该唤醒所有等待中的读锁。</p><h4 id="双屏障double-barrier"><a class="markdownIt-Anchor" href="#双屏障double-barrier"></a> 双屏障（Double Barrier）</h4><p>双屏障用于客户端在某个计算开始和结束时进行同步，当指定数量的进程加入到屏障中后，就可以开始各自的计算任务，每个进程在整个计算任务结束后就可以离开屏障。<code>MapReduce</code> 任务就是一个典型示例，<code>reduce</code> 任务的开始需要所有 <code>map</code> 任务的完成，当所有 <code>map</code> 任务完成后，各进程就可以进入屏障开始 <code>reduce</code> 任务，而整个 <code>MapRecuce</code> 任务的完成依赖所有 <code>reduce</code> 任务的完成，当所有 <code>reduce</code> 任务完成后，各进程就可以离开屏障。客户端可以使用一个 <code>znode</code> 来表示屏障，记作 <code>b</code>。每个进程在 <code>b</code> 下创建一个子节点来表示进入屏障，通过删除子节点来表示离开屏障。如果 <code>b</code> 下的子节点的数量超过了指定值，那么就允许开始执行计算任务。当 <code>b</code> 下的子节点都被删除后，进程就可以离开屏障。这里同样使用监听机制来高效的等待进入屏障和离开屏障的事件发生。一旦 <code>b</code> 下的子节点数量满足了阈值，创建最后一个子节点的进程会同时创建一个 <code>ready</code> 子节点，那么通过监听 <code>ready</code> 子节点是否存在就可以判断是否可以开始计算。另一方面，论文中提到通过监听某个特定的子节点来判断是否可以离开屏障，这里略显模糊，这个特定的子节点是谁创建的？创建了这个子节点的进程什么时候可以删除这个子节点？<a href="https://pdos.csail.mit.edu/6.824/papers/zookeeper-faq.txt">ZooKeeper FAQ</a> 中提出了另一种方案，每个进程各自监听 <code>b</code> 下的子节点，并且在任务完成后删除所创建的节点，如果各进程发现 <code>b</code> 下没有子节点了，就说明可以离开屏障，整个计算任务已结束。</p><h2 id="zookeeper-的实现"><a class="markdownIt-Anchor" href="#zookeeper-的实现"></a> ZooKeeper 的实现</h2><p><code>ZooKeeper</code> 通过将数据复制到每台服务器上来实现服务的高可用。<code>ZooKeeper</code> 处理的服务器异常针对的是服务器宕机，且这些异常的服务器可能之后会恢复。下图展示了 <code>ZooKeeper</code> 服务的主要组件。当 <code>ZooKeeper</code> 服务收到一个请求时，会对这个请求进行预处理（<code>request processor</code>），如果这个请求需要各服务器协同完成（例如写请求），则会通过一致性协议处理（一种 <code>atomic broadcast</code> 的实现），最终 <code>ZooKeeper</code> 会将修改提交到各服务器副本中。而对于读请求，服务端则直接从本地数据库中读取数据然后返回给客户端。</p><p><img src="/images/zookeeper-2.png" alt="alt" /></p><p>上图中的复制数据库是包含了整个数据树（<code>data tree</code>）的内存数据库。每个 <code>znode</code> 默认最多保存 <code>1MB</code> 数据，不过这个值可以根据需要通过配置修改。从可恢复性考虑，<code>ZooKeeper</code> 会高效的将更新写入到磁盘，并且将更新写入到内存数据库前会先强制将数据刷新到磁盘中。类似于 <code>Chubby</code>，<code>ZooKeeper</code> 也会将提交的操作写入到重放日志中，并且会周期性的对内存数据库生成快照。</p><p>每个 <code>ZooKeeper</code> 服务端都能对客户端提供服务。客户端只会连接一个服务端然后提交请求。在之前提到过，读请求会直接返回当前服务端本地的数据。而修改系统状态的请求、写请求则会交由一致性协议处理。</p><p>作为一致性协议的一部分，客户端的写请求会转发给单台服务器，称之为主节点（<code>leader</code>）。其他的 <code>ZooKeeper</code> 服务器被称之为从节点（<code>followers</code>），从节点会收到来自主节点的状态更新请求，并就状态更新达成一致。</p><h3 id="请求处理器request-processor"><a class="markdownIt-Anchor" href="#请求处理器request-processor"></a> 请求处理器（Request Processor）</h3><p>由于 <code>ZooKeeper</code> 的消息层是原子的，它保证各副本的状态不会和主节点产生分歧，虽然在任一时间点有可能某些副本会比其他副本多提交一些事务。和客户端发送的请求不同，<code>ZooKeeper</code> 中的事务是幂等的。当主节点收到一个写请求时，它会先计算出系统提交了这个写请求后的系统状态，然后将其转化为一个能达到该系统状态的事务。这里之所以要先计算出将来的状态是因为当前可能存在未提交的事务。例如，当前客户端正在进行一个 <code>setData</code> 的条件更新，请求中的版本号和被修改的 <code>znode</code> 的某个未来的版本号所匹配，<code>ZooKeeper</code> 会生成一个 <code>setDataTXN</code> 事务，这个事务包含了更新后的数据，更新后的版本号，以及更新的时间戳。而如果发生了异常，例如 <code>setData</code> 期望的版本号不匹配或者要更新的 <code>znode</code> 不存在，则会生成一个 <code>errorTXN</code> 错误。</p><h3 id="原子广播atomic-broadcast"><a class="markdownIt-Anchor" href="#原子广播atomic-broadcast"></a> 原子广播（Atomic Broadcast）</h3><p>所有更新 <code>ZooKeeper</code> 状态的请求都会被转发给主节点。主节点会执行写请求然后将写请求通过 <code>Zab</code> 协议广播给所有的从节点，<code>Zab</code> 是一种原子的广播协议。当主节点就更新达成一致后，会返回结果给客户端。<code>Zab</code> 默认使用的是简单的大多数同意协议，所以只有过半数的节点存活时 <code>Zab</code> 和 <code>ZooKeeper</code> 才能正常工作（例如，由 <code>2f + 1</code> 个节点组成的 <code>ZooKeeper</code> 系统可以最多容忍 <code>f</code> 台节点异常）。</p><p>为了提高系统的吞吐，<code>ZooKeeper</code> 会尽量保持请求处理管道满载运行。请求管道的不同部分可能有着几千个请求。因为系统状态变更依赖于之前的状态变更，所以 <code>Zab</code> 比常规的原子广播协议提供了更强的顺序保证。具体来说，<code>Zab</code> 保证了主节点广播的状态变更被分发执行的顺序和主节点发出广播的顺序一致，同时 <code>Zab</code> 会先将之前主节点的修改先发送给新的主节点，等到这些修改都执行完成后，新的主节点才能广播自己的修改。</p><p>另外还有些实现细节有利于高性能。<code>ZooKeeper</code> 使用 <code>TCP</code> 协议来发送消息，所以消息的有序性天然得到了保证，这同时也简化了实现。<code>ZooKeeper</code> 使用 <code>Zab</code> 协议选择的主节点作为集群的主节点，这就使得创建事务的节点同时也能发起事务。<code>ZooKeeper</code> 使用日志来记录事务的发起，这同时也作为内存数据库的预写日志，从而避免了将消息写入到磁盘两次。</p><p>在正常情况下 <code>Zab</code> 协议能按序发送所有消息，且每条消息只发送一次，不过由于 <code>Zab</code> 不会持久化已发送的消息的 <code>id</code>，所以在宕机恢复时可能会重复发送消息。因为 <code>ZooKeeper</code> 的事务是原子的，所以只要消息依然能保证有序发送，重复发送就没有问题。实际上，<code>ZooKeeper</code> 会要求 <code>Zab</code> 再次发送至少上次快照开始后的所有已发送的消息。</p><h3 id="复制数据库replicated-database"><a class="markdownIt-Anchor" href="#复制数据库replicated-database"></a> 复制数据库（Replicated Database）</h3><p>每个副本在内存中都有一份 <code>ZooKeeper</code> 状态的拷贝。当 <code>ZooKeeper</code> 宕机重启后，它需要能恢复到宕机前的状态。如果重新发送所有已发送的消息来恢复状态则需要较长时间，尤其是当服务器已经运行了一段时间之后，所以 <code>ZooKeeper</code> 周期性的对系统状态建立快照，并且只重新发送快照之后的所有消息。<code>ZooKeeper</code> 的快照被称之为 <code>fuzzy snapshots</code> 因为执行快照时不会加锁；<code>ZooKeeper</code> 会对数据树进行深度优先搜索，并且能原子的读取每个 <code>znode</code> 的数据和元数据，然后将其写入到磁盘中。这种方式生成的快照有可能包含部分在生成快照期间执行的事务的结果，最终生成的快照可能不会和任一时间点的 <code>ZooKeeper</code> 状态一致。不过由于状态更新是原子的，<code>ZooKeeper</code> 可以在后续恢复阶段重新按序执行已提交的事务。</p><p>例如，当 <code>ZooKeeper</code> 开始执行快照时有两个节点 <code>/foo</code> 和 <code>/goo</code>，对应的节点值分别为 <code>f1</code> 和 <code>g1</code>，节点值的版本号都是1。此时，对系统状态的修改以 <code>&lt;transactionType, path, value, new-version&gt;</code> 的形式到达：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;SetDataTXN, /foo, f2, 2&gt;</span><br><span class="line">&lt;SetDataTXN, /goo, g2, 2&gt;</span><br><span class="line">&lt;SetDataTXN, /foo, f3, 3&gt;</span><br></pre></td></tr></table></figure><p>当系统执行了这些更新后，节点 <code>/foo</code> 的值变为 <code>f3</code>，对应版本号为3，而节点 <code>/goo</code> 的值变为 <code>g2</code>，对应版本号为2。不过，执行 <code>fuzzy snapshot</code> 后的快照中的节点 <code>/foo</code> 的值可能是 <code>f3</code>，而节点 <code>/goo</code> 的值可能是 <code>g1</code>，对应版本号分别为3和1，这并不是一个有效的 <code>ZooKeeper</code> 系统状态。如果服务器宕机后恢复，系统会先读取快照然后重新发送状态更新消息，由于消息执行的顺序性，最终系统的状态和宕机前的状态保存一致。</p><h3 id="客户端-服务端交互client-server-interactions"><a class="markdownIt-Anchor" href="#客户端-服务端交互client-server-interactions"></a> 客户端-服务端交互（Client-Server Interactions）</h3><p>当 <code>ZooKeeper</code> 处理了一个写请求时，它会给所有监听了该节点的客户端发送数据更新通知，并同时删除该节点的监听（因为监听只会触发一次）。服务端会按顺序处理写请求，而且同时不会并发的处理其他写请求或者读请求。这就保证了严格的监听通知顺序。不过服务端的监听通知是由各服务器自行负责，只有和当前服务器连接的客户端才会收到通知，其他客户端对同一节点的监听由其他服务器负责。</p><p>读请求由当前客户端所连接的服务端直接读取内存中的数据返回。每个读请求处理时会标记上一个 <code>zxid</code>，这个 <code>zxid</code> 对应当前服务端所知道的最新的事务。这个 <code>zxid</code> 定义了读写操作之间的相对顺序。通过直接读取内存中的数据返回的方式来处理读请求，<code>ZooKeeper</code> 能保证非常好的读性能，因为这不涉及任何磁盘 <code>IO</code> 或者其他一致性协议。这个设计是满足读密集型应用对性能要求的关键点。</p><p>直接从本地内存读取数据的一个缺点是不保证一定能读取到最新更新的数据，即可能返回过期的数据，即使当前节点的更新已经被 <code>ZooKeeper</code> 所提交，因为只要过半数的节点已完成数据更新就可以认为本次数据已提交，而当前节点可能还没有执行更新。对于必须保证读操作能读取到最新的数据的应用，<code>ZooKeeper</code> 提供了 <code>sync</code> 接口。<code>sync</code> 原语能异步执行，并且会由主节点将所有待写入的更新应用到当前副本中。如果希望读操作能读取到最新的数据，客户端需要在执行读操作前调用 <code>sync</code> 方法。<code>ZooKeeper</code> 对客户端操作的 <code>FIFO</code> 执行顺序保证以及 <code>sync</code> 写操作的全局顺序保证使得读操作在执行读时 <code>sync</code> 发起之前的所有写操作都已经应用到了当前服务器中。在 <code>ZooKeeper</code> 的实现中，执行 <code>sync</code> 操作时不需要原子广播协议，因为使用了基于主节点的算法，只需要将 <code>sync</code> 请求放在主节点和当前节点的请求队列的末尾即可。这种方式能正确工作的前提是当前的主节点依然是主节点。如果当前主节点还有进行中的事务并提交，那么从节点就可以认为当前主节点依然是主节点。如果主节点的请求队列为空，那么主节点就会先提交一个空的事务然后再发起 <code>sync</code> 请求。这样当主节点处于低负载运行时，不需要生成额外的广播请求。在 <code>ZooKeeper</code> 的实现中，主节点会有一段过期时间，所以主节点自己就能知道什么时候不再是主节点，从而不再发起空事务。</p><p><code>ZooKeeper</code> 的服务器会以 <code>FIFO</code> 的顺序来处理客户端请求。响应结果中会附带上 <code>zxid</code>。即使客户端和服务端之间没有请求，在常规的心跳返回中也会附带上当前服务端所知道的最新的 <code>zxid</code>。如果客户端连接上了一台新的服务器，那么这个服务器会保证自己所知道的 <code>zxid</code> 不会比客户端的 <code>zxid</code> 旧。如果客户端发送的 <code>zxid</code> 更新，那么服务端在将自己本地的数据更新到最新前不会和客户端再建立连接。而 <code>ZooKeeper</code> 能保证客户端能连接上一台数据版本满足 <code>zxid</code> 的服务端，因为客户端连接到的服务器必然是过半数有着最新系统状态的服务器之一。这个行为对保证持久性来说至关重要。</p><p><code>ZooKeeper</code> 使用超时来检测客户端的 <code>session</code> 异常。如果在 <code>session timeout</code> 期间没有一台服务器收到来自客户端的请求，那么主节点就会认为发生了异常。如果客户端发送请求的频率足够高，那么就不需要发送其他消息来告诉主节点没有异常。否则，在非活跃期间客户端会发送心跳来维持连接。如果客户端和某台服务器无法发送请求或者心跳，那么客户端会和另外一台服务器建立连接。为了避免客户端的 <code>session</code> 过期，<code>ZooKeeper</code> 客户端类库会在 <code>session</code> 空闲了 <code>s/3</code> 毫秒后发送心跳，并且如果在 <code>2s/3</code> 毫秒内没有收到响应则会连接上另外一台服务器，这里的 <code>s</code> 指的是 <code>session</code> 的过期时间，以毫秒为单位。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://pdos.csail.mit.edu/6.824/papers/zookeeper.pdf">ZooKeeper: Wait-free coordination for Internet-scale systems</a></li><li><a href="https://pdos.csail.mit.edu/6.824/papers/zookeeper-faq.txt">ZooKeeper FAQ</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;大型分布式系统需要各式各样的协同。配置就是其中一种最基础的形式，在其最简单的形式中，配置只是一系列供系统使用的参数，而对于更复杂的系统来说，配置</summary>
      
    
    
    
    
    <category term="Paper" scheme="https://frederick-s.github.io/tags/Paper/"/>
    
    <category term="MIT 6.824" scheme="https://frederick-s.github.io/tags/MIT-6-824/"/>
    
    <category term="Distributed Systems" scheme="https://frederick-s.github.io/tags/Distributed-Systems/"/>
    
    <category term="ZooKeeper" scheme="https://frederick-s.github.io/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.824 - Lab 2 (3): 实现</title>
    <link href="https://frederick-s.github.io/2022/05/15/mit-6.824-lab2-implementation/"/>
    <id>https://frederick-s.github.io/2022/05/15/mit-6.824-lab2-implementation/</id>
    <published>2022-05-14T16:00:00.000Z</published>
    <updated>2022-05-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><h3 id="日志"><a class="markdownIt-Anchor" href="#日志"></a> 日志</h3><p><a href="https://blog.josejg.com/debugging-pretty/">Debugging by Pretty Printing</a> 中介绍了如何高效的打印日志，这有助于在实验时进行问题排查。</p><p>首先在 <code>Go</code> 侧需要封装一个日志打印函数 <code>PrettyDebug</code>（<code>raft</code> 目录下已经有了 <code>Debug</code> 变量，所以这里重命名为 <code>PrettyDebug</code>），在 <code>raft</code> 目录下新建一个 <code>Go</code> 文件，复制以下内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> raft</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrieve the verbosity level from an environment variable</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getVerbosity</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">v := os.Getenv(<span class="string">&quot;VERBOSE&quot;</span>)</span><br><span class="line">level := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> v != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">level, err = strconv.Atoi(v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Invalid verbosity %v&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> level</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> logTopic <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">dClient    logTopic = <span class="string">&quot;CLNT&quot;</span></span><br><span class="line">dCommit    logTopic = <span class="string">&quot;CMIT&quot;</span></span><br><span class="line">dDrop      logTopic = <span class="string">&quot;DROP&quot;</span></span><br><span class="line">dError     logTopic = <span class="string">&quot;ERRO&quot;</span></span><br><span class="line">dInfo      logTopic = <span class="string">&quot;INFO&quot;</span></span><br><span class="line">dLeader    logTopic = <span class="string">&quot;LEAD&quot;</span></span><br><span class="line">dCandidate logTopic = <span class="string">&quot;CAND&quot;</span></span><br><span class="line">dLog       logTopic = <span class="string">&quot;LOG1&quot;</span></span><br><span class="line">dLog2      logTopic = <span class="string">&quot;LOG2&quot;</span></span><br><span class="line">dPersist   logTopic = <span class="string">&quot;PERS&quot;</span></span><br><span class="line">dSnap      logTopic = <span class="string">&quot;SNAP&quot;</span></span><br><span class="line">dTerm      logTopic = <span class="string">&quot;TERM&quot;</span></span><br><span class="line">dTest      logTopic = <span class="string">&quot;TEST&quot;</span></span><br><span class="line">dTimer     logTopic = <span class="string">&quot;TIMR&quot;</span></span><br><span class="line">dTrace     logTopic = <span class="string">&quot;TRCE&quot;</span></span><br><span class="line">dVote      logTopic = <span class="string">&quot;VOTE&quot;</span></span><br><span class="line">dWarn      logTopic = <span class="string">&quot;WARN&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> debugStart time.Time</span><br><span class="line"><span class="keyword">var</span> debugVerbosity <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">debugVerbosity = getVerbosity()</span><br><span class="line">debugStart = time.Now()</span><br><span class="line"></span><br><span class="line">log.SetFlags(log.Flags() &amp;^ (log.Ldate | log.Ltime))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrettyDebug</span><span class="params">(topic logTopic, format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> debugVerbosity &gt;= <span class="number">1</span> &#123;</span><br><span class="line">t := time.Since(debugStart).Microseconds()</span><br><span class="line">t /= <span class="number">100</span></span><br><span class="line">prefix := fmt.Sprintf(<span class="string">&quot;%06d %v &quot;</span>, t, <span class="type">string</span>(topic))</span><br><span class="line">format = prefix + format</span><br><span class="line">log.Printf(format, a...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PrettyDebug</code> 会通过环境变量 <code>VERBOSE</code> 来决定是否打印日志，该方法接受三个参数，第一个是日志主题用于对日志分组，后两个参数则是传递给 <code>log.Printf</code> 进行格式化打印，使用方法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrettyDebug(dTimer, <span class="string">&quot;S%d, apply log, log index=%v, log term=%v, log command=%v&quot;</span>, rf.me, entry.Index, entry.Term, entry.Command)</span><br></pre></td></tr></table></figure><p>日志信息中的 <code>S%d</code> 是关键，它表示当前节点的编号，如 <code>S0</code>，<code>S1</code>，按照这个模式打印日志，在后续日志处理时能将日志按照节点分组。</p><p>然后，就可以通过 <code>VERBOSE=1 go test -run TestFigure82C</code> 来进行测试（这里的 <code>TestFigure82C</code> 可以换成其他的测试用例）：</p><p><img src="/images/raft-lab-1.png" alt="alt" /></p><p>不过所有日志都混到了一起，不好区分，作者因此提供了一个 <code>Python</code> 脚本 <a href="https://gist.github.com/JJGO/e64c0e8aedb5d464b5f79d3b12197338">dslogs</a> 来美化日志。这个脚本用到了 <code>typer</code> 和 <code>rich</code> 两个库，可以通过 <code>pip</code> 全局安装。接着再执行测试 <code>VERBOSE=1 go test -run TestFigure82C | pipenv run python dslogs.py</code>（这里使用了 <code>pipenv</code> 来安装依赖和运行脚本，不使用 <code>pipenv</code> 的可以按照作者的方式执行），美化后的日志根据主题着色后有了更强的区分度：</p><p><img src="/images/raft-lab-2.png" alt="alt" /></p><p>更进一步，还可以将日志按照节点分组展示 <code>VERBOSE=1 go test -run TestFigure82C | pipenv run python dslogs.py -c 3</code>：</p><p><img src="/images/raft-lab-3.png" alt="alt" /></p><p>在上图中，每一列表示一个节点的日志，而且自上而下随时间排序。</p><h3 id="批量测试"><a class="markdownIt-Anchor" href="#批量测试"></a> 批量测试</h3><p>做实验时有时候测试用例成功了，有时候失败了，每次手动测试不方便抓取日志，<a href="https://blog.josejg.com/debugging-pretty/">Debugging by Pretty Printing</a> 的作者提供了另一个脚本 <a href="https://gist.github.com/JJGO/0d73540ef7cc2f066cb535156b7cbdab">dstest</a> 来进行批量测试，并且当测试失败时自动保存日志到文件中，从而可以使用上面提到的脚本 <code>dslogs</code> 来处理日志，<code>dstest</code> 这个脚本也依赖 <code>typer</code> 和 <code>rich</code> 这两个库。</p><p>然后通过 <code>pipenv run python dstest.py 2A -n 10 -v 1</code> 进行批量测试，这里 <code>2A</code> 可以换成其他的测试用例，<code>-n 10</code> 表示测试多少次，默认是10，<code>-v 1</code> 表示设置环境变量 <code>VERBOSE</code>，这样就能告诉 <code>Go</code> 打印日志：</p><p><img src="/images/raft-lab-4.png" alt="alt" /></p><p><img src="/images/raft-lab-5.png" alt="alt" /></p><p>脚本貌似有个小问题，当设置 <code>-v x</code> 参数时，会多一个名为 <code>x</code> 的测试任务，不过并不影响使用。</p><p>如果某次测试执行失败，则会保存相应的日志：</p><p><img src="/images/raft-lab-6.png" alt="alt" /></p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><h3 id="2a"><a class="markdownIt-Anchor" href="#2a"></a> 2A</h3><p>第一个实验是选主，关键有两点：随机化的 <code>election timeout</code> 和什么时候重置 <code>election timeout</code>。</p><p>当候选节点发出 <code>RequestVote</code> 请求后，应该在哪里判断是否获得了足够的选票？一种是在遍历完所有从节点发出 <code>RequestVote</code> 请求后，不过由于 <code>RPC</code> 的异步性，需要某种异步通知机制来通知当前的 <code>goroutine</code>。可以使用 <code>sync.WaitGroup</code>，事先计算好需要多少张选票才能成为主节点，发送 <code>RPC</code> 请求前调用 <code>WaitGroup.Add(1)</code>，每当获得一张选票后就调用 <code>WaitGroup.Done()</code>，当获得了足够的选票后当前 <code>goroutine</code> 就能被唤醒，不过由于当前节点不一定能成为主节点，所以存在无法被唤醒的可能。虽然可以把 <code>WaitGroup</code> 设置成所有 <code>RPC</code> 都响应后再唤醒，不过整个响应时间就受限于最慢的 <code>RPC</code> 请求，等待时间可能会超过一个 <code>election timeout</code> 周期。使用这种方式的一个很大的问题就是无法及时响应其他候选节点成为主节点的情况，因为当前候选节点还阻塞在 <code>WaitGroup.Wait()</code>。</p><p>所以可以将是否获得了足够的选票的判断放在每个 <code>RequestVote</code> 的响应中。先初始化需要的选票数量，每次获得选票后使用原子方法 <code>atomic.AddInt32</code> 对票数减1，当返回票数小于等于0时，说明当前候选节点成为了主节点。</p><h3 id="2b"><a class="markdownIt-Anchor" href="#2b"></a> 2B</h3><p>第二个实验需要实现日志复制。日志是 <code>Raft</code> 的核心部分，首先定义 <code>LogEntry</code>，包含三个字段，索引、任期、指令：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LogEntry <span class="keyword">struct</span> &#123;</span><br><span class="line">Index   <span class="type">int</span></span><br><span class="line">Term    <span class="type">int</span></span><br><span class="line">Command <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以这里需要 <code>Index</code> 是因为需要对日志压缩，所以不能使用 <code>rf.log</code> 的数组下标作为日志项的索引。</p><p>复制日志时，可以选择在调用 <code>Start</code> 方法时就发送 <code>AppendEntries</code> 请求，并且在响应中判断从节点的日志是否匹配来更新 <code>prevLogIndex</code>，然后继续发送 <code>AppendEntries</code> 请求。不过，这会造成两个问题。</p><p>第一个问题是冗余的 <code>RPC</code> 请求，假设客户端连续调用了10次 <code>Start</code>，那么根据当前的 <code>prevLogIndex</code> 计算，主节点所发送的 <code>AppendEntries</code> 请求中分别包含1条日志，2条日志，…，10条日志。然而这10次 <code>AppendEntries</code> 请求完全可以由第10条请求替代，而如果 <code>prevLogIndex</code> 不匹配，主从节点间来回协调的过程又会带来更多的 <code>RPC</code> 交互，最终有可能导致测试用例 <code>TestCount2B</code> 的失败。</p><p>第二个问题是测试用例会模拟出特别不稳定的网络，如果在 <code>AppendEntries</code> 的响应中接着递归异步调用 <code>AppendEntries</code>，由于 <code>goroutine</code> 都在等待网络可能会造成同时存在的 <code>goroutine</code> 数量过多，导致测试失败。</p><p>所以，可以选择不在 <code>Start</code> 中发送带日志的 <code>AppendEntries</code> 请求，而是在常规心跳中根据 <code>nextIndex</code> 计算是否要发送日志。</p><h3 id="2c"><a class="markdownIt-Anchor" href="#2c"></a> 2C</h3><p>第三个实验是持久化，虽然从代码编写角度来说是所有实验中最简单和直白的，但是测试用例并不会比其他实验简单。特别是 <code>TestFigure8Unreliable2C</code>，容易在指定时间内无法提交某条日志，一方面是可以批量发送日志而不是逐条发送，另一方面是及时识别过期的 <code>RPC</code> 请求并丢弃，例如如果响应中的任期小于当前任期则可以直接忽略该响应，因为从节点收到请求时会更新任期（如果从节点的任期比主节点的小），并将更新后的任期放到响应中，所以在当前任期下主节点收到的响应中的任期必然等于当前任期，如果收到了小于当前任期的响应，必然是过期的响应。</p><h3 id="2d"><a class="markdownIt-Anchor" href="#2d"></a> 2D</h3><p>由于执行快照后会对日志压缩，所以 <code>LogEntry.Index</code> 和 <code>rf.log</code> 的数组索引不再一一对应，有两点需要改动，一是使用 <code>len(rf.log)</code> 表示日志长度的地方需要改为 <code>rf.log[len(rf.log)-1].Index</code>；二是使用 <code>rf.log[i]</code> 来引用 <code>LogEntry</code> 的地方需要将 <code>i</code> 减去某个偏移量，这个偏移量可以使用 <code>lastIncludedIndex</code>，例如，从节点想要判断 <code>args.PrevLogIndex</code> 所指向的日志的任期是否和主节点相同，需要改为 <code>rf.log[args.PrevLogIndex-rf.lastIncludedIndex].Term</code> 访问，因此 <code>rf.lastIncludedIndex</code> 也需要持久化。</p><p>另外还遇到两个死锁问题。第一个死锁发生在应用已提交的日志，日志的应用会由一个单独的 <code>goroutine</code> 执行，它会遍历所有需要应用的日志，然后发送到 <code>applyCh</code>，并且在整个期间持有锁：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span></span> applyLog(applyCh <span class="keyword">chan</span> ApplyMsg) &#123;</span><br><span class="line"><span class="keyword">for</span> rf.killed() == <span class="literal">false</span> &#123;</span><br><span class="line">rf.mu.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rf.lastApplied &lt; rf.commitIndex &#123;</span><br><span class="line"><span class="keyword">for</span> i := rf.lastApplied + <span class="number">1</span>; i &lt;= rf.commitIndex; i++ &#123;</span><br><span class="line">logEntry := rf.log[i]</span><br><span class="line">applyMsg := ApplyMsg&#123;</span><br><span class="line">CommandValid: <span class="literal">true</span>,</span><br><span class="line">Command:      logEntry.Command,</span><br><span class="line">CommandIndex: logEntry.Index,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyCh &lt;- applyMsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rf.lastApplied = rf.commitIndex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rf.mu.Unlock()</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种处理方式在之前的实验中没有问题，不过在 <code>2D</code> 中，客户端从 <code>applyCh</code> 中取出数据后，有一定概率会调用 <code>Snapshot</code> 方法，而实现 <code>Snapshot</code> 方法时会继续获取锁，从而造成死锁：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (m.CommandIndex+<span class="number">1</span>)%SnapShotInterval == <span class="number">0</span> &#123;</span><br><span class="line">w := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">e := labgob.NewEncoder(w)</span><br><span class="line">e.Encode(m.CommandIndex)</span><br><span class="line"><span class="keyword">var</span> xlog []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt;= m.CommandIndex; j++ &#123;</span><br><span class="line">xlog = <span class="built_in">append</span>(xlog, cfg.logs[i][j])</span><br><span class="line">&#125;</span><br><span class="line">e.Encode(xlog)</span><br><span class="line">rf.Snapshot(m.CommandIndex, w.Bytes())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个问题也在 <a href="https://pdos.csail.mit.edu/6.824/labs/raft-locking.txt">Raft Locking Advice</a> 中提到，不建议在等待某个事件时持有锁。</p><p>第二个死锁发生在 <code>InstallSnapshot</code>，从节点收到快照后也会通过 <code>applyCh</code> 将快照发送给客户端，这里将 <code>applyCh</code> 作为 <code>Raft</code> 的一个字段使用，不过由于忘记赋值造成 <code>InstallSnapshot</code> 往一个空 <code>channel</code> 中发数据，造成始终阻塞，并导致死锁。</p><h2 id="其他工具"><a class="markdownIt-Anchor" href="#其他工具"></a> 其他工具</h2><h3 id="go-deadlock"><a class="markdownIt-Anchor" href="#go-deadlock"></a> go-deadlock</h3><p>如果怀疑有死锁，可以使用 <a href="https://github.com/sasha-s/go-deadlock">go-deadlock</a> 检测，只需要将 <code>Raft</code> 中的 <code>sync.Mutex</code> 替换成 <code>deadlock.Mutex</code> 即可，如果某个 <code>goroutine</code> 在较长的一段时间后依然无法获取锁，那么就有可能发生了死锁，<code>go-deadlock</code> 会输出持有锁的 <code>goroutine</code> 和希望获取锁的 <code>goroutine</code>，而且也会输出持有锁的 <code>goroutine</code> 阻塞在哪个代码上：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POTENTIAL DEADLOCK:</span><br><span class="line">Previous place where the lock was grabbed</span><br><span class="line">goroutine <span class="number">240</span> lock <span class="number">0xc820160440</span></span><br><span class="line">inmem.<span class="keyword">go</span>:<span class="number">799</span> bttest.(*table).gc &#123; t.mu.RLock() &#125; &lt;&lt;&lt;&lt;&lt;</span><br><span class="line">inmem_test.<span class="keyword">go</span>:<span class="number">125</span> bttest.TestConcurrentMutationsReadModifyAndGC.func5 &#123; tbl.gc() &#125;</span><br><span class="line"></span><br><span class="line">Have been trying to lock it again <span class="keyword">for</span> more than <span class="number">40</span>ms</span><br><span class="line">goroutine <span class="number">68</span> lock <span class="number">0xc820160440</span></span><br><span class="line">inmem.<span class="keyword">go</span>:<span class="number">785</span> bttest.(*table).mutableRow &#123; t.mu.Lock() &#125; &lt;&lt;&lt;&lt;&lt;</span><br><span class="line">inmem.<span class="keyword">go</span>:<span class="number">428</span> bttest.(*server).MutateRow &#123; r := tbl.mutableRow(<span class="type">string</span>(req.RowKey)) &#125;</span><br><span class="line">inmem_test.<span class="keyword">go</span>:<span class="number">111</span> bttest.TestConcurrentMutationsReadModifyAndGC.func3 &#123; s.MutateRow(ctx, req) &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Here is what goroutine <span class="number">240</span> doing now</span><br><span class="line">goroutine <span class="number">240</span> [<span class="keyword">select</span>]:</span><br><span class="line">github.com/sasha-s/<span class="keyword">go</span>-deadlock.lock(<span class="number">0xc82028ca10</span>, <span class="number">0x5189e0</span>, <span class="number">0xc82013a9b0</span>)</span><br><span class="line">        /Users/sasha/<span class="keyword">go</span>/src/github.com/sasha-s/<span class="keyword">go</span>-deadlock/deadlock.<span class="keyword">go</span>:<span class="number">163</span> +<span class="number">0x1640</span></span><br><span class="line">github.com/sasha-s/<span class="keyword">go</span>-deadlock.(*Mutex).Lock(<span class="number">0xc82013a9b0</span>)</span><br><span class="line">        /Users/sasha/<span class="keyword">go</span>/src/github.com/sasha-s/<span class="keyword">go</span>-deadlock/deadlock.<span class="keyword">go</span>:<span class="number">54</span> +<span class="number">0x86</span></span><br><span class="line">google.golang.org/cloud/bigtable/bttest.(*table).gc(<span class="number">0xc820160440</span>)</span><br><span class="line">        /Users/sasha/<span class="keyword">go</span>/src/google.golang.org/cloud/bigtable/bttest/inmem.<span class="keyword">go</span>:<span class="number">814</span> +<span class="number">0x28d</span></span><br><span class="line">google.golang.org/cloud/bigtable/bttest.TestConcurrentMutationsReadModifyAndGC.func5(<span class="number">0xc82015c760</span>, <span class="number">0xc820160440</span>)      /Users/sasha/<span class="keyword">go</span>/src/google.golang.org/cloud/bigtable/bttest/inmem_test.<span class="keyword">go</span>:<span class="number">125</span> +<span class="number">0x48</span></span><br><span class="line">created by google.golang.org/cloud/bigtable/bttest.TestConcurrentMutationsReadModifyAndGC</span><br><span class="line">        /Users/sasha/<span class="keyword">go</span>/src/google.golang.org/cloud/bigtable/bttest/inmem_test.<span class="keyword">go</span>:<span class="number">126</span> +<span class="number">0xb6f</span></span><br></pre></td></tr></table></figure><h3 id="pprof"><a class="markdownIt-Anchor" href="#pprof"></a> pprof</h3><p><a href="https://pdos.csail.mit.edu/6.824/labs/lab-raft.html">6.824 Lab 2: Raft</a> 的每个实验都给出了参考的执行时间，如果发现某个实验的执行时间相差太大，可以使用 <code>pprof</code> 分析。这里以 <code>CPU</code> 耗时分析为例，首先在测试时增加 <code>-cpuprofile cpu.prof</code> 参数，其中 <code>cpu.prof</code> 是输出文件名：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> test -run TestInitialElection2A -cpuprofile cpu.prof</span><br></pre></td></tr></table></figure><p>然后安装 <a href="https://github.com/google/pprof">pprof</a> 并执行 <code>pprof -top cpu.prof</code> 分析：</p><p><img src="/images/raft-lab-7.png" alt="alt" /></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://pdos.csail.mit.edu/6.824/labs/lab-raft.html">6.824 Lab 2: Raft</a></li><li><a href="https://blog.josejg.com/debugging-pretty/">Debugging by Pretty Printing</a></li><li><a href="https://github.com/google/pprof">pprof</a></li><li><a href="https://github.com/sasha-s/go-deadlock">go-deadlock</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#准备工作&quot;&gt;&lt;/a&gt; 准备工作&lt;/h2&gt;
&lt;h3 id=&quot;日志&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#日志&quot;&gt;&lt;/a&gt; 日志&lt;/h3&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="MIT 6.824" scheme="https://frederick-s.github.io/tags/MIT-6-824/"/>
    
    <category term="Distributed Systems" scheme="https://frederick-s.github.io/tags/Distributed-Systems/"/>
    
    <category term="Go" scheme="https://frederick-s.github.io/tags/Go/"/>
    
    <category term="Raft" scheme="https://frederick-s.github.io/tags/Raft/"/>
    
  </entry>
  
</feed>
